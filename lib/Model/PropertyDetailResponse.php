<?php
/**
 * PropertyDetailResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertyDetailResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertyDetailResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PropertyDetailResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'buildings' => '\Swagger\Client\Model\BuildingResponseData',
        'ownership' => '\Swagger\Client\Model\OwnershipResponseData',
        'site_location' => '\Swagger\Client\Model\SiteLocationResponseData',
        'tax_assessment' => '\Swagger\Client\Model\TaxAssessment',
        'most_recent_owner_transfer' => '\Swagger\Client\Model\OwnershipTransfersProduct',
        'last_market_sale' => '\Swagger\Client\Model\OwnershipTransfersProduct'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'buildings' => null,
        'ownership' => null,
        'site_location' => null,
        'tax_assessment' => null,
        'most_recent_owner_transfer' => null,
        'last_market_sale' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buildings' => 'buildings',
        'ownership' => 'ownership',
        'site_location' => 'siteLocation',
        'tax_assessment' => 'taxAssessment',
        'most_recent_owner_transfer' => 'mostRecentOwnerTransfer',
        'last_market_sale' => 'lastMarketSale'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buildings' => 'setBuildings',
        'ownership' => 'setOwnership',
        'site_location' => 'setSiteLocation',
        'tax_assessment' => 'setTaxAssessment',
        'most_recent_owner_transfer' => 'setMostRecentOwnerTransfer',
        'last_market_sale' => 'setLastMarketSale'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buildings' => 'getBuildings',
        'ownership' => 'getOwnership',
        'site_location' => 'getSiteLocation',
        'tax_assessment' => 'getTaxAssessment',
        'most_recent_owner_transfer' => 'getMostRecentOwnerTransfer',
        'last_market_sale' => 'getLastMarketSale'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buildings'] = isset($data['buildings']) ? $data['buildings'] : null;
        $this->container['ownership'] = isset($data['ownership']) ? $data['ownership'] : null;
        $this->container['site_location'] = isset($data['site_location']) ? $data['site_location'] : null;
        $this->container['tax_assessment'] = isset($data['tax_assessment']) ? $data['tax_assessment'] : null;
        $this->container['most_recent_owner_transfer'] = isset($data['most_recent_owner_transfer']) ? $data['most_recent_owner_transfer'] : null;
        $this->container['last_market_sale'] = isset($data['last_market_sale']) ? $data['last_market_sale'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buildings
     *
     * @return \Swagger\Client\Model\BuildingResponseData
     */
    public function getBuildings()
    {
        return $this->container['buildings'];
    }

    /**
     * Sets buildings
     *
     * @param \Swagger\Client\Model\BuildingResponseData $buildings buildings
     *
     * @return $this
     */
    public function setBuildings($buildings)
    {
        $this->container['buildings'] = $buildings;

        return $this;
    }

    /**
     * Gets ownership
     *
     * @return \Swagger\Client\Model\OwnershipResponseData
     */
    public function getOwnership()
    {
        return $this->container['ownership'];
    }

    /**
     * Sets ownership
     *
     * @param \Swagger\Client\Model\OwnershipResponseData $ownership ownership
     *
     * @return $this
     */
    public function setOwnership($ownership)
    {
        $this->container['ownership'] = $ownership;

        return $this;
    }

    /**
     * Gets site_location
     *
     * @return \Swagger\Client\Model\SiteLocationResponseData
     */
    public function getSiteLocation()
    {
        return $this->container['site_location'];
    }

    /**
     * Sets site_location
     *
     * @param \Swagger\Client\Model\SiteLocationResponseData $site_location site_location
     *
     * @return $this
     */
    public function setSiteLocation($site_location)
    {
        $this->container['site_location'] = $site_location;

        return $this;
    }

    /**
     * Gets tax_assessment
     *
     * @return \Swagger\Client\Model\TaxAssessment
     */
    public function getTaxAssessment()
    {
        return $this->container['tax_assessment'];
    }

    /**
     * Sets tax_assessment
     *
     * @param \Swagger\Client\Model\TaxAssessment $tax_assessment tax_assessment
     *
     * @return $this
     */
    public function setTaxAssessment($tax_assessment)
    {
        $this->container['tax_assessment'] = $tax_assessment;

        return $this;
    }

    /**
     * Gets most_recent_owner_transfer
     *
     * @return \Swagger\Client\Model\OwnershipTransfersProduct
     */
    public function getMostRecentOwnerTransfer()
    {
        return $this->container['most_recent_owner_transfer'];
    }

    /**
     * Sets most_recent_owner_transfer
     *
     * @param \Swagger\Client\Model\OwnershipTransfersProduct $most_recent_owner_transfer most_recent_owner_transfer
     *
     * @return $this
     */
    public function setMostRecentOwnerTransfer($most_recent_owner_transfer)
    {
        $this->container['most_recent_owner_transfer'] = $most_recent_owner_transfer;

        return $this;
    }

    /**
     * Gets last_market_sale
     *
     * @return \Swagger\Client\Model\OwnershipTransfersProduct
     */
    public function getLastMarketSale()
    {
        return $this->container['last_market_sale'];
    }

    /**
     * Sets last_market_sale
     *
     * @param \Swagger\Client\Model\OwnershipTransfersProduct $last_market_sale last_market_sale
     *
     * @return $this
     */
    public function setLastMarketSale($last_market_sale)
    {
        $this->container['last_market_sale'] = $last_market_sale;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
