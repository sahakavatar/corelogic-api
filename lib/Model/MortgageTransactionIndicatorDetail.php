<?php
/**
 * MortgageTransactionIndicatorDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MortgageTransactionIndicatorDetail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MortgageTransactionIndicatorDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MortgageTransactionIndicatorDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conforming_loan_indicator' => 'int',
        'equity_loan_indicator' => 'int',
        'nonconforming_loan_indicator' => 'int',
        'other_subordinate_loan_indicator' => 'int',
        'concurrent_junior_mortgage_indicator' => 'string',
        'silent_second_mortgage_indicator' => 'string',
        'mortgage_upsell_indicator' => 'string',
        'seller_carry_back_indicator' => 'int',
        'gse_eligible_mortgage_indicator' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conforming_loan_indicator' => 'int32',
        'equity_loan_indicator' => 'int32',
        'nonconforming_loan_indicator' => 'int32',
        'other_subordinate_loan_indicator' => 'int32',
        'concurrent_junior_mortgage_indicator' => null,
        'silent_second_mortgage_indicator' => null,
        'mortgage_upsell_indicator' => null,
        'seller_carry_back_indicator' => 'int32',
        'gse_eligible_mortgage_indicator' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conforming_loan_indicator' => 'conformingLoanIndicator',
        'equity_loan_indicator' => 'equityLoanIndicator',
        'nonconforming_loan_indicator' => 'nonconformingLoanIndicator',
        'other_subordinate_loan_indicator' => 'otherSubordinateLoanIndicator',
        'concurrent_junior_mortgage_indicator' => 'concurrentJuniorMortgageIndicator',
        'silent_second_mortgage_indicator' => 'silentSecondMortgageIndicator',
        'mortgage_upsell_indicator' => 'mortgageUpsellIndicator',
        'seller_carry_back_indicator' => 'sellerCarryBackIndicator',
        'gse_eligible_mortgage_indicator' => 'gseEligibleMortgageIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conforming_loan_indicator' => 'setConformingLoanIndicator',
        'equity_loan_indicator' => 'setEquityLoanIndicator',
        'nonconforming_loan_indicator' => 'setNonconformingLoanIndicator',
        'other_subordinate_loan_indicator' => 'setOtherSubordinateLoanIndicator',
        'concurrent_junior_mortgage_indicator' => 'setConcurrentJuniorMortgageIndicator',
        'silent_second_mortgage_indicator' => 'setSilentSecondMortgageIndicator',
        'mortgage_upsell_indicator' => 'setMortgageUpsellIndicator',
        'seller_carry_back_indicator' => 'setSellerCarryBackIndicator',
        'gse_eligible_mortgage_indicator' => 'setGseEligibleMortgageIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conforming_loan_indicator' => 'getConformingLoanIndicator',
        'equity_loan_indicator' => 'getEquityLoanIndicator',
        'nonconforming_loan_indicator' => 'getNonconformingLoanIndicator',
        'other_subordinate_loan_indicator' => 'getOtherSubordinateLoanIndicator',
        'concurrent_junior_mortgage_indicator' => 'getConcurrentJuniorMortgageIndicator',
        'silent_second_mortgage_indicator' => 'getSilentSecondMortgageIndicator',
        'mortgage_upsell_indicator' => 'getMortgageUpsellIndicator',
        'seller_carry_back_indicator' => 'getSellerCarryBackIndicator',
        'gse_eligible_mortgage_indicator' => 'getGseEligibleMortgageIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conforming_loan_indicator'] = isset($data['conforming_loan_indicator']) ? $data['conforming_loan_indicator'] : null;
        $this->container['equity_loan_indicator'] = isset($data['equity_loan_indicator']) ? $data['equity_loan_indicator'] : null;
        $this->container['nonconforming_loan_indicator'] = isset($data['nonconforming_loan_indicator']) ? $data['nonconforming_loan_indicator'] : null;
        $this->container['other_subordinate_loan_indicator'] = isset($data['other_subordinate_loan_indicator']) ? $data['other_subordinate_loan_indicator'] : null;
        $this->container['concurrent_junior_mortgage_indicator'] = isset($data['concurrent_junior_mortgage_indicator']) ? $data['concurrent_junior_mortgage_indicator'] : null;
        $this->container['silent_second_mortgage_indicator'] = isset($data['silent_second_mortgage_indicator']) ? $data['silent_second_mortgage_indicator'] : null;
        $this->container['mortgage_upsell_indicator'] = isset($data['mortgage_upsell_indicator']) ? $data['mortgage_upsell_indicator'] : null;
        $this->container['seller_carry_back_indicator'] = isset($data['seller_carry_back_indicator']) ? $data['seller_carry_back_indicator'] : null;
        $this->container['gse_eligible_mortgage_indicator'] = isset($data['gse_eligible_mortgage_indicator']) ? $data['gse_eligible_mortgage_indicator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conforming_loan_indicator
     *
     * @return int
     */
    public function getConformingLoanIndicator()
    {
        return $this->container['conforming_loan_indicator'];
    }

    /**
     * Sets conforming_loan_indicator
     *
     * @param int $conforming_loan_indicator CoreLogic standardized value that indicates if the mortgage loan is considered a conforming loan. Values: 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setConformingLoanIndicator($conforming_loan_indicator)
    {
        $this->container['conforming_loan_indicator'] = $conforming_loan_indicator;

        return $this;
    }

    /**
     * Gets equity_loan_indicator
     *
     * @return int
     */
    public function getEquityLoanIndicator()
    {
        return $this->container['equity_loan_indicator'];
    }

    /**
     * Sets equity_loan_indicator
     *
     * @param int $equity_loan_indicator CoreLogic standardized value that indicates if the mortgage loan is an equity loan. Values: 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setEquityLoanIndicator($equity_loan_indicator)
    {
        $this->container['equity_loan_indicator'] = $equity_loan_indicator;

        return $this;
    }

    /**
     * Gets nonconforming_loan_indicator
     *
     * @return int
     */
    public function getNonconformingLoanIndicator()
    {
        return $this->container['nonconforming_loan_indicator'];
    }

    /**
     * Sets nonconforming_loan_indicator
     *
     * @param int $nonconforming_loan_indicator CoreLogic standardized value that indicates if the mortgage loan is a non-conforming loan. Values: 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setNonconformingLoanIndicator($nonconforming_loan_indicator)
    {
        $this->container['nonconforming_loan_indicator'] = $nonconforming_loan_indicator;

        return $this;
    }

    /**
     * Gets other_subordinate_loan_indicator
     *
     * @return int
     */
    public function getOtherSubordinateLoanIndicator()
    {
        return $this->container['other_subordinate_loan_indicator'];
    }

    /**
     * Sets other_subordinate_loan_indicator
     *
     * @param int $other_subordinate_loan_indicator CoreLogic standardized value that indicates if the mortgage loan is a subordinate lien. Values: 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setOtherSubordinateLoanIndicator($other_subordinate_loan_indicator)
    {
        $this->container['other_subordinate_loan_indicator'] = $other_subordinate_loan_indicator;

        return $this;
    }

    /**
     * Gets concurrent_junior_mortgage_indicator
     *
     * @return string
     */
    public function getConcurrentJuniorMortgageIndicator()
    {
        return $this->container['concurrent_junior_mortgage_indicator'];
    }

    /**
     * Sets concurrent_junior_mortgage_indicator
     *
     * @param string $concurrent_junior_mortgage_indicator Identifies a junior mortgage that is recorded simultaneous/concurrent/at the same time as the senior mortgage on the property.
     *
     * @return $this
     */
    public function setConcurrentJuniorMortgageIndicator($concurrent_junior_mortgage_indicator)
    {
        $this->container['concurrent_junior_mortgage_indicator'] = $concurrent_junior_mortgage_indicator;

        return $this;
    }

    /**
     * Gets silent_second_mortgage_indicator
     *
     * @return string
     */
    public function getSilentSecondMortgageIndicator()
    {
        return $this->container['silent_second_mortgage_indicator'];
    }

    /**
     * Sets silent_second_mortgage_indicator
     *
     * @param string $silent_second_mortgage_indicator Identifies a junior mortgage where Seller is also the Lender.
     *
     * @return $this
     */
    public function setSilentSecondMortgageIndicator($silent_second_mortgage_indicator)
    {
        $this->container['silent_second_mortgage_indicator'] = $silent_second_mortgage_indicator;

        return $this;
    }

    /**
     * Gets mortgage_upsell_indicator
     *
     * @return string
     */
    public function getMortgageUpsellIndicator()
    {
        return $this->container['mortgage_upsell_indicator'];
    }

    /**
     * Sets mortgage_upsell_indicator
     *
     * @param string $mortgage_upsell_indicator Identifies a junior mortgage where Lender is an institution and is the same Lender as the senior mortgage.
     *
     * @return $this
     */
    public function setMortgageUpsellIndicator($mortgage_upsell_indicator)
    {
        $this->container['mortgage_upsell_indicator'] = $mortgage_upsell_indicator;

        return $this;
    }

    /**
     * Gets seller_carry_back_indicator
     *
     * @return int
     */
    public function getSellerCarryBackIndicator()
    {
        return $this->container['seller_carry_back_indicator'];
    }

    /**
     * Sets seller_carry_back_indicator
     *
     * @param int $seller_carry_back_indicator CoreLogic standardized value that indicates if part or all of the mortgage loan is carried by the seller. Values: 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setSellerCarryBackIndicator($seller_carry_back_indicator)
    {
        $this->container['seller_carry_back_indicator'] = $seller_carry_back_indicator;

        return $this;
    }

    /**
     * Gets gse_eligible_mortgage_indicator
     *
     * @return int
     */
    public function getGseEligibleMortgageIndicator()
    {
        return $this->container['gse_eligible_mortgage_indicator'];
    }

    /**
     * Sets gse_eligible_mortgage_indicator
     *
     * @param int $gse_eligible_mortgage_indicator Indicates if a Government Sponsored Enterprise entity (GSE) Mortgage Rider was recorded with the mortgage loan. Values: 0 or null = not applicable, 1 = applicable.
     *
     * @return $this
     */
    public function setGseEligibleMortgageIndicator($gse_eligible_mortgage_indicator)
    {
        $this->container['gse_eligible_mortgage_indicator'] = $gse_eligible_mortgage_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
