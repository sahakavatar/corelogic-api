<?php
/**
 * PropertyDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertyDetails Class Doc Comment
 *
 * @category Class
 * @description Property Details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertyDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PropertyDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'actual_year_built' => 'int',
        'effective_year_built' => 'int',
        'is_residential_property' => 'string',
        'is_new_construction' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'actual_year_built' => 'int32',
        'effective_year_built' => 'int32',
        'is_residential_property' => null,
        'is_new_construction' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_year_built' => 'actualYearBuilt',
        'effective_year_built' => 'effectiveYearBuilt',
        'is_residential_property' => 'isResidentialProperty',
        'is_new_construction' => 'isNewConstruction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_year_built' => 'setActualYearBuilt',
        'effective_year_built' => 'setEffectiveYearBuilt',
        'is_residential_property' => 'setIsResidentialProperty',
        'is_new_construction' => 'setIsNewConstruction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_year_built' => 'getActualYearBuilt',
        'effective_year_built' => 'getEffectiveYearBuilt',
        'is_residential_property' => 'getIsResidentialProperty',
        'is_new_construction' => 'getIsNewConstruction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actual_year_built'] = isset($data['actual_year_built']) ? $data['actual_year_built'] : null;
        $this->container['effective_year_built'] = isset($data['effective_year_built']) ? $data['effective_year_built'] : null;
        $this->container['is_residential_property'] = isset($data['is_residential_property']) ? $data['is_residential_property'] : null;
        $this->container['is_new_construction'] = isset($data['is_new_construction']) ? $data['is_new_construction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actual_year_built
     *
     * @return int
     */
    public function getActualYearBuilt()
    {
        return $this->container['actual_year_built'];
    }

    /**
     * Sets actual_year_built
     *
     * @param int $actual_year_built This is the construction year of the original building on the parcel as provided by the county.  Not all counties maintain both Original and Effective Year Built. Null if not available from the source. Format: YYYY
     *
     * @return $this
     */
    public function setActualYearBuilt($actual_year_built)
    {
        $this->container['actual_year_built'] = $actual_year_built;

        return $this;
    }

    /**
     * Gets effective_year_built
     *
     * @return int
     */
    public function getEffectiveYearBuilt()
    {
        return $this->container['effective_year_built'];
    }

    /**
     * Sets effective_year_built
     *
     * @param int $effective_year_built Typically this field reflects the first year the building was assessed with its current components (e.g., a building is originally constructed in 1960 and a bedroom and bath was added to the building in 1974. In this example, Year Built would be 1960 and the Effective Year Built would be 1974).   Certain counties only maintain one Year Built data element, and overlay Original Year Built with Effective Year Built if there was a structural change to the building that affected Assessed Value.  In these counties, Year Built will be null and Effective Year Built will contain the single data element provided by the source - examples include Fresno and San Diego counties.  Format: YYYY
     *
     * @return $this
     */
    public function setEffectiveYearBuilt($effective_year_built)
    {
        $this->container['effective_year_built'] = $effective_year_built;

        return $this;
    }

    /**
     * Gets is_residential_property
     *
     * @return string
     */
    public function getIsResidentialProperty()
    {
        return $this->container['is_residential_property'];
    }

    /**
     * Sets is_residential_property
     *
     * @param string $is_residential_property Indicates whether the property is residential. Y = yes or NULL = no or unknown.
     *
     * @return $this
     */
    public function setIsResidentialProperty($is_residential_property)
    {
        $this->container['is_residential_property'] = $is_residential_property;

        return $this;
    }

    /**
     * Gets is_new_construction
     *
     * @return int
     */
    public function getIsNewConstruction()
    {
        return $this->container['is_new_construction'];
    }

    /**
     * Sets is_new_construction
     *
     * @param int $is_new_construction CoreLogic standardized value that indicates the ownership transfer/sale is for a newly constructed property - usually the seller is the Builder and identified from information on Grant Deed.   0 = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setIsNewConstruction($is_new_construction)
    {
        $this->container['is_new_construction'] = $is_new_construction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
