<?php
/**
 * InteriorRooms
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InteriorRooms Class Doc Comment
 *
 * @category Class
 * @description Interior Rooms.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InteriorRooms implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InteriorRooms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'total_count' => 'int',
        'bedrooms_count' => 'int',
        'bathrooms_count' => 'float',
        'full_bathrooms_count' => 'int',
        'half_bathrooms_count' => 'int',
        'one_qtr_bathrooms_count' => 'int',
        'three_qtr_bathrooms_count' => 'int',
        'kitchens_count' => 'int',
        'family_rooms_count' => 'int',
        'living_rooms_count' => 'int',
        'basement_rooms_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'total_count' => 'int32',
        'bedrooms_count' => 'int32',
        'bathrooms_count' => null,
        'full_bathrooms_count' => 'int32',
        'half_bathrooms_count' => 'int32',
        'one_qtr_bathrooms_count' => 'int32',
        'three_qtr_bathrooms_count' => 'int32',
        'kitchens_count' => 'int32',
        'family_rooms_count' => 'int32',
        'living_rooms_count' => 'int32',
        'basement_rooms_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'total_count' => 'totalCount',
        'bedrooms_count' => 'bedroomsCount',
        'bathrooms_count' => 'bathroomsCount',
        'full_bathrooms_count' => 'fullBathroomsCount',
        'half_bathrooms_count' => 'halfBathroomsCount',
        'one_qtr_bathrooms_count' => 'oneQtrBathroomsCount',
        'three_qtr_bathrooms_count' => 'threeQtrBathroomsCount',
        'kitchens_count' => 'kitchensCount',
        'family_rooms_count' => 'familyRoomsCount',
        'living_rooms_count' => 'livingRoomsCount',
        'basement_rooms_count' => 'basementRoomsCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'total_count' => 'setTotalCount',
        'bedrooms_count' => 'setBedroomsCount',
        'bathrooms_count' => 'setBathroomsCount',
        'full_bathrooms_count' => 'setFullBathroomsCount',
        'half_bathrooms_count' => 'setHalfBathroomsCount',
        'one_qtr_bathrooms_count' => 'setOneQtrBathroomsCount',
        'three_qtr_bathrooms_count' => 'setThreeQtrBathroomsCount',
        'kitchens_count' => 'setKitchensCount',
        'family_rooms_count' => 'setFamilyRoomsCount',
        'living_rooms_count' => 'setLivingRoomsCount',
        'basement_rooms_count' => 'setBasementRoomsCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'total_count' => 'getTotalCount',
        'bedrooms_count' => 'getBedroomsCount',
        'bathrooms_count' => 'getBathroomsCount',
        'full_bathrooms_count' => 'getFullBathroomsCount',
        'half_bathrooms_count' => 'getHalfBathroomsCount',
        'one_qtr_bathrooms_count' => 'getOneQtrBathroomsCount',
        'three_qtr_bathrooms_count' => 'getThreeQtrBathroomsCount',
        'kitchens_count' => 'getKitchensCount',
        'family_rooms_count' => 'getFamilyRoomsCount',
        'living_rooms_count' => 'getLivingRoomsCount',
        'basement_rooms_count' => 'getBasementRoomsCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['total_count'] = isset($data['total_count']) ? $data['total_count'] : null;
        $this->container['bedrooms_count'] = isset($data['bedrooms_count']) ? $data['bedrooms_count'] : null;
        $this->container['bathrooms_count'] = isset($data['bathrooms_count']) ? $data['bathrooms_count'] : null;
        $this->container['full_bathrooms_count'] = isset($data['full_bathrooms_count']) ? $data['full_bathrooms_count'] : null;
        $this->container['half_bathrooms_count'] = isset($data['half_bathrooms_count']) ? $data['half_bathrooms_count'] : null;
        $this->container['one_qtr_bathrooms_count'] = isset($data['one_qtr_bathrooms_count']) ? $data['one_qtr_bathrooms_count'] : null;
        $this->container['three_qtr_bathrooms_count'] = isset($data['three_qtr_bathrooms_count']) ? $data['three_qtr_bathrooms_count'] : null;
        $this->container['kitchens_count'] = isset($data['kitchens_count']) ? $data['kitchens_count'] : null;
        $this->container['family_rooms_count'] = isset($data['family_rooms_count']) ? $data['family_rooms_count'] : null;
        $this->container['living_rooms_count'] = isset($data['living_rooms_count']) ? $data['living_rooms_count'] : null;
        $this->container['basement_rooms_count'] = isset($data['basement_rooms_count']) ? $data['basement_rooms_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets total_count
     *
     * @return int
     */
    public function getTotalCount()
    {
        return $this->container['total_count'];
    }

    /**
     * Sets total_count
     *
     * @param int $total_count Total number of rooms as supplied by the source.
     *
     * @return $this
     */
    public function setTotalCount($total_count)
    {
        $this->container['total_count'] = $total_count;

        return $this;
    }

    /**
     * Gets bedrooms_count
     *
     * @return int
     */
    public function getBedroomsCount()
    {
        return $this->container['bedrooms_count'];
    }

    /**
     * Sets bedrooms_count
     *
     * @param int $bedrooms_count CoreLogic calculated total bedrooms for the buildings.
     *
     * @return $this
     */
    public function setBedroomsCount($bedrooms_count)
    {
        $this->container['bedrooms_count'] = $bedrooms_count;

        return $this;
    }

    /**
     * Gets bathrooms_count
     *
     * @return float
     */
    public function getBathroomsCount()
    {
        return $this->container['bathrooms_count'];
    }

    /**
     * Sets bathrooms_count
     *
     * @param float $bathrooms_count Total number of rooms that are Bathrooms if this is the method of establishing bathroom property characterized by the source. Source values are whole numbers, although field allows for up to 2 decimal places in data deliveries.
     *
     * @return $this
     */
    public function setBathroomsCount($bathrooms_count)
    {
        $this->container['bathrooms_count'] = $bathrooms_count;

        return $this;
    }

    /**
     * Gets full_bathrooms_count
     *
     * @return int
     */
    public function getFullBathroomsCount()
    {
        return $this->container['full_bathrooms_count'];
    }

    /**
     * Sets full_bathrooms_count
     *
     * @param int $full_bathrooms_count Total number of full bath rooms as supplied by source. If source does not break out full versus partial Baths -field will be null in this case.
     *
     * @return $this
     */
    public function setFullBathroomsCount($full_bathrooms_count)
    {
        $this->container['full_bathrooms_count'] = $full_bathrooms_count;

        return $this;
    }

    /**
     * Gets half_bathrooms_count
     *
     * @return int
     */
    public function getHalfBathroomsCount()
    {
        return $this->container['half_bathrooms_count'];
    }

    /**
     * Sets half_bathrooms_count
     *
     * @param int $half_bathrooms_count Total number of half bath rooms (typically comprised of a sink & toilet) as supplied by source. If source does not break out full versus partial Baths &#45; field will be null in this case.
     *
     * @return $this
     */
    public function setHalfBathroomsCount($half_bathrooms_count)
    {
        $this->container['half_bathrooms_count'] = $half_bathrooms_count;

        return $this;
    }

    /**
     * Gets one_qtr_bathrooms_count
     *
     * @return int
     */
    public function getOneQtrBathroomsCount()
    {
        return $this->container['one_qtr_bathrooms_count'];
    }

    /**
     * Sets one_qtr_bathrooms_count
     *
     * @param int $one_qtr_bathrooms_count Total number of quarter bath rooms (typically comprised only of a sink, as found in many laundry rooms) as supplied by source. If source does not break out full versus partial Baths &#45; field will be null in this case.
     *
     * @return $this
     */
    public function setOneQtrBathroomsCount($one_qtr_bathrooms_count)
    {
        $this->container['one_qtr_bathrooms_count'] = $one_qtr_bathrooms_count;

        return $this;
    }

    /**
     * Gets three_qtr_bathrooms_count
     *
     * @return int
     */
    public function getThreeQtrBathroomsCount()
    {
        return $this->container['three_qtr_bathrooms_count'];
    }

    /**
     * Sets three_qtr_bathrooms_count
     *
     * @param int $three_qtr_bathrooms_count Total number of three-quarter bath rooms (typically comprised of a sink, toilet & shower stall) as supplied by source. If source does not break out full versus partial Baths &#45; field will be null in this case.
     *
     * @return $this
     */
    public function setThreeQtrBathroomsCount($three_qtr_bathrooms_count)
    {
        $this->container['three_qtr_bathrooms_count'] = $three_qtr_bathrooms_count;

        return $this;
    }

    /**
     * Gets kitchens_count
     *
     * @return int
     */
    public function getKitchensCount()
    {
        return $this->container['kitchens_count'];
    }

    /**
     * Sets kitchens_count
     *
     * @param int $kitchens_count Total number of kitchens contained in the primary building.
     *
     * @return $this
     */
    public function setKitchensCount($kitchens_count)
    {
        $this->container['kitchens_count'] = $kitchens_count;

        return $this;
    }

    /**
     * Gets family_rooms_count
     *
     * @return int
     */
    public function getFamilyRoomsCount()
    {
        return $this->container['family_rooms_count'];
    }

    /**
     * Sets family_rooms_count
     *
     * @param int $family_rooms_count Total number of family rooms contained in the primary building.
     *
     * @return $this
     */
    public function setFamilyRoomsCount($family_rooms_count)
    {
        $this->container['family_rooms_count'] = $family_rooms_count;

        return $this;
    }

    /**
     * Gets living_rooms_count
     *
     * @return int
     */
    public function getLivingRoomsCount()
    {
        return $this->container['living_rooms_count'];
    }

    /**
     * Sets living_rooms_count
     *
     * @param int $living_rooms_count Total number of living rooms contained in the primary building.
     *
     * @return $this
     */
    public function setLivingRoomsCount($living_rooms_count)
    {
        $this->container['living_rooms_count'] = $living_rooms_count;

        return $this;
    }

    /**
     * Gets basement_rooms_count
     *
     * @return int
     */
    public function getBasementRoomsCount()
    {
        return $this->container['basement_rooms_count'];
    }

    /**
     * Sets basement_rooms_count
     *
     * @param int $basement_rooms_count County provided total rooms located in the basement. Most jurisdictions count any room with a door, with the exception of bathrooms.
     *
     * @return $this
     */
    public function setBasementRoomsCount($basement_rooms_count)
    {
        $this->container['basement_rooms_count'] = $basement_rooms_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
