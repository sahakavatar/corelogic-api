<?php
/**
 * PropertyTaxLienTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertyTaxLienTransaction Class Doc Comment
 *
 * @category Class
 * @description Property Tax Lien Transaction.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertyTaxLienTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PropertyTaxLienTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tax_lien_transaction' => '\Swagger\Client\Model\TaxLienTransaction',
        'tax_lien_details' => '\Swagger\Client\Model\TaxLienDetails',
        'tax_payer_name' => '\Swagger\Client\Model\TaxPayerName',
        'tax_payer_mailing_address' => '\Swagger\Client\Model\TaxPayerMailingAddress',
        'original_tax_lien_transaction' => '\Swagger\Client\Model\OriginalTaxLienTransaction'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tax_lien_transaction' => null,
        'tax_lien_details' => null,
        'tax_payer_name' => null,
        'tax_payer_mailing_address' => null,
        'original_tax_lien_transaction' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax_lien_transaction' => 'taxLienTransaction',
        'tax_lien_details' => 'taxLienDetails',
        'tax_payer_name' => 'taxPayerName',
        'tax_payer_mailing_address' => 'taxPayerMailingAddress',
        'original_tax_lien_transaction' => 'originalTaxLienTransaction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax_lien_transaction' => 'setTaxLienTransaction',
        'tax_lien_details' => 'setTaxLienDetails',
        'tax_payer_name' => 'setTaxPayerName',
        'tax_payer_mailing_address' => 'setTaxPayerMailingAddress',
        'original_tax_lien_transaction' => 'setOriginalTaxLienTransaction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax_lien_transaction' => 'getTaxLienTransaction',
        'tax_lien_details' => 'getTaxLienDetails',
        'tax_payer_name' => 'getTaxPayerName',
        'tax_payer_mailing_address' => 'getTaxPayerMailingAddress',
        'original_tax_lien_transaction' => 'getOriginalTaxLienTransaction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tax_lien_transaction'] = isset($data['tax_lien_transaction']) ? $data['tax_lien_transaction'] : null;
        $this->container['tax_lien_details'] = isset($data['tax_lien_details']) ? $data['tax_lien_details'] : null;
        $this->container['tax_payer_name'] = isset($data['tax_payer_name']) ? $data['tax_payer_name'] : null;
        $this->container['tax_payer_mailing_address'] = isset($data['tax_payer_mailing_address']) ? $data['tax_payer_mailing_address'] : null;
        $this->container['original_tax_lien_transaction'] = isset($data['original_tax_lien_transaction']) ? $data['original_tax_lien_transaction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tax_lien_transaction
     *
     * @return \Swagger\Client\Model\TaxLienTransaction
     */
    public function getTaxLienTransaction()
    {
        return $this->container['tax_lien_transaction'];
    }

    /**
     * Sets tax_lien_transaction
     *
     * @param \Swagger\Client\Model\TaxLienTransaction $tax_lien_transaction tax_lien_transaction
     *
     * @return $this
     */
    public function setTaxLienTransaction($tax_lien_transaction)
    {
        $this->container['tax_lien_transaction'] = $tax_lien_transaction;

        return $this;
    }

    /**
     * Gets tax_lien_details
     *
     * @return \Swagger\Client\Model\TaxLienDetails
     */
    public function getTaxLienDetails()
    {
        return $this->container['tax_lien_details'];
    }

    /**
     * Sets tax_lien_details
     *
     * @param \Swagger\Client\Model\TaxLienDetails $tax_lien_details tax_lien_details
     *
     * @return $this
     */
    public function setTaxLienDetails($tax_lien_details)
    {
        $this->container['tax_lien_details'] = $tax_lien_details;

        return $this;
    }

    /**
     * Gets tax_payer_name
     *
     * @return \Swagger\Client\Model\TaxPayerName
     */
    public function getTaxPayerName()
    {
        return $this->container['tax_payer_name'];
    }

    /**
     * Sets tax_payer_name
     *
     * @param \Swagger\Client\Model\TaxPayerName $tax_payer_name tax_payer_name
     *
     * @return $this
     */
    public function setTaxPayerName($tax_payer_name)
    {
        $this->container['tax_payer_name'] = $tax_payer_name;

        return $this;
    }

    /**
     * Gets tax_payer_mailing_address
     *
     * @return \Swagger\Client\Model\TaxPayerMailingAddress
     */
    public function getTaxPayerMailingAddress()
    {
        return $this->container['tax_payer_mailing_address'];
    }

    /**
     * Sets tax_payer_mailing_address
     *
     * @param \Swagger\Client\Model\TaxPayerMailingAddress $tax_payer_mailing_address tax_payer_mailing_address
     *
     * @return $this
     */
    public function setTaxPayerMailingAddress($tax_payer_mailing_address)
    {
        $this->container['tax_payer_mailing_address'] = $tax_payer_mailing_address;

        return $this;
    }

    /**
     * Gets original_tax_lien_transaction
     *
     * @return \Swagger\Client\Model\OriginalTaxLienTransaction
     */
    public function getOriginalTaxLienTransaction()
    {
        return $this->container['original_tax_lien_transaction'];
    }

    /**
     * Sets original_tax_lien_transaction
     *
     * @param \Swagger\Client\Model\OriginalTaxLienTransaction $original_tax_lien_transaction original_tax_lien_transaction
     *
     * @return $this
     */
    public function setOriginalTaxLienTransaction($original_tax_lien_transaction)
    {
        $this->container['original_tax_lien_transaction'] = $original_tax_lien_transaction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
