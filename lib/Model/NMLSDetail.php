<?php
/**
 * NMLSDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NMLSDetail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NMLSDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NMLSDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'loan_officer_nmlsid' => 'float',
        'loan_officer_nmls_name' => 'string',
        'loan_company_nmlsid1' => 'float',
        'loan_company_nmls_name1' => 'string',
        'loan_company_nmlsid2' => 'float',
        'loan_company_nmls_name2' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'loan_officer_nmlsid' => null,
        'loan_officer_nmls_name' => null,
        'loan_company_nmlsid1' => null,
        'loan_company_nmls_name1' => null,
        'loan_company_nmlsid2' => null,
        'loan_company_nmls_name2' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'loan_officer_nmlsid' => 'loanOfficerNMLSId',
        'loan_officer_nmls_name' => 'loanOfficerNMLSName',
        'loan_company_nmlsid1' => 'loanCompanyNMLSId1',
        'loan_company_nmls_name1' => 'loanCompanyNMLSName1',
        'loan_company_nmlsid2' => 'loanCompanyNMLSId2',
        'loan_company_nmls_name2' => 'loanCompanyNMLSName2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'loan_officer_nmlsid' => 'setLoanOfficerNmlsid',
        'loan_officer_nmls_name' => 'setLoanOfficerNmlsName',
        'loan_company_nmlsid1' => 'setLoanCompanyNmlsid1',
        'loan_company_nmls_name1' => 'setLoanCompanyNmlsName1',
        'loan_company_nmlsid2' => 'setLoanCompanyNmlsid2',
        'loan_company_nmls_name2' => 'setLoanCompanyNmlsName2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'loan_officer_nmlsid' => 'getLoanOfficerNmlsid',
        'loan_officer_nmls_name' => 'getLoanOfficerNmlsName',
        'loan_company_nmlsid1' => 'getLoanCompanyNmlsid1',
        'loan_company_nmls_name1' => 'getLoanCompanyNmlsName1',
        'loan_company_nmlsid2' => 'getLoanCompanyNmlsid2',
        'loan_company_nmls_name2' => 'getLoanCompanyNmlsName2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['loan_officer_nmlsid'] = isset($data['loan_officer_nmlsid']) ? $data['loan_officer_nmlsid'] : null;
        $this->container['loan_officer_nmls_name'] = isset($data['loan_officer_nmls_name']) ? $data['loan_officer_nmls_name'] : null;
        $this->container['loan_company_nmlsid1'] = isset($data['loan_company_nmlsid1']) ? $data['loan_company_nmlsid1'] : null;
        $this->container['loan_company_nmls_name1'] = isset($data['loan_company_nmls_name1']) ? $data['loan_company_nmls_name1'] : null;
        $this->container['loan_company_nmlsid2'] = isset($data['loan_company_nmlsid2']) ? $data['loan_company_nmlsid2'] : null;
        $this->container['loan_company_nmls_name2'] = isset($data['loan_company_nmls_name2']) ? $data['loan_company_nmls_name2'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets loan_officer_nmlsid
     *
     * @return float
     */
    public function getLoanOfficerNmlsid()
    {
        return $this->container['loan_officer_nmlsid'];
    }

    /**
     * Sets loan_officer_nmlsid
     *
     * @param float $loan_officer_nmlsid Typically this field will contain First Deed of Trust (Purchase or Refinance) - Lender's NMLS ID.  This field may be NULL or Zero if loan is not required by the S.A.F.E. act to be recorded with NMLS information such as Equity line/loan.
     *
     * @return $this
     */
    public function setLoanOfficerNmlsid($loan_officer_nmlsid)
    {
        $this->container['loan_officer_nmlsid'] = $loan_officer_nmlsid;

        return $this;
    }

    /**
     * Gets loan_officer_nmls_name
     *
     * @return string
     */
    public function getLoanOfficerNmlsName()
    {
        return $this->container['loan_officer_nmls_name'];
    }

    /**
     * Sets loan_officer_nmls_name
     *
     * @param string $loan_officer_nmls_name Typically this field will contain First Deed of Trust (Purchase or Refinance) - Lender Officer's NMLS Name.  This field may be NULL or Zero if loan is not required by the S.A.F.E. act to be recorded with NMLS information such as Equity line/loan.
     *
     * @return $this
     */
    public function setLoanOfficerNmlsName($loan_officer_nmls_name)
    {
        $this->container['loan_officer_nmls_name'] = $loan_officer_nmls_name;

        return $this;
    }

    /**
     * Gets loan_company_nmlsid1
     *
     * @return float
     */
    public function getLoanCompanyNmlsid1()
    {
        return $this->container['loan_company_nmlsid1'];
    }

    /**
     * Sets loan_company_nmlsid1
     *
     * @param float $loan_company_nmlsid1 Typically this field will contain First Deed of Trust (Purchase or Refinance) - NMLS ID associated with the Loan Origination.  This field may be NULL or Zero if loan is not required by the S.A.F.E. act to be recorded with NMLS information such as Equity line/loan.
     *
     * @return $this
     */
    public function setLoanCompanyNmlsid1($loan_company_nmlsid1)
    {
        $this->container['loan_company_nmlsid1'] = $loan_company_nmlsid1;

        return $this;
    }

    /**
     * Gets loan_company_nmls_name1
     *
     * @return string
     */
    public function getLoanCompanyNmlsName1()
    {
        return $this->container['loan_company_nmls_name1'];
    }

    /**
     * Sets loan_company_nmls_name1
     *
     * @param string $loan_company_nmls_name1 Typically this field will contain First Deed of Trust (Purchase or Refinance) - Lender's NMLS Name. This field may be NULL or Zero if loan is not required by the S.A.F.E. act to be recorded with NMLS information such as Equity line/loan.
     *
     * @return $this
     */
    public function setLoanCompanyNmlsName1($loan_company_nmls_name1)
    {
        $this->container['loan_company_nmls_name1'] = $loan_company_nmls_name1;

        return $this;
    }

    /**
     * Gets loan_company_nmlsid2
     *
     * @return float
     */
    public function getLoanCompanyNmlsid2()
    {
        return $this->container['loan_company_nmlsid2'];
    }

    /**
     * Sets loan_company_nmlsid2
     *
     * @param float $loan_company_nmlsid2 Typically this field will contain First Deed of Trust (Purchase or Refinance) - NMLS ID associated with the Loan Origination, if a second ID is listed on document.  A second NMLS ID may be listed on the mortgage document.  For example, a Loan Broker NMLS ID may be listed on the document in addition to the Lender NMLS ID.  This field may be NULL or Zero if loan is not required by the S.A.F.E. act to be recorded with NMLS information such as Equity line/loan.
     *
     * @return $this
     */
    public function setLoanCompanyNmlsid2($loan_company_nmlsid2)
    {
        $this->container['loan_company_nmlsid2'] = $loan_company_nmlsid2;

        return $this;
    }

    /**
     * Gets loan_company_nmls_name2
     *
     * @return string
     */
    public function getLoanCompanyNmlsName2()
    {
        return $this->container['loan_company_nmls_name2'];
    }

    /**
     * Sets loan_company_nmls_name2
     *
     * @param string $loan_company_nmls_name2 Typically this field will contain First Deed of Trust (Purchase or Refinance) - Lender's NMLS Name.  This field may be NULL or Zero if loan is not required by the S.A.F.E. act to be recorded with NMLS information such as Equity line/loan.
     *
     * @return $this
     */
    public function setLoanCompanyNmlsName2($loan_company_nmls_name2)
    {
        $this->container['loan_company_nmls_name2'] = $loan_company_nmls_name2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
