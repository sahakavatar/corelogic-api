<?php
/**
 * ConstructionDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConstructionDetails Class Doc Comment
 *
 * @category Class
 * @description Construction Details.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConstructionDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConstructionDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'year_built' => 'int',
        'effective_year_built' => 'int',
        'building_style_type_code' => 'string',
        'building_quality_type_code' => 'string',
        'frame_type_code' => 'string',
        'foundation_type_code' => 'string',
        'construction_type_code' => 'string',
        'building_remodel_type_code' => 'string',
        'building_improvement_condition_code' => 'string',
        'building_improvement_type_code' => 'string',
        'building_improvement_value' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'year_built' => 'int64',
        'effective_year_built' => 'int64',
        'building_style_type_code' => null,
        'building_quality_type_code' => null,
        'frame_type_code' => null,
        'foundation_type_code' => null,
        'construction_type_code' => null,
        'building_remodel_type_code' => null,
        'building_improvement_condition_code' => null,
        'building_improvement_type_code' => null,
        'building_improvement_value' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'year_built' => 'yearBuilt',
        'effective_year_built' => 'effectiveYearBuilt',
        'building_style_type_code' => 'buildingStyleTypeCode',
        'building_quality_type_code' => 'buildingQualityTypeCode',
        'frame_type_code' => 'frameTypeCode',
        'foundation_type_code' => 'foundationTypeCode',
        'construction_type_code' => 'constructionTypeCode',
        'building_remodel_type_code' => 'buildingRemodelTypeCode',
        'building_improvement_condition_code' => 'buildingImprovementConditionCode',
        'building_improvement_type_code' => 'buildingImprovementTypeCode',
        'building_improvement_value' => 'buildingImprovementValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'year_built' => 'setYearBuilt',
        'effective_year_built' => 'setEffectiveYearBuilt',
        'building_style_type_code' => 'setBuildingStyleTypeCode',
        'building_quality_type_code' => 'setBuildingQualityTypeCode',
        'frame_type_code' => 'setFrameTypeCode',
        'foundation_type_code' => 'setFoundationTypeCode',
        'construction_type_code' => 'setConstructionTypeCode',
        'building_remodel_type_code' => 'setBuildingRemodelTypeCode',
        'building_improvement_condition_code' => 'setBuildingImprovementConditionCode',
        'building_improvement_type_code' => 'setBuildingImprovementTypeCode',
        'building_improvement_value' => 'setBuildingImprovementValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'year_built' => 'getYearBuilt',
        'effective_year_built' => 'getEffectiveYearBuilt',
        'building_style_type_code' => 'getBuildingStyleTypeCode',
        'building_quality_type_code' => 'getBuildingQualityTypeCode',
        'frame_type_code' => 'getFrameTypeCode',
        'foundation_type_code' => 'getFoundationTypeCode',
        'construction_type_code' => 'getConstructionTypeCode',
        'building_remodel_type_code' => 'getBuildingRemodelTypeCode',
        'building_improvement_condition_code' => 'getBuildingImprovementConditionCode',
        'building_improvement_type_code' => 'getBuildingImprovementTypeCode',
        'building_improvement_value' => 'getBuildingImprovementValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['year_built'] = isset($data['year_built']) ? $data['year_built'] : null;
        $this->container['effective_year_built'] = isset($data['effective_year_built']) ? $data['effective_year_built'] : null;
        $this->container['building_style_type_code'] = isset($data['building_style_type_code']) ? $data['building_style_type_code'] : null;
        $this->container['building_quality_type_code'] = isset($data['building_quality_type_code']) ? $data['building_quality_type_code'] : null;
        $this->container['frame_type_code'] = isset($data['frame_type_code']) ? $data['frame_type_code'] : null;
        $this->container['foundation_type_code'] = isset($data['foundation_type_code']) ? $data['foundation_type_code'] : null;
        $this->container['construction_type_code'] = isset($data['construction_type_code']) ? $data['construction_type_code'] : null;
        $this->container['building_remodel_type_code'] = isset($data['building_remodel_type_code']) ? $data['building_remodel_type_code'] : null;
        $this->container['building_improvement_condition_code'] = isset($data['building_improvement_condition_code']) ? $data['building_improvement_condition_code'] : null;
        $this->container['building_improvement_type_code'] = isset($data['building_improvement_type_code']) ? $data['building_improvement_type_code'] : null;
        $this->container['building_improvement_value'] = isset($data['building_improvement_value']) ? $data['building_improvement_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets year_built
     *
     * @return int
     */
    public function getYearBuilt()
    {
        return $this->container['year_built'];
    }

    /**
     * Sets year_built
     *
     * @param int $year_built This is the construction year of the original building.
     *
     * @return $this
     */
    public function setYearBuilt($year_built)
    {
        $this->container['year_built'] = $year_built;

        return $this;
    }

    /**
     * Gets effective_year_built
     *
     * @return int
     */
    public function getEffectiveYearBuilt()
    {
        return $this->container['effective_year_built'];
    }

    /**
     * Sets effective_year_built
     *
     * @param int $effective_year_built This is the first year the building was assessed with its current components (e.g., a building is originally constructed in 1960 and a bedroom and bath was added to the building in 1974. The Year Built would be 1960 and the Effective Year Built would be 1974).
     *
     * @return $this
     */
    public function setEffectiveYearBuilt($effective_year_built)
    {
        $this->container['effective_year_built'] = $effective_year_built;

        return $this;
    }

    /**
     * Gets building_style_type_code
     *
     * @return string
     */
    public function getBuildingStyleTypeCode()
    {
        return $this->container['building_style_type_code'];
    }

    /**
     * Sets building_style_type_code
     *
     * @param string $building_style_type_code Type of building style (e.g., Colonial, Cape Code, Bungalow).
     *
     * @return $this
     */
    public function setBuildingStyleTypeCode($building_style_type_code)
    {
        $this->container['building_style_type_code'] = $building_style_type_code;

        return $this;
    }

    /**
     * Gets building_quality_type_code
     *
     * @return string
     */
    public function getBuildingQualityTypeCode()
    {
        return $this->container['building_quality_type_code'];
    }

    /**
     * Sets building_quality_type_code
     *
     * @param string $building_quality_type_code Type of construction quality of building (e.g., excellent, economical).
     *
     * @return $this
     */
    public function setBuildingQualityTypeCode($building_quality_type_code)
    {
        $this->container['building_quality_type_code'] = $building_quality_type_code;

        return $this;
    }

    /**
     * Gets frame_type_code
     *
     * @return string
     */
    public function getFrameTypeCode()
    {
        return $this->container['frame_type_code'];
    }

    /**
     * Sets frame_type_code
     *
     * @param string $frame_type_code The type of wall framing used (e.g., Bar Joist, Reinforced Concrete, Flexicore).
     *
     * @return $this
     */
    public function setFrameTypeCode($frame_type_code)
    {
        $this->container['frame_type_code'] = $frame_type_code;

        return $this;
    }

    /**
     * Gets foundation_type_code
     *
     * @return string
     */
    public function getFoundationTypeCode()
    {
        return $this->container['foundation_type_code'];
    }

    /**
     * Sets foundation_type_code
     *
     * @param string $foundation_type_code The type of foundation (e.g., Continuous Footing, Pier, Mud Sill).
     *
     * @return $this
     */
    public function setFoundationTypeCode($foundation_type_code)
    {
        $this->container['foundation_type_code'] = $foundation_type_code;

        return $this;
    }

    /**
     * Gets construction_type_code
     *
     * @return string
     */
    public function getConstructionTypeCode()
    {
        return $this->container['construction_type_code'];
    }

    /**
     * Sets construction_type_code
     *
     * @param string $construction_type_code The primary method of construction (e.g., Steel / Glass, Concrete Block, Log).
     *
     * @return $this
     */
    public function setConstructionTypeCode($construction_type_code)
    {
        $this->container['construction_type_code'] = $construction_type_code;

        return $this;
    }

    /**
     * Gets building_remodel_type_code
     *
     * @return string
     */
    public function getBuildingRemodelTypeCode()
    {
        return $this->container['building_remodel_type_code'];
    }

    /**
     * Sets building_remodel_type_code
     *
     * @param string $building_remodel_type_code County provided code describing the nature of the remodeling that was applied to the building. During remodeling the outside walls are not changed and only internal walls, floors, ceilings and finishing's are redone.
     *
     * @return $this
     */
    public function setBuildingRemodelTypeCode($building_remodel_type_code)
    {
        $this->container['building_remodel_type_code'] = $building_remodel_type_code;

        return $this;
    }

    /**
     * Gets building_improvement_condition_code
     *
     * @return string
     */
    public function getBuildingImprovementConditionCode()
    {
        return $this->container['building_improvement_condition_code'];
    }

    /**
     * Sets building_improvement_condition_code
     *
     * @param string $building_improvement_condition_code This represents the physical condition of the main improvement (e.g., Good, Fair, Under Construction).
     *
     * @return $this
     */
    public function setBuildingImprovementConditionCode($building_improvement_condition_code)
    {
        $this->container['building_improvement_condition_code'] = $building_improvement_condition_code;

        return $this;
    }

    /**
     * Gets building_improvement_type_code
     *
     * @return string
     */
    public function getBuildingImprovementTypeCode()
    {
        return $this->container['building_improvement_type_code'];
    }

    /**
     * Sets building_improvement_type_code
     *
     * @param string $building_improvement_type_code The primary improvement type (e.g., Grain Silo, Hanger, Marina).
     *
     * @return $this
     */
    public function setBuildingImprovementTypeCode($building_improvement_type_code)
    {
        $this->container['building_improvement_type_code'] = $building_improvement_type_code;

        return $this;
    }

    /**
     * Gets building_improvement_value
     *
     * @return int
     */
    public function getBuildingImprovementValue()
    {
        return $this->container['building_improvement_value'];
    }

    /**
     * Sets building_improvement_value
     *
     * @param int $building_improvement_value Value of building improvement. Value is based on county-assessed, market or appraised improvement value as provided by the county.
     *
     * @return $this
     */
    public function setBuildingImprovementValue($building_improvement_value)
    {
        $this->container['building_improvement_value'] = $building_improvement_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
