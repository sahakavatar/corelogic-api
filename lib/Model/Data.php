<?php
/**
 * Data
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Data Class Doc Comment
 *
 * @category Class
 * @description data.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Data implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Data';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clip' => 'string',
        'county_lien_coverage_summary' => '\Swagger\Client\Model\CountyLienCoverageSummary',
        'hoa_lien_transaction' => '\Swagger\Client\Model\HoaLienTransaction[]',
        'mechanics_lien_transaction' => '\Swagger\Client\Model\MechanicsLienTransaction[]',
        'property_tax_lien_transactions' => '\Swagger\Client\Model\PropertyTaxLienTransaction[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clip' => null,
        'county_lien_coverage_summary' => null,
        'hoa_lien_transaction' => null,
        'mechanics_lien_transaction' => null,
        'property_tax_lien_transactions' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clip' => 'clip',
        'county_lien_coverage_summary' => 'countyLienCoverageSummary',
        'hoa_lien_transaction' => 'hoaLienTransaction',
        'mechanics_lien_transaction' => 'mechanicsLienTransaction',
        'property_tax_lien_transactions' => 'propertyTaxLienTransactions'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clip' => 'setClip',
        'county_lien_coverage_summary' => 'setCountyLienCoverageSummary',
        'hoa_lien_transaction' => 'setHoaLienTransaction',
        'mechanics_lien_transaction' => 'setMechanicsLienTransaction',
        'property_tax_lien_transactions' => 'setPropertyTaxLienTransactions'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clip' => 'getClip',
        'county_lien_coverage_summary' => 'getCountyLienCoverageSummary',
        'hoa_lien_transaction' => 'getHoaLienTransaction',
        'mechanics_lien_transaction' => 'getMechanicsLienTransaction',
        'property_tax_lien_transactions' => 'getPropertyTaxLienTransactions'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clip'] = isset($data['clip']) ? $data['clip'] : null;
        $this->container['county_lien_coverage_summary'] = isset($data['county_lien_coverage_summary']) ? $data['county_lien_coverage_summary'] : null;
        $this->container['hoa_lien_transaction'] = isset($data['hoa_lien_transaction']) ? $data['hoa_lien_transaction'] : null;
        $this->container['mechanics_lien_transaction'] = isset($data['mechanics_lien_transaction']) ? $data['mechanics_lien_transaction'] : null;
        $this->container['property_tax_lien_transactions'] = isset($data['property_tax_lien_transactions']) ? $data['property_tax_lien_transactions'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clip
     *
     * @return string
     */
    public function getClip()
    {
        return $this->container['clip'];
    }

    /**
     * Sets clip
     *
     * @param string $clip Corelogic unique identification number assigned to each property.
     *
     * @return $this
     */
    public function setClip($clip)
    {
        $this->container['clip'] = $clip;

        return $this;
    }

    /**
     * Gets county_lien_coverage_summary
     *
     * @return \Swagger\Client\Model\CountyLienCoverageSummary
     */
    public function getCountyLienCoverageSummary()
    {
        return $this->container['county_lien_coverage_summary'];
    }

    /**
     * Sets county_lien_coverage_summary
     *
     * @param \Swagger\Client\Model\CountyLienCoverageSummary $county_lien_coverage_summary county_lien_coverage_summary
     *
     * @return $this
     */
    public function setCountyLienCoverageSummary($county_lien_coverage_summary)
    {
        $this->container['county_lien_coverage_summary'] = $county_lien_coverage_summary;

        return $this;
    }

    /**
     * Gets hoa_lien_transaction
     *
     * @return \Swagger\Client\Model\HoaLienTransaction[]
     */
    public function getHoaLienTransaction()
    {
        return $this->container['hoa_lien_transaction'];
    }

    /**
     * Sets hoa_lien_transaction
     *
     * @param \Swagger\Client\Model\HoaLienTransaction[] $hoa_lien_transaction HOA Lien Transaction
     *
     * @return $this
     */
    public function setHoaLienTransaction($hoa_lien_transaction)
    {
        $this->container['hoa_lien_transaction'] = $hoa_lien_transaction;

        return $this;
    }

    /**
     * Gets mechanics_lien_transaction
     *
     * @return \Swagger\Client\Model\MechanicsLienTransaction[]
     */
    public function getMechanicsLienTransaction()
    {
        return $this->container['mechanics_lien_transaction'];
    }

    /**
     * Sets mechanics_lien_transaction
     *
     * @param \Swagger\Client\Model\MechanicsLienTransaction[] $mechanics_lien_transaction Mechanics Lien Transaction
     *
     * @return $this
     */
    public function setMechanicsLienTransaction($mechanics_lien_transaction)
    {
        $this->container['mechanics_lien_transaction'] = $mechanics_lien_transaction;

        return $this;
    }

    /**
     * Gets property_tax_lien_transactions
     *
     * @return \Swagger\Client\Model\PropertyTaxLienTransaction[]
     */
    public function getPropertyTaxLienTransactions()
    {
        return $this->container['property_tax_lien_transactions'];
    }

    /**
     * Sets property_tax_lien_transactions
     *
     * @param \Swagger\Client\Model\PropertyTaxLienTransaction[] $property_tax_lien_transactions Property Tax Lien Transaction.
     *
     * @return $this
     */
    public function setPropertyTaxLienTransactions($property_tax_lien_transactions)
    {
        $this->container['property_tax_lien_transactions'] = $property_tax_lien_transactions;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
