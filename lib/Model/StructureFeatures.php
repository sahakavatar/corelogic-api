<?php
/**
 * StructureFeatures
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StructureFeatures Class Doc Comment
 *
 * @category Class
 * @description Structure Features.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StructureFeatures implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StructureFeatures';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'air_conditioning' => '\Swagger\Client\Model\AirConditioning',
        'fire_places' => '\Swagger\Client\Model\FirePlaces',
        'heating' => '\Swagger\Client\Model\Heating',
        'plumbing' => '\Swagger\Client\Model\Plumbing',
        'passenger_elevators' => '\Swagger\Client\Model\PassengerElevators',
        'dormer_windows' => '\Swagger\Client\Model\DormerWindows'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'air_conditioning' => null,
        'fire_places' => null,
        'heating' => null,
        'plumbing' => null,
        'passenger_elevators' => null,
        'dormer_windows' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'air_conditioning' => 'airConditioning',
        'fire_places' => 'firePlaces',
        'heating' => 'heating',
        'plumbing' => 'plumbing',
        'passenger_elevators' => 'passengerElevators',
        'dormer_windows' => 'dormerWindows'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'air_conditioning' => 'setAirConditioning',
        'fire_places' => 'setFirePlaces',
        'heating' => 'setHeating',
        'plumbing' => 'setPlumbing',
        'passenger_elevators' => 'setPassengerElevators',
        'dormer_windows' => 'setDormerWindows'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'air_conditioning' => 'getAirConditioning',
        'fire_places' => 'getFirePlaces',
        'heating' => 'getHeating',
        'plumbing' => 'getPlumbing',
        'passenger_elevators' => 'getPassengerElevators',
        'dormer_windows' => 'getDormerWindows'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['air_conditioning'] = isset($data['air_conditioning']) ? $data['air_conditioning'] : null;
        $this->container['fire_places'] = isset($data['fire_places']) ? $data['fire_places'] : null;
        $this->container['heating'] = isset($data['heating']) ? $data['heating'] : null;
        $this->container['plumbing'] = isset($data['plumbing']) ? $data['plumbing'] : null;
        $this->container['passenger_elevators'] = isset($data['passenger_elevators']) ? $data['passenger_elevators'] : null;
        $this->container['dormer_windows'] = isset($data['dormer_windows']) ? $data['dormer_windows'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets air_conditioning
     *
     * @return \Swagger\Client\Model\AirConditioning
     */
    public function getAirConditioning()
    {
        return $this->container['air_conditioning'];
    }

    /**
     * Sets air_conditioning
     *
     * @param \Swagger\Client\Model\AirConditioning $air_conditioning air_conditioning
     *
     * @return $this
     */
    public function setAirConditioning($air_conditioning)
    {
        $this->container['air_conditioning'] = $air_conditioning;

        return $this;
    }

    /**
     * Gets fire_places
     *
     * @return \Swagger\Client\Model\FirePlaces
     */
    public function getFirePlaces()
    {
        return $this->container['fire_places'];
    }

    /**
     * Sets fire_places
     *
     * @param \Swagger\Client\Model\FirePlaces $fire_places fire_places
     *
     * @return $this
     */
    public function setFirePlaces($fire_places)
    {
        $this->container['fire_places'] = $fire_places;

        return $this;
    }

    /**
     * Gets heating
     *
     * @return \Swagger\Client\Model\Heating
     */
    public function getHeating()
    {
        return $this->container['heating'];
    }

    /**
     * Sets heating
     *
     * @param \Swagger\Client\Model\Heating $heating heating
     *
     * @return $this
     */
    public function setHeating($heating)
    {
        $this->container['heating'] = $heating;

        return $this;
    }

    /**
     * Gets plumbing
     *
     * @return \Swagger\Client\Model\Plumbing
     */
    public function getPlumbing()
    {
        return $this->container['plumbing'];
    }

    /**
     * Sets plumbing
     *
     * @param \Swagger\Client\Model\Plumbing $plumbing plumbing
     *
     * @return $this
     */
    public function setPlumbing($plumbing)
    {
        $this->container['plumbing'] = $plumbing;

        return $this;
    }

    /**
     * Gets passenger_elevators
     *
     * @return \Swagger\Client\Model\PassengerElevators
     */
    public function getPassengerElevators()
    {
        return $this->container['passenger_elevators'];
    }

    /**
     * Sets passenger_elevators
     *
     * @param \Swagger\Client\Model\PassengerElevators $passenger_elevators passenger_elevators
     *
     * @return $this
     */
    public function setPassengerElevators($passenger_elevators)
    {
        $this->container['passenger_elevators'] = $passenger_elevators;

        return $this;
    }

    /**
     * Gets dormer_windows
     *
     * @return \Swagger\Client\Model\DormerWindows
     */
    public function getDormerWindows()
    {
        return $this->container['dormer_windows'];
    }

    /**
     * Sets dormer_windows
     *
     * @param \Swagger\Client\Model\DormerWindows $dormer_windows dormer_windows
     *
     * @return $this
     */
    public function setDormerWindows($dormer_windows)
    {
        $this->container['dormer_windows'] = $dormer_windows;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
