<?php
/**
 * SolarContractTransactionDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SolarContractTransactionDetails Class Doc Comment
 *
 * @category Class
 * @description Solar Contract Transaction
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SolarContractTransactionDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SolarContractTransactionDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'solar_contract_recording_date' => 'string',
        'solar_contract_recorded_document_number' => 'string',
        'solar_contract_recorded_document_book_number' => 'string',
        'solar_contract_recorded_document_page_number' => 'string',
        'solar_contract_deed_category_type_code' => 'string',
        'solar_contract_document_type_code' => 'string',
        'solar_contract_document_type_code_description' => 'string',
        'solar_contract_estimated_amount' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'solar_contract_recording_date' => null,
        'solar_contract_recorded_document_number' => null,
        'solar_contract_recorded_document_book_number' => null,
        'solar_contract_recorded_document_page_number' => null,
        'solar_contract_deed_category_type_code' => null,
        'solar_contract_document_type_code' => null,
        'solar_contract_document_type_code_description' => null,
        'solar_contract_estimated_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'solar_contract_recording_date' => 'solarContractRecordingDate',
        'solar_contract_recorded_document_number' => 'solarContractRecordedDocumentNumber',
        'solar_contract_recorded_document_book_number' => 'solarContractRecordedDocumentBookNumber',
        'solar_contract_recorded_document_page_number' => 'solarContractRecordedDocumentPageNumber',
        'solar_contract_deed_category_type_code' => 'solarContractDeedCategoryTypeCode',
        'solar_contract_document_type_code' => 'solarContractDocumentTypeCode',
        'solar_contract_document_type_code_description' => 'solarContractDocumentTypeCodeDescription',
        'solar_contract_estimated_amount' => 'solarContractEstimatedAmount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'solar_contract_recording_date' => 'setSolarContractRecordingDate',
        'solar_contract_recorded_document_number' => 'setSolarContractRecordedDocumentNumber',
        'solar_contract_recorded_document_book_number' => 'setSolarContractRecordedDocumentBookNumber',
        'solar_contract_recorded_document_page_number' => 'setSolarContractRecordedDocumentPageNumber',
        'solar_contract_deed_category_type_code' => 'setSolarContractDeedCategoryTypeCode',
        'solar_contract_document_type_code' => 'setSolarContractDocumentTypeCode',
        'solar_contract_document_type_code_description' => 'setSolarContractDocumentTypeCodeDescription',
        'solar_contract_estimated_amount' => 'setSolarContractEstimatedAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'solar_contract_recording_date' => 'getSolarContractRecordingDate',
        'solar_contract_recorded_document_number' => 'getSolarContractRecordedDocumentNumber',
        'solar_contract_recorded_document_book_number' => 'getSolarContractRecordedDocumentBookNumber',
        'solar_contract_recorded_document_page_number' => 'getSolarContractRecordedDocumentPageNumber',
        'solar_contract_deed_category_type_code' => 'getSolarContractDeedCategoryTypeCode',
        'solar_contract_document_type_code' => 'getSolarContractDocumentTypeCode',
        'solar_contract_document_type_code_description' => 'getSolarContractDocumentTypeCodeDescription',
        'solar_contract_estimated_amount' => 'getSolarContractEstimatedAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['solar_contract_recording_date'] = isset($data['solar_contract_recording_date']) ? $data['solar_contract_recording_date'] : null;
        $this->container['solar_contract_recorded_document_number'] = isset($data['solar_contract_recorded_document_number']) ? $data['solar_contract_recorded_document_number'] : null;
        $this->container['solar_contract_recorded_document_book_number'] = isset($data['solar_contract_recorded_document_book_number']) ? $data['solar_contract_recorded_document_book_number'] : null;
        $this->container['solar_contract_recorded_document_page_number'] = isset($data['solar_contract_recorded_document_page_number']) ? $data['solar_contract_recorded_document_page_number'] : null;
        $this->container['solar_contract_deed_category_type_code'] = isset($data['solar_contract_deed_category_type_code']) ? $data['solar_contract_deed_category_type_code'] : null;
        $this->container['solar_contract_document_type_code'] = isset($data['solar_contract_document_type_code']) ? $data['solar_contract_document_type_code'] : null;
        $this->container['solar_contract_document_type_code_description'] = isset($data['solar_contract_document_type_code_description']) ? $data['solar_contract_document_type_code_description'] : null;
        $this->container['solar_contract_estimated_amount'] = isset($data['solar_contract_estimated_amount']) ? $data['solar_contract_estimated_amount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets solar_contract_recording_date
     *
     * @return string
     */
    public function getSolarContractRecordingDate()
    {
        return $this->container['solar_contract_recording_date'];
    }

    /**
     * Sets solar_contract_recording_date
     *
     * @param string $solar_contract_recording_date The date the solar contract transaction was recorded.  Format: YYYYMMDD
     *
     * @return $this
     */
    public function setSolarContractRecordingDate($solar_contract_recording_date)
    {
        $this->container['solar_contract_recording_date'] = $solar_contract_recording_date;

        return $this;
    }

    /**
     * Gets solar_contract_recorded_document_number
     *
     * @return string
     */
    public function getSolarContractRecordedDocumentNumber()
    {
        return $this->container['solar_contract_recorded_document_number'];
    }

    /**
     * Sets solar_contract_recorded_document_number
     *
     * @param string $solar_contract_recorded_document_number Recorders document number, used by some counties to record transactions.
     *
     * @return $this
     */
    public function setSolarContractRecordedDocumentNumber($solar_contract_recorded_document_number)
    {
        $this->container['solar_contract_recorded_document_number'] = $solar_contract_recorded_document_number;

        return $this;
    }

    /**
     * Gets solar_contract_recorded_document_book_number
     *
     * @return string
     */
    public function getSolarContractRecordedDocumentBookNumber()
    {
        return $this->container['solar_contract_recorded_document_book_number'];
    }

    /**
     * Sets solar_contract_recorded_document_book_number
     *
     * @param string $solar_contract_recorded_document_book_number The Book number used by some counties to record transactions.
     *
     * @return $this
     */
    public function setSolarContractRecordedDocumentBookNumber($solar_contract_recorded_document_book_number)
    {
        $this->container['solar_contract_recorded_document_book_number'] = $solar_contract_recorded_document_book_number;

        return $this;
    }

    /**
     * Gets solar_contract_recorded_document_page_number
     *
     * @return string
     */
    public function getSolarContractRecordedDocumentPageNumber()
    {
        return $this->container['solar_contract_recorded_document_page_number'];
    }

    /**
     * Sets solar_contract_recorded_document_page_number
     *
     * @param string $solar_contract_recorded_document_page_number The Page number used by some counties to record transactions.
     *
     * @return $this
     */
    public function setSolarContractRecordedDocumentPageNumber($solar_contract_recorded_document_page_number)
    {
        $this->container['solar_contract_recorded_document_page_number'] = $solar_contract_recorded_document_page_number;

        return $this;
    }

    /**
     * Gets solar_contract_deed_category_type_code
     *
     * @return string
     */
    public function getSolarContractDeedCategoryTypeCode()
    {
        return $this->container['solar_contract_deed_category_type_code'];
    }

    /**
     * Sets solar_contract_deed_category_type_code
     *
     * @param string $solar_contract_deed_category_type_code CoreLogic proprietary deed category type code that identifies the class of recorded legal document.<br>Values:<br>L = Liens <br>R = Releases of liens
     *
     * @return $this
     */
    public function setSolarContractDeedCategoryTypeCode($solar_contract_deed_category_type_code)
    {
        $this->container['solar_contract_deed_category_type_code'] = $solar_contract_deed_category_type_code;

        return $this;
    }

    /**
     * Gets solar_contract_document_type_code
     *
     * @return string
     */
    public function getSolarContractDocumentTypeCode()
    {
        return $this->container['solar_contract_document_type_code'];
    }

    /**
     * Sets solar_contract_document_type_code
     *
     * @param string $solar_contract_document_type_code Type of lien document recorded.
     *
     * @return $this
     */
    public function setSolarContractDocumentTypeCode($solar_contract_document_type_code)
    {
        $this->container['solar_contract_document_type_code'] = $solar_contract_document_type_code;

        return $this;
    }

    /**
     * Gets solar_contract_document_type_code_description
     *
     * @return string
     */
    public function getSolarContractDocumentTypeCodeDescription()
    {
        return $this->container['solar_contract_document_type_code_description'];
    }

    /**
     * Sets solar_contract_document_type_code_description
     *
     * @param string $solar_contract_document_type_code_description Description of type of lien document recorded.
     *
     * @return $this
     */
    public function setSolarContractDocumentTypeCodeDescription($solar_contract_document_type_code_description)
    {
        $this->container['solar_contract_document_type_code_description'] = $solar_contract_document_type_code_description;

        return $this;
    }

    /**
     * Gets solar_contract_estimated_amount
     *
     * @return float
     */
    public function getSolarContractEstimatedAmount()
    {
        return $this->container['solar_contract_estimated_amount'];
    }

    /**
     * Sets solar_contract_estimated_amount
     *
     * @param float $solar_contract_estimated_amount Dollar amount of the solar contract listed. Occasionally, the document does not include an amount.<br>Examples:<br>$4387.38 = 4387.38<br>$13,765.00 = 13765.00
     *
     * @return $this
     */
    public function setSolarContractEstimatedAmount($solar_contract_estimated_amount)
    {
        $this->container['solar_contract_estimated_amount'] = $solar_contract_estimated_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
