<?php
/**
 * MortgageTransactionDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MortgageTransactionDetail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MortgageTransactionDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MortgageTransactionDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'multi_or_split_parcel_code' => 'string',
        'primary_category_code' => 'string',
        'primary_category_code_description' => 'string',
        'deed_category_code' => 'string',
        'deed_category_code_description' => 'string',
        'amount' => 'float',
        'date' => 'int',
        'recording_date' => 'int',
        'interest_rate_type_code' => 'string',
        'interest_rate' => 'float',
        'loan_type_code' => 'string',
        'loan_type_code_description' => 'string',
        'document_type_code' => 'string',
        'document_type_code_description' => 'string',
        'document_number' => 'string',
        'document_book_number' => 'string',
        'document_page_number' => 'string',
        'term_code' => 'string',
        'term' => 'int',
        'due_date' => 'int',
        'mortgage_type_code' => 'string',
        'purpose_code' => 'string',
        'subordinate_type_code' => 'string',
        'subordinate_type_code_description' => 'string',
        'down_payment' => 'float',
        'lien_position' => 'int',
        'status_indicator' => 'string',
        'release_date' => 'int',
        'payoff_type' => 'string',
        'payoff_date' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'multi_or_split_parcel_code' => null,
        'primary_category_code' => null,
        'primary_category_code_description' => null,
        'deed_category_code' => null,
        'deed_category_code_description' => null,
        'amount' => null,
        'date' => 'int32',
        'recording_date' => 'int32',
        'interest_rate_type_code' => null,
        'interest_rate' => null,
        'loan_type_code' => null,
        'loan_type_code_description' => null,
        'document_type_code' => null,
        'document_type_code_description' => null,
        'document_number' => null,
        'document_book_number' => null,
        'document_page_number' => null,
        'term_code' => null,
        'term' => 'int32',
        'due_date' => 'int32',
        'mortgage_type_code' => null,
        'purpose_code' => null,
        'subordinate_type_code' => null,
        'subordinate_type_code_description' => null,
        'down_payment' => null,
        'lien_position' => 'int32',
        'status_indicator' => null,
        'release_date' => 'int32',
        'payoff_type' => null,
        'payoff_date' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'multi_or_split_parcel_code' => 'multiOrSplitParcelCode',
        'primary_category_code' => 'primaryCategoryCode',
        'primary_category_code_description' => 'primaryCategoryCodeDescription',
        'deed_category_code' => 'deedCategoryCode',
        'deed_category_code_description' => 'deedCategoryCodeDescription',
        'amount' => 'amount',
        'date' => 'date',
        'recording_date' => 'recordingDate',
        'interest_rate_type_code' => 'interestRateTypeCode',
        'interest_rate' => 'interestRate',
        'loan_type_code' => 'loanTypeCode',
        'loan_type_code_description' => 'loanTypeCodeDescription',
        'document_type_code' => 'documentTypeCode',
        'document_type_code_description' => 'documentTypeCodeDescription',
        'document_number' => 'documentNumber',
        'document_book_number' => 'documentBookNumber',
        'document_page_number' => 'documentPageNumber',
        'term_code' => 'termCode',
        'term' => 'term',
        'due_date' => 'dueDate',
        'mortgage_type_code' => 'mortgageTypeCode',
        'purpose_code' => 'purposeCode',
        'subordinate_type_code' => 'subordinateTypeCode',
        'subordinate_type_code_description' => 'subordinateTypeCodeDescription',
        'down_payment' => 'downPayment',
        'lien_position' => 'lienPosition',
        'status_indicator' => 'statusIndicator',
        'release_date' => 'releaseDate',
        'payoff_type' => 'payoffType',
        'payoff_date' => 'payoffDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'multi_or_split_parcel_code' => 'setMultiOrSplitParcelCode',
        'primary_category_code' => 'setPrimaryCategoryCode',
        'primary_category_code_description' => 'setPrimaryCategoryCodeDescription',
        'deed_category_code' => 'setDeedCategoryCode',
        'deed_category_code_description' => 'setDeedCategoryCodeDescription',
        'amount' => 'setAmount',
        'date' => 'setDate',
        'recording_date' => 'setRecordingDate',
        'interest_rate_type_code' => 'setInterestRateTypeCode',
        'interest_rate' => 'setInterestRate',
        'loan_type_code' => 'setLoanTypeCode',
        'loan_type_code_description' => 'setLoanTypeCodeDescription',
        'document_type_code' => 'setDocumentTypeCode',
        'document_type_code_description' => 'setDocumentTypeCodeDescription',
        'document_number' => 'setDocumentNumber',
        'document_book_number' => 'setDocumentBookNumber',
        'document_page_number' => 'setDocumentPageNumber',
        'term_code' => 'setTermCode',
        'term' => 'setTerm',
        'due_date' => 'setDueDate',
        'mortgage_type_code' => 'setMortgageTypeCode',
        'purpose_code' => 'setPurposeCode',
        'subordinate_type_code' => 'setSubordinateTypeCode',
        'subordinate_type_code_description' => 'setSubordinateTypeCodeDescription',
        'down_payment' => 'setDownPayment',
        'lien_position' => 'setLienPosition',
        'status_indicator' => 'setStatusIndicator',
        'release_date' => 'setReleaseDate',
        'payoff_type' => 'setPayoffType',
        'payoff_date' => 'setPayoffDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'multi_or_split_parcel_code' => 'getMultiOrSplitParcelCode',
        'primary_category_code' => 'getPrimaryCategoryCode',
        'primary_category_code_description' => 'getPrimaryCategoryCodeDescription',
        'deed_category_code' => 'getDeedCategoryCode',
        'deed_category_code_description' => 'getDeedCategoryCodeDescription',
        'amount' => 'getAmount',
        'date' => 'getDate',
        'recording_date' => 'getRecordingDate',
        'interest_rate_type_code' => 'getInterestRateTypeCode',
        'interest_rate' => 'getInterestRate',
        'loan_type_code' => 'getLoanTypeCode',
        'loan_type_code_description' => 'getLoanTypeCodeDescription',
        'document_type_code' => 'getDocumentTypeCode',
        'document_type_code_description' => 'getDocumentTypeCodeDescription',
        'document_number' => 'getDocumentNumber',
        'document_book_number' => 'getDocumentBookNumber',
        'document_page_number' => 'getDocumentPageNumber',
        'term_code' => 'getTermCode',
        'term' => 'getTerm',
        'due_date' => 'getDueDate',
        'mortgage_type_code' => 'getMortgageTypeCode',
        'purpose_code' => 'getPurposeCode',
        'subordinate_type_code' => 'getSubordinateTypeCode',
        'subordinate_type_code_description' => 'getSubordinateTypeCodeDescription',
        'down_payment' => 'getDownPayment',
        'lien_position' => 'getLienPosition',
        'status_indicator' => 'getStatusIndicator',
        'release_date' => 'getReleaseDate',
        'payoff_type' => 'getPayoffType',
        'payoff_date' => 'getPayoffDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['multi_or_split_parcel_code'] = isset($data['multi_or_split_parcel_code']) ? $data['multi_or_split_parcel_code'] : null;
        $this->container['primary_category_code'] = isset($data['primary_category_code']) ? $data['primary_category_code'] : null;
        $this->container['primary_category_code_description'] = isset($data['primary_category_code_description']) ? $data['primary_category_code_description'] : null;
        $this->container['deed_category_code'] = isset($data['deed_category_code']) ? $data['deed_category_code'] : null;
        $this->container['deed_category_code_description'] = isset($data['deed_category_code_description']) ? $data['deed_category_code_description'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['recording_date'] = isset($data['recording_date']) ? $data['recording_date'] : null;
        $this->container['interest_rate_type_code'] = isset($data['interest_rate_type_code']) ? $data['interest_rate_type_code'] : null;
        $this->container['interest_rate'] = isset($data['interest_rate']) ? $data['interest_rate'] : null;
        $this->container['loan_type_code'] = isset($data['loan_type_code']) ? $data['loan_type_code'] : null;
        $this->container['loan_type_code_description'] = isset($data['loan_type_code_description']) ? $data['loan_type_code_description'] : null;
        $this->container['document_type_code'] = isset($data['document_type_code']) ? $data['document_type_code'] : null;
        $this->container['document_type_code_description'] = isset($data['document_type_code_description']) ? $data['document_type_code_description'] : null;
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['document_book_number'] = isset($data['document_book_number']) ? $data['document_book_number'] : null;
        $this->container['document_page_number'] = isset($data['document_page_number']) ? $data['document_page_number'] : null;
        $this->container['term_code'] = isset($data['term_code']) ? $data['term_code'] : null;
        $this->container['term'] = isset($data['term']) ? $data['term'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['mortgage_type_code'] = isset($data['mortgage_type_code']) ? $data['mortgage_type_code'] : null;
        $this->container['purpose_code'] = isset($data['purpose_code']) ? $data['purpose_code'] : null;
        $this->container['subordinate_type_code'] = isset($data['subordinate_type_code']) ? $data['subordinate_type_code'] : null;
        $this->container['subordinate_type_code_description'] = isset($data['subordinate_type_code_description']) ? $data['subordinate_type_code_description'] : null;
        $this->container['down_payment'] = isset($data['down_payment']) ? $data['down_payment'] : null;
        $this->container['lien_position'] = isset($data['lien_position']) ? $data['lien_position'] : null;
        $this->container['status_indicator'] = isset($data['status_indicator']) ? $data['status_indicator'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['payoff_type'] = isset($data['payoff_type']) ? $data['payoff_type'] : null;
        $this->container['payoff_date'] = isset($data['payoff_date']) ? $data['payoff_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets multi_or_split_parcel_code
     *
     * @return string
     */
    public function getMultiOrSplitParcelCode()
    {
        return $this->container['multi_or_split_parcel_code'];
    }

    /**
     * Sets multi_or_split_parcel_code
     *
     * @param string $multi_or_split_parcel_code CoreLogic standardized code that identifies which parcel is being referenced in a multiple or split parcel sale. Values: EMPTY/NULL = Not applicable, M = First parcel of a multiple parcel transaction, D = Subsequent parcel of a multiple parcel transaction, S = Single parcel transaction where parcel is annotated as a portion of or with other property, Z = Multiple parcel transaction where parcel is annotated as a portion of or with other property.
     *
     * @return $this
     */
    public function setMultiOrSplitParcelCode($multi_or_split_parcel_code)
    {
        $this->container['multi_or_split_parcel_code'] = $multi_or_split_parcel_code;

        return $this;
    }

    /**
     * Gets primary_category_code
     *
     * @return string
     */
    public function getPrimaryCategoryCode()
    {
        return $this->container['primary_category_code'];
    }

    /**
     * Sets primary_category_code
     *
     * @param string $primary_category_code CoreLogic proprietary transaction classification code that identifies the type of transaction. Used with Primary Category Code Description element.
     *
     * @return $this
     */
    public function setPrimaryCategoryCode($primary_category_code)
    {
        $this->container['primary_category_code'] = $primary_category_code;

        return $this;
    }

    /**
     * Gets primary_category_code_description
     *
     * @return string
     */
    public function getPrimaryCategoryCodeDescription()
    {
        return $this->container['primary_category_code_description'];
    }

    /**
     * Sets primary_category_code_description
     *
     * @param string $primary_category_code_description Described value of the PrimaryCategoryCode
     *
     * @return $this
     */
    public function setPrimaryCategoryCodeDescription($primary_category_code_description)
    {
        $this->container['primary_category_code_description'] = $primary_category_code_description;

        return $this;
    }

    /**
     * Gets deed_category_code
     *
     * @return string
     */
    public function getDeedCategoryCode()
    {
        return $this->container['deed_category_code'];
    }

    /**
     * Sets deed_category_code
     *
     * @param string $deed_category_code CoreLogic proprietary deed category type code that identifies the class of recorded legal document.
     *
     * @return $this
     */
    public function setDeedCategoryCode($deed_category_code)
    {
        $this->container['deed_category_code'] = $deed_category_code;

        return $this;
    }

    /**
     * Gets deed_category_code_description
     *
     * @return string
     */
    public function getDeedCategoryCodeDescription()
    {
        return $this->container['deed_category_code_description'];
    }

    /**
     * Sets deed_category_code_description
     *
     * @param string $deed_category_code_description Described value of the DeedCategoryCode.
     *
     * @return $this
     */
    public function setDeedCategoryCodeDescription($deed_category_code_description)
    {
        $this->container['deed_category_code_description'] = $deed_category_code_description;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The amount of the mortgage at the time of the transaction.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets date
     *
     * @return int
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param int $date Borrower's signature date on mortgage/deed of trust.  This represents the date the borrower's obligation to the lender begins, i.e. loan open date.  This date is the same or prior to the recording date. If the day and/or month is missing, CoreLogic populates these values with 00. Format: YYYYMMDD.
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets recording_date
     *
     * @return int
     */
    public function getRecordingDate()
    {
        return $this->container['recording_date'];
    }

    /**
     * Sets recording_date
     *
     * @param int $recording_date The date the mortgage transaction was recorded at the county.  Format: YYYYMMDD.
     *
     * @return $this
     */
    public function setRecordingDate($recording_date)
    {
        $this->container['recording_date'] = $recording_date;

        return $this;
    }

    /**
     * Gets interest_rate_type_code
     *
     * @return string
     */
    public function getInterestRateTypeCode()
    {
        return $this->container['interest_rate_type_code'];
    }

    /**
     * Sets interest_rate_type_code
     *
     * @param string $interest_rate_type_code CoreLogic standardized value indicating the type of mortgage interest rate. Values: NULL = Unknown, ADJ = Adjustable, BAL = Balloon, FIX = Fixed
     *
     * @return $this
     */
    public function setInterestRateTypeCode($interest_rate_type_code)
    {
        $this->container['interest_rate_type_code'] = $interest_rate_type_code;

        return $this;
    }

    /**
     * Gets interest_rate
     *
     * @return float
     */
    public function getInterestRate()
    {
        return $this->container['interest_rate'];
    }

    /**
     * Sets interest_rate
     *
     * @param float $interest_rate Beginning interest rate per the recorded loan documents for Adjustable Rate Mortgage and the fixed interest rate for all other mortgage records.
     *
     * @return $this
     */
    public function setInterestRate($interest_rate)
    {
        $this->container['interest_rate'] = $interest_rate;

        return $this;
    }

    /**
     * Gets loan_type_code
     *
     * @return string
     */
    public function getLoanTypeCode()
    {
        return $this->container['loan_type_code'];
    }

    /**
     * Sets loan_type_code
     *
     * @param string $loan_type_code Type of loan secured (e.g., Conventional, FHA, VA).
     *
     * @return $this
     */
    public function setLoanTypeCode($loan_type_code)
    {
        $this->container['loan_type_code'] = $loan_type_code;

        return $this;
    }

    /**
     * Gets loan_type_code_description
     *
     * @return string
     */
    public function getLoanTypeCodeDescription()
    {
        return $this->container['loan_type_code_description'];
    }

    /**
     * Sets loan_type_code_description
     *
     * @param string $loan_type_code_description Describes the loanTypeCode
     *
     * @return $this
     */
    public function setLoanTypeCodeDescription($loan_type_code_description)
    {
        $this->container['loan_type_code_description'] = $loan_type_code_description;

        return $this;
    }

    /**
     * Gets document_type_code
     *
     * @return string
     */
    public function getDocumentTypeCode()
    {
        return $this->container['document_type_code'];
    }

    /**
     * Sets document_type_code
     *
     * @param string $document_type_code Type of deed used for recording (e.g., Mortgage, Loan Modification Agreement, Deed of Trust).
     *
     * @return $this
     */
    public function setDocumentTypeCode($document_type_code)
    {
        $this->container['document_type_code'] = $document_type_code;

        return $this;
    }

    /**
     * Gets document_type_code_description
     *
     * @return string
     */
    public function getDocumentTypeCodeDescription()
    {
        return $this->container['document_type_code_description'];
    }

    /**
     * Sets document_type_code_description
     *
     * @param string $document_type_code_description Describes the documentTypeCode.
     *
     * @return $this
     */
    public function setDocumentTypeCodeDescription($document_type_code_description)
    {
        $this->container['document_type_code_description'] = $document_type_code_description;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number The document number used by some counties to record mortgage transactions.
     *
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets document_book_number
     *
     * @return string
     */
    public function getDocumentBookNumber()
    {
        return $this->container['document_book_number'];
    }

    /**
     * Sets document_book_number
     *
     * @param string $document_book_number The Book number used by some counties to catalog their mortgage recordings.
     *
     * @return $this
     */
    public function setDocumentBookNumber($document_book_number)
    {
        $this->container['document_book_number'] = $document_book_number;

        return $this;
    }

    /**
     * Gets document_page_number
     *
     * @return string
     */
    public function getDocumentPageNumber()
    {
        return $this->container['document_page_number'];
    }

    /**
     * Sets document_page_number
     *
     * @param string $document_page_number The Page number used by some counties to catalog their mortgage recordings.
     *
     * @return $this
     */
    public function setDocumentPageNumber($document_page_number)
    {
        $this->container['document_page_number'] = $document_page_number;

        return $this;
    }

    /**
     * Gets term_code
     *
     * @return string
     */
    public function getTermCode()
    {
        return $this->container['term_code'];
    }

    /**
     * Sets term_code
     *
     * @param string $term_code Code used to identify whether the number stored in MORTGAGE TERM is in days, months or years.
     *
     * @return $this
     */
    public function setTermCode($term_code)
    {
        $this->container['term_code'] = $term_code;

        return $this;
    }

    /**
     * Gets term
     *
     * @return int
     */
    public function getTerm()
    {
        return $this->container['term'];
    }

    /**
     * Sets term
     *
     * @param int $term Specific time period that identifies the mortgage due or maturity term. Corresponds with the MORTGAGE TERM CODE field.
     *
     * @return $this
     */
    public function setTerm($term)
    {
        $this->container['term'] = $term;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return int
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param int $due_date The date the mortgage becomes due. If the day and/or month is missing, CoreLogic populates these values with '00'.  Format: YYYYMMDD.  May be derived.
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets mortgage_type_code
     *
     * @return string
     */
    public function getMortgageTypeCode()
    {
        return $this->container['mortgage_type_code'];
    }

    /**
     * Sets mortgage_type_code
     *
     * @param string $mortgage_type_code CoreLogic standardized mortgage classification for principal mortgages ('P'urchase, 'R'efinance) or subordinate mortgages ('J'unior). Won't be populated on pending record.
     *
     * @return $this
     */
    public function setMortgageTypeCode($mortgage_type_code)
    {
        $this->container['mortgage_type_code'] = $mortgage_type_code;

        return $this;
    }

    /**
     * Gets purpose_code
     *
     * @return string
     */
    public function getPurposeCode()
    {
        return $this->container['purpose_code'];
    }

    /**
     * Sets purpose_code
     *
     * @param string $purpose_code CoreLogic standardized value indicating the reason for the principal or subordinate mortgage. Won't be populated on pending record. Values: A = Cash out first, B = Rate/Term reduction, C = Piggy-back on purchase, D = Standalone subordinate, E = First with subordinate, F = New first mortgage, K = Consolidation, L = Undetermined first mortgage, M = Undetermined standalone subordinate, N = Piggy-back on refinance, O = HUD reverse mortgage, P = First trust modification, Q = Junior trust modification, V = Reverse mortgage
     *
     * @return $this
     */
    public function setPurposeCode($purpose_code)
    {
        $this->container['purpose_code'] = $purpose_code;

        return $this;
    }

    /**
     * Gets subordinate_type_code
     *
     * @return string
     */
    public function getSubordinateTypeCode()
    {
        return $this->container['subordinate_type_code'];
    }

    /**
     * Sets subordinate_type_code
     *
     * @param string $subordinate_type_code CoreLogic standardized value indicating the type of subordinate mortgage secured. (e.g., 'C'redit Line, 'E'quity, Ba'L'loon)  Won't be populated on pending record.
     *
     * @return $this
     */
    public function setSubordinateTypeCode($subordinate_type_code)
    {
        $this->container['subordinate_type_code'] = $subordinate_type_code;

        return $this;
    }

    /**
     * Gets subordinate_type_code_description
     *
     * @return string
     */
    public function getSubordinateTypeCodeDescription()
    {
        return $this->container['subordinate_type_code_description'];
    }

    /**
     * Sets subordinate_type_code_description
     *
     * @param string $subordinate_type_code_description Describes the subordinateTypeCode
     *
     * @return $this
     */
    public function setSubordinateTypeCodeDescription($subordinate_type_code_description)
    {
        $this->container['subordinate_type_code_description'] = $subordinate_type_code_description;

        return $this;
    }

    /**
     * Gets down_payment
     *
     * @return float
     */
    public function getDownPayment()
    {
        return $this->container['down_payment'];
    }

    /**
     * Sets down_payment
     *
     * @param float $down_payment Cash down amount at time of purchase (Available in limited geographies only).
     *
     * @return $this
     */
    public function setDownPayment($down_payment)
    {
        $this->container['down_payment'] = $down_payment;

        return $this;
    }

    /**
     * Gets lien_position
     *
     * @return int
     */
    public function getLienPosition()
    {
        return $this->container['lien_position'];
    }

    /**
     * Sets lien_position
     *
     * @param int $lien_position The order a mortgage is in lien prioirty for all open mortgages.
     *
     * @return $this
     */
    public function setLienPosition($lien_position)
    {
        $this->container['lien_position'] = $lien_position;

        return $this;
    }

    /**
     * Gets status_indicator
     *
     * @return string
     */
    public function getStatusIndicator()
    {
        return $this->container['status_indicator'];
    }

    /**
     * Sets status_indicator
     *
     * @param string $status_indicator Corelogic standardized value indicating if a mortgage is currently open, closed by event, in pre-foreclosure, or foreclosed. Values: R = Mortgage Released, P = Mortgage Paid Off, O = Open Mortgage, U = Foreclosed On, F = Pre-Foreclosure Filed, Null = Undetermined
     *
     * @return $this
     */
    public function setStatusIndicator($status_indicator)
    {
        $this->container['status_indicator'] = $status_indicator;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return int
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param int $release_date Recording date of the mortgage Release/Reconveyance. Format: YYYYMMDD
     *
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets payoff_type
     *
     * @return string
     */
    public function getPayoffType()
    {
        return $this->container['payoff_type'];
    }

    /**
     * Sets payoff_type
     *
     * @param string $payoff_type Corelogic standardized value that indicates the type of event used to determine mortgage was paid in full. Values: A = Subsequent arm length sale, B = Subsequent non-arm length sale that is classified to pay off mortgage, C = Paid off by a consolidation, modification and extension agreement (DocTyp = \"CE\", New York only), E = Non-construction balloon mortgage that expired, F = Subsequent purchase or refinance mortgage, H = Release for the mortgage was recorded, Null = Not paid off
     *
     * @return $this
     */
    public function setPayoffType($payoff_type)
    {
        $this->container['payoff_type'] = $payoff_type;

        return $this;
    }

    /**
     * Gets payoff_date
     *
     * @return int
     */
    public function getPayoffDate()
    {
        return $this->container['payoff_date'];
    }

    /**
     * Sets payoff_date
     *
     * @param int $payoff_date Date of the event that paid off the mortgage in full.  The event can be a release/reconveyance (hard-close), or can be derived from logic to determine mortgage was paid in full. Format: YYYYMMDD
     *
     * @return $this
     */
    public function setPayoffDate($payoff_date)
    {
        $this->container['payoff_date'] = $payoff_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
