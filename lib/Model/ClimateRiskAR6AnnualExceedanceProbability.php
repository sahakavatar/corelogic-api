<?php
/**
 * ClimateRiskAR6AnnualExceedanceProbability
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ClimateRiskAR6AnnualExceedanceProbability Class Doc Comment
 *
 * @category Class
 * @description Annual Exceedance Probablility Details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClimateRiskAR6AnnualExceedanceProbability implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClimateRiskAR6AnnualExceedanceProbability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aep50' => 'float',
        'aep100' => 'float',
        'aep200' => 'float',
        'aep500' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aep50' => null,
        'aep100' => null,
        'aep200' => null,
        'aep500' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aep50' => 'aep50',
        'aep100' => 'aep100',
        'aep200' => 'aep200',
        'aep500' => 'aep500'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aep50' => 'setAep50',
        'aep100' => 'setAep100',
        'aep200' => 'setAep200',
        'aep500' => 'setAep500'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aep50' => 'getAep50',
        'aep100' => 'getAep100',
        'aep200' => 'getAep200',
        'aep500' => 'getAep500'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aep50'] = isset($data['aep50']) ? $data['aep50'] : null;
        $this->container['aep100'] = isset($data['aep100']) ? $data['aep100'] : null;
        $this->container['aep200'] = isset($data['aep200']) ? $data['aep200'] : null;
        $this->container['aep500'] = isset($data['aep500']) ? $data['aep500'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets aep50
     *
     * @return float
     */
    public function getAep50()
    {
        return $this->container['aep50'];
    }

    /**
     * Sets aep50
     *
     * @param float $aep50 50-Year Annual Exceedance Probability. Loss level with a 1-in-50 (2%) chance of being exceeded in any given year, based on the total losses each year.
     *
     * @return $this
     */
    public function setAep50($aep50)
    {
        $this->container['aep50'] = $aep50;

        return $this;
    }

    /**
     * Gets aep100
     *
     * @return float
     */
    public function getAep100()
    {
        return $this->container['aep100'];
    }

    /**
     * Sets aep100
     *
     * @param float $aep100 100-Year Annual Exceedance Probability. Loss level with a 1-in-100 (1%) chance of being exceeded in any given year, based on the total losses each year.
     *
     * @return $this
     */
    public function setAep100($aep100)
    {
        $this->container['aep100'] = $aep100;

        return $this;
    }

    /**
     * Gets aep200
     *
     * @return float
     */
    public function getAep200()
    {
        return $this->container['aep200'];
    }

    /**
     * Sets aep200
     *
     * @param float $aep200 200-Year Annual Exceedance Probability.  Loss level with a 1-in-200 (0.5%) chance of being exceeded in any given year, based on the total losses each year. Applies to AR6 SSPs only.
     *
     * @return $this
     */
    public function setAep200($aep200)
    {
        $this->container['aep200'] = $aep200;

        return $this;
    }

    /**
     * Gets aep500
     *
     * @return float
     */
    public function getAep500()
    {
        return $this->container['aep500'];
    }

    /**
     * Sets aep500
     *
     * @param float $aep500 500-Year Annual Exceedance Probability. Loss level with a 1-in-500 (0.2%) chance of being exceeded in any given year, based on the total losses each year.
     *
     * @return $this
     */
    public function setAep500($aep500)
    {
        $this->container['aep500'] = $aep500;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
