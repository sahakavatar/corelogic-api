<?php
/**
 * TransactionHistoryBorrowerDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TransactionHistoryBorrowerDetail Class Doc Comment
 *
 * @category Class
 * @description Borrower Details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransactionHistoryBorrowerDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransactionHistoryBorrowerDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'borrowers' => '\Swagger\Client\Model\TransactionHistoryBorrowerNameDetail[]',
        'etal_code' => 'string',
        'ownership_rights_code' => 'string',
        'ownership_rights_code_description' => 'string',
        'relationship_type_code' => 'string',
        'relationship_type_code_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'borrowers' => null,
        'etal_code' => null,
        'ownership_rights_code' => null,
        'ownership_rights_code_description' => null,
        'relationship_type_code' => null,
        'relationship_type_code_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'borrowers' => 'borrowers',
        'etal_code' => 'etalCode',
        'ownership_rights_code' => 'ownershipRightsCode',
        'ownership_rights_code_description' => 'ownershipRightsCodeDescription',
        'relationship_type_code' => 'relationshipTypeCode',
        'relationship_type_code_description' => 'relationshipTypeCodeDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'borrowers' => 'setBorrowers',
        'etal_code' => 'setEtalCode',
        'ownership_rights_code' => 'setOwnershipRightsCode',
        'ownership_rights_code_description' => 'setOwnershipRightsCodeDescription',
        'relationship_type_code' => 'setRelationshipTypeCode',
        'relationship_type_code_description' => 'setRelationshipTypeCodeDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'borrowers' => 'getBorrowers',
        'etal_code' => 'getEtalCode',
        'ownership_rights_code' => 'getOwnershipRightsCode',
        'ownership_rights_code_description' => 'getOwnershipRightsCodeDescription',
        'relationship_type_code' => 'getRelationshipTypeCode',
        'relationship_type_code_description' => 'getRelationshipTypeCodeDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['borrowers'] = isset($data['borrowers']) ? $data['borrowers'] : null;
        $this->container['etal_code'] = isset($data['etal_code']) ? $data['etal_code'] : null;
        $this->container['ownership_rights_code'] = isset($data['ownership_rights_code']) ? $data['ownership_rights_code'] : null;
        $this->container['ownership_rights_code_description'] = isset($data['ownership_rights_code_description']) ? $data['ownership_rights_code_description'] : null;
        $this->container['relationship_type_code'] = isset($data['relationship_type_code']) ? $data['relationship_type_code'] : null;
        $this->container['relationship_type_code_description'] = isset($data['relationship_type_code_description']) ? $data['relationship_type_code_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets borrowers
     *
     * @return \Swagger\Client\Model\TransactionHistoryBorrowerNameDetail[]
     */
    public function getBorrowers()
    {
        return $this->container['borrowers'];
    }

    /**
     * Sets borrowers
     *
     * @param \Swagger\Client\Model\TransactionHistoryBorrowerNameDetail[] $borrowers borrowers
     *
     * @return $this
     */
    public function setBorrowers($borrowers)
    {
        $this->container['borrowers'] = $borrowers;

        return $this;
    }

    /**
     * Gets etal_code
     *
     * @return string
     */
    public function getEtalCode()
    {
        return $this->container['etal_code'];
    }

    /**
     * Sets etal_code
     *
     * @param string $etal_code A code appearing in this field indicates additional ownership, whose name(s) were not provided by our sources.  Values are: A = ET AL - AND OTHERS, C = ET CON - AND HUSBAND, U = ET UX - AND WIFE, V = ET VIR - AND HUSBAND.
     *
     * @return $this
     */
    public function setEtalCode($etal_code)
    {
        $this->container['etal_code'] = $etal_code;

        return $this;
    }

    /**
     * Gets ownership_rights_code
     *
     * @return string
     */
    public function getOwnershipRightsCode()
    {
        return $this->container['ownership_rights_code'];
    }

    /**
     * Sets ownership_rights_code
     *
     * @param string $ownership_rights_code CoreLogic standardized code that indicates the type of vesting for current borrower or borrowers.
     *
     * @return $this
     */
    public function setOwnershipRightsCode($ownership_rights_code)
    {
        $this->container['ownership_rights_code'] = $ownership_rights_code;

        return $this;
    }

    /**
     * Gets ownership_rights_code_description
     *
     * @return string
     */
    public function getOwnershipRightsCodeDescription()
    {
        return $this->container['ownership_rights_code_description'];
    }

    /**
     * Sets ownership_rights_code_description
     *
     * @param string $ownership_rights_code_description CoreLogic standardized description that indicates the type of vesting for current borrower or borrowers.
     *
     * @return $this
     */
    public function setOwnershipRightsCodeDescription($ownership_rights_code_description)
    {
        $this->container['ownership_rights_code_description'] = $ownership_rights_code_description;

        return $this;
    }

    /**
     * Gets relationship_type_code
     *
     * @return string
     */
    public function getRelationshipTypeCode()
    {
        return $this->container['relationship_type_code'];
    }

    /**
     * Sets relationship_type_code
     *
     * @param string $relationship_type_code CoreLogic standardized code that identifies the relationship status of the current borrowers.  Used with Borrower Relationship Type Code Description element.
     *
     * @return $this
     */
    public function setRelationshipTypeCode($relationship_type_code)
    {
        $this->container['relationship_type_code'] = $relationship_type_code;

        return $this;
    }

    /**
     * Gets relationship_type_code_description
     *
     * @return string
     */
    public function getRelationshipTypeCodeDescription()
    {
        return $this->container['relationship_type_code_description'];
    }

    /**
     * Sets relationship_type_code_description
     *
     * @param string $relationship_type_code_description CoreLogic standardized description that identifies the relationship status of the current borrowers.  Defines the code found in Borrower Relationship Type Code element.
     *
     * @return $this
     */
    public function setRelationshipTypeCodeDescription($relationship_type_code_description)
    {
        $this->container['relationship_type_code_description'] = $relationship_type_code_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
