<?php
/**
 * PaceTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PaceTransaction Class Doc Comment
 *
 * @category Class
 * @description Pace Transaction
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaceTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaceTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'pace_record_id' => '\Swagger\Client\Model\PaceRecordId',
        'pace_buyer_name' => '\Swagger\Client\Model\PaceBuyerName[]',
        'pace_buyer_mailing_address' => '\Swagger\Client\Model\PaceBuyerMailingAddress',
        'pace_lien_transaction' => '\Swagger\Client\Model\PaceLienTransaction',
        'pace_lien_details' => '\Swagger\Client\Model\PaceLienDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'pace_record_id' => null,
        'pace_buyer_name' => null,
        'pace_buyer_mailing_address' => null,
        'pace_lien_transaction' => null,
        'pace_lien_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'pace_record_id' => 'paceRecordId',
        'pace_buyer_name' => 'paceBuyerName',
        'pace_buyer_mailing_address' => 'paceBuyerMailingAddress',
        'pace_lien_transaction' => 'paceLienTransaction',
        'pace_lien_details' => 'paceLienDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'pace_record_id' => 'setPaceRecordId',
        'pace_buyer_name' => 'setPaceBuyerName',
        'pace_buyer_mailing_address' => 'setPaceBuyerMailingAddress',
        'pace_lien_transaction' => 'setPaceLienTransaction',
        'pace_lien_details' => 'setPaceLienDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'pace_record_id' => 'getPaceRecordId',
        'pace_buyer_name' => 'getPaceBuyerName',
        'pace_buyer_mailing_address' => 'getPaceBuyerMailingAddress',
        'pace_lien_transaction' => 'getPaceLienTransaction',
        'pace_lien_details' => 'getPaceLienDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['pace_record_id'] = isset($data['pace_record_id']) ? $data['pace_record_id'] : null;
        $this->container['pace_buyer_name'] = isset($data['pace_buyer_name']) ? $data['pace_buyer_name'] : null;
        $this->container['pace_buyer_mailing_address'] = isset($data['pace_buyer_mailing_address']) ? $data['pace_buyer_mailing_address'] : null;
        $this->container['pace_lien_transaction'] = isset($data['pace_lien_transaction']) ? $data['pace_lien_transaction'] : null;
        $this->container['pace_lien_details'] = isset($data['pace_lien_details']) ? $data['pace_lien_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets pace_record_id
     *
     * @return \Swagger\Client\Model\PaceRecordId
     */
    public function getPaceRecordId()
    {
        return $this->container['pace_record_id'];
    }

    /**
     * Sets pace_record_id
     *
     * @param \Swagger\Client\Model\PaceRecordId $pace_record_id pace_record_id
     *
     * @return $this
     */
    public function setPaceRecordId($pace_record_id)
    {
        $this->container['pace_record_id'] = $pace_record_id;

        return $this;
    }

    /**
     * Gets pace_buyer_name
     *
     * @return \Swagger\Client\Model\PaceBuyerName[]
     */
    public function getPaceBuyerName()
    {
        return $this->container['pace_buyer_name'];
    }

    /**
     * Sets pace_buyer_name
     *
     * @param \Swagger\Client\Model\PaceBuyerName[] $pace_buyer_name pace_buyer_name
     *
     * @return $this
     */
    public function setPaceBuyerName($pace_buyer_name)
    {
        $this->container['pace_buyer_name'] = $pace_buyer_name;

        return $this;
    }

    /**
     * Gets pace_buyer_mailing_address
     *
     * @return \Swagger\Client\Model\PaceBuyerMailingAddress
     */
    public function getPaceBuyerMailingAddress()
    {
        return $this->container['pace_buyer_mailing_address'];
    }

    /**
     * Sets pace_buyer_mailing_address
     *
     * @param \Swagger\Client\Model\PaceBuyerMailingAddress $pace_buyer_mailing_address pace_buyer_mailing_address
     *
     * @return $this
     */
    public function setPaceBuyerMailingAddress($pace_buyer_mailing_address)
    {
        $this->container['pace_buyer_mailing_address'] = $pace_buyer_mailing_address;

        return $this;
    }

    /**
     * Gets pace_lien_transaction
     *
     * @return \Swagger\Client\Model\PaceLienTransaction
     */
    public function getPaceLienTransaction()
    {
        return $this->container['pace_lien_transaction'];
    }

    /**
     * Sets pace_lien_transaction
     *
     * @param \Swagger\Client\Model\PaceLienTransaction $pace_lien_transaction pace_lien_transaction
     *
     * @return $this
     */
    public function setPaceLienTransaction($pace_lien_transaction)
    {
        $this->container['pace_lien_transaction'] = $pace_lien_transaction;

        return $this;
    }

    /**
     * Gets pace_lien_details
     *
     * @return \Swagger\Client\Model\PaceLienDetails
     */
    public function getPaceLienDetails()
    {
        return $this->container['pace_lien_details'];
    }

    /**
     * Sets pace_lien_details
     *
     * @param \Swagger\Client\Model\PaceLienDetails $pace_lien_details pace_lien_details
     *
     * @return $this
     */
    public function setPaceLienDetails($pace_lien_details)
    {
        $this->container['pace_lien_details'] = $pace_lien_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
