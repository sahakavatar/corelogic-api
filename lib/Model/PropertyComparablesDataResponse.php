<?php
/**
 * PropertyComparablesDataResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertyComparablesDataResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertyComparablesDataResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PropertyComparablesDataResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clip' => 'string',
        'v1_property_id' => 'string',
        'baths' => 'int',
        'bedrooms' => 'int',
        'building_square_feet' => 'int',
        'city' => 'string',
        'distance' => 'double',
        'latitude' => 'double',
        'longitude' => 'double',
        'lot_square_feet' => 'int',
        'price_per_square_foot' => 'float',
        'recording_date' => 'string',
        'sale_date' => 'string',
        'sale_price' => 'float',
        'state' => 'string',
        'street_address' => 'string',
        'year_built' => 'string',
        'zip' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clip' => null,
        'v1_property_id' => null,
        'baths' => 'int32',
        'bedrooms' => 'int32',
        'building_square_feet' => 'int32',
        'city' => null,
        'distance' => 'double',
        'latitude' => 'double',
        'longitude' => 'double',
        'lot_square_feet' => 'int32',
        'price_per_square_foot' => null,
        'recording_date' => null,
        'sale_date' => null,
        'sale_price' => null,
        'state' => null,
        'street_address' => null,
        'year_built' => null,
        'zip' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clip' => 'clip',
        'v1_property_id' => 'v1PropertyId',
        'baths' => 'baths',
        'bedrooms' => 'bedrooms',
        'building_square_feet' => 'buildingSquareFeet',
        'city' => 'city',
        'distance' => 'distance',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'lot_square_feet' => 'lotSquareFeet',
        'price_per_square_foot' => 'pricePerSquareFoot',
        'recording_date' => 'recordingDate',
        'sale_date' => 'saleDate',
        'sale_price' => 'salePrice',
        'state' => 'state',
        'street_address' => 'streetAddress',
        'year_built' => 'yearBuilt',
        'zip' => 'zip'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clip' => 'setClip',
        'v1_property_id' => 'setV1PropertyId',
        'baths' => 'setBaths',
        'bedrooms' => 'setBedrooms',
        'building_square_feet' => 'setBuildingSquareFeet',
        'city' => 'setCity',
        'distance' => 'setDistance',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'lot_square_feet' => 'setLotSquareFeet',
        'price_per_square_foot' => 'setPricePerSquareFoot',
        'recording_date' => 'setRecordingDate',
        'sale_date' => 'setSaleDate',
        'sale_price' => 'setSalePrice',
        'state' => 'setState',
        'street_address' => 'setStreetAddress',
        'year_built' => 'setYearBuilt',
        'zip' => 'setZip'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clip' => 'getClip',
        'v1_property_id' => 'getV1PropertyId',
        'baths' => 'getBaths',
        'bedrooms' => 'getBedrooms',
        'building_square_feet' => 'getBuildingSquareFeet',
        'city' => 'getCity',
        'distance' => 'getDistance',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'lot_square_feet' => 'getLotSquareFeet',
        'price_per_square_foot' => 'getPricePerSquareFoot',
        'recording_date' => 'getRecordingDate',
        'sale_date' => 'getSaleDate',
        'sale_price' => 'getSalePrice',
        'state' => 'getState',
        'street_address' => 'getStreetAddress',
        'year_built' => 'getYearBuilt',
        'zip' => 'getZip'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clip'] = isset($data['clip']) ? $data['clip'] : null;
        $this->container['v1_property_id'] = isset($data['v1_property_id']) ? $data['v1_property_id'] : null;
        $this->container['baths'] = isset($data['baths']) ? $data['baths'] : null;
        $this->container['bedrooms'] = isset($data['bedrooms']) ? $data['bedrooms'] : null;
        $this->container['building_square_feet'] = isset($data['building_square_feet']) ? $data['building_square_feet'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['lot_square_feet'] = isset($data['lot_square_feet']) ? $data['lot_square_feet'] : null;
        $this->container['price_per_square_foot'] = isset($data['price_per_square_foot']) ? $data['price_per_square_foot'] : null;
        $this->container['recording_date'] = isset($data['recording_date']) ? $data['recording_date'] : null;
        $this->container['sale_date'] = isset($data['sale_date']) ? $data['sale_date'] : null;
        $this->container['sale_price'] = isset($data['sale_price']) ? $data['sale_price'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['street_address'] = isset($data['street_address']) ? $data['street_address'] : null;
        $this->container['year_built'] = isset($data['year_built']) ? $data['year_built'] : null;
        $this->container['zip'] = isset($data['zip']) ? $data['zip'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clip
     *
     * @return string
     */
    public function getClip()
    {
        return $this->container['clip'];
    }

    /**
     * Sets clip
     *
     * @param string $clip CoreLogic unique identification number assigned to each comparable property.
     *
     * @return $this
     */
    public function setClip($clip)
    {
        $this->container['clip'] = $clip;

        return $this;
    }

    /**
     * Gets v1_property_id
     *
     * @return string
     */
    public function getV1PropertyId()
    {
        return $this->container['v1_property_id'];
    }

    /**
     * Sets v1_property_id
     *
     * @param string $v1_property_id Unique identification number assigned to each comparable property in legacy application.
     *
     * @return $this
     */
    public function setV1PropertyId($v1_property_id)
    {
        $this->container['v1_property_id'] = $v1_property_id;

        return $this;
    }

    /**
     * Gets baths
     *
     * @return int
     */
    public function getBaths()
    {
        return $this->container['baths'];
    }

    /**
     * Sets baths
     *
     * @param int $baths Total number of rooms that are bathrooms in the comparable property. Format: whole number.
     *
     * @return $this
     */
    public function setBaths($baths)
    {
        $this->container['baths'] = $baths;

        return $this;
    }

    /**
     * Gets bedrooms
     *
     * @return int
     */
    public function getBedrooms()
    {
        return $this->container['bedrooms'];
    }

    /**
     * Sets bedrooms
     *
     * @param int $bedrooms CoreLogic calculated total bedrooms for the building.
     *
     * @return $this
     */
    public function setBedrooms($bedrooms)
    {
        $this->container['bedrooms'] = $bedrooms;

        return $this;
    }

    /**
     * Gets building_square_feet
     *
     * @return int
     */
    public function getBuildingSquareFeet()
    {
        return $this->container['building_square_feet'];
    }

    /**
     * Sets building_square_feet
     *
     * @param int $building_square_feet The size of the building in square feet. This field is most commonly populated as an aggregate total when a county does not differentiate between living and non-living areas.
     *
     * @return $this
     */
    public function setBuildingSquareFeet($building_square_feet)
    {
        $this->container['building_square_feet'] = $building_square_feet;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city associated with the property address.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return double
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param double $distance The distance in miles from the subject property.
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return double
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param double $latitude CoreLogic derived geographic coordinate that specifies the north-south position of a point based on United States Postal Service address data for the parcel. The latitude contains numeric data values only conforming to the mask XX.ZZZZZZ, where the XX are the digits to the left of the decimal point, and ZZZZZZ are the digits to the right of the decimal point. Latitude is always a positive value north on the North American continent.
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return double
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param double $longitude CoreLogic derived geographic coordinate that specifies the east-west position of a point based on United States Postal Service address data for the parcel. The longitude contains numeric data values only conforming to the mask -XXX.ZZZZZZ, where the XXX are the numeric digits to the left of the decimal point, and ZZZZZZ are the 6 numeric digits to the right of the decimal point. Longitude is negative on the North American continent.
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets lot_square_feet
     *
     * @return int
     */
    public function getLotSquareFeet()
    {
        return $this->container['lot_square_feet'];
    }

    /**
     * Sets lot_square_feet
     *
     * @param int $lot_square_feet Total land mass in square feet.
     *
     * @return $this
     */
    public function setLotSquareFeet($lot_square_feet)
    {
        $this->container['lot_square_feet'] = $lot_square_feet;

        return $this;
    }

    /**
     * Gets price_per_square_foot
     *
     * @return float
     */
    public function getPricePerSquareFoot()
    {
        return $this->container['price_per_square_foot'];
    }

    /**
     * Sets price_per_square_foot
     *
     * @param float $price_per_square_foot CoreLogic compiled and calculated listed property price per square feet.
     *
     * @return $this
     */
    public function setPricePerSquareFoot($price_per_square_foot)
    {
        $this->container['price_per_square_foot'] = $price_per_square_foot;

        return $this;
    }

    /**
     * Gets recording_date
     *
     * @return string
     */
    public function getRecordingDate()
    {
        return $this->container['recording_date'];
    }

    /**
     * Sets recording_date
     *
     * @param string $recording_date The date the sales transaction of the comparable property was recorded at the county. This date is generally considered the transfer of ownership date. Format: YYYYMMDD.
     *
     * @return $this
     */
    public function setRecordingDate($recording_date)
    {
        $this->container['recording_date'] = $recording_date;

        return $this;
    }

    /**
     * Gets sale_date
     *
     * @return string
     */
    public function getSaleDate()
    {
        return $this->container['sale_date'];
    }

    /**
     * Sets sale_date
     *
     * @param string $sale_date Date the contract, deed or document of the comparable property was signed. Format: YYYYMMDD.
     *
     * @return $this
     */
    public function setSaleDate($sale_date)
    {
        $this->container['sale_date'] = $sale_date;

        return $this;
    }

    /**
     * Gets sale_price
     *
     * @return float
     */
    public function getSalePrice()
    {
        return $this->container['sale_price'];
    }

    /**
     * Sets sale_price
     *
     * @param float $sale_price Dollar amount of the most recent sale of the comparable  property.
     *
     * @return $this
     */
    public function setSalePrice($sale_price)
    {
        $this->container['sale_price'] = $sale_price;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The two-letter USPS postal abbreviation associated with the state / protectorates / commonwealth (e.g., CA, VI).
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets street_address
     *
     * @return string
     */
    public function getStreetAddress()
    {
        return $this->container['street_address'];
    }

    /**
     * Sets street_address
     *
     * @param string $street_address Full Situs address (not including City/St/Zip) (e.g. 123 N Main St)
     *
     * @return $this
     */
    public function setStreetAddress($street_address)
    {
        $this->container['street_address'] = $street_address;

        return $this;
    }

    /**
     * Gets year_built
     *
     * @return string
     */
    public function getYearBuilt()
    {
        return $this->container['year_built'];
    }

    /**
     * Sets year_built
     *
     * @param string $year_built This is the construction year of the original building on the parcel as provided by the county. Not all counties maintain both Original and Effective Year Built. Null if not available from the source. Format: YYYY
     *
     * @return $this
     */
    public function setYearBuilt($year_built)
    {
        $this->container['year_built'] = $year_built;

        return $this;
    }

    /**
     * Gets zip
     *
     * @return string
     */
    public function getZip()
    {
        return $this->container['zip'];
    }

    /**
     * Sets zip
     *
     * @param string $zip Code assigned by the USPS. This is populated by various source files and other proprietary and non-proprietary processes. Data may be the 5-digit zip or 9-digit Zip+4 (e.g., 00501 or 954630042).
     *
     * @return $this
     */
    public function setZip($zip)
    {
        $this->container['zip'] = $zip;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
