<?php
/**
 * InteriorArea
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InteriorArea Class Doc Comment
 *
 * @category Class
 * @description Interior Area.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InteriorArea implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InteriorArea';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'universal_building_area_square_feet' => 'int',
        'universal_building_area_square_feet_source_code' => 'string',
        'building_area_square_feet' => 'int',
        'building_adjusted_area_square_feet' => 'float',
        'building_gross_area_square_feet' => 'float',
        'living_area_square_feet' => 'float',
        'above_grade_area_square_feet' => 'float',
        'ground_floor_area_square_feet' => 'float',
        'basement_area_square_feet' => 'float',
        'finished_basement_area_square_feet' => 'float',
        'unfinished_basement_area_square_feet' => 'float',
        'above_ground_floor_area_square_feet' => 'float',
        'building_additions_area_square_feet' => 'float',
        'entry_level_floor_area_square_feet' => 'float',
        'second_floor_area_square_feet' => 'float',
        'third_floor_area_square_feet' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'universal_building_area_square_feet' => 'int32',
        'universal_building_area_square_feet_source_code' => null,
        'building_area_square_feet' => 'int32',
        'building_adjusted_area_square_feet' => null,
        'building_gross_area_square_feet' => null,
        'living_area_square_feet' => null,
        'above_grade_area_square_feet' => null,
        'ground_floor_area_square_feet' => null,
        'basement_area_square_feet' => null,
        'finished_basement_area_square_feet' => null,
        'unfinished_basement_area_square_feet' => null,
        'above_ground_floor_area_square_feet' => null,
        'building_additions_area_square_feet' => null,
        'entry_level_floor_area_square_feet' => null,
        'second_floor_area_square_feet' => null,
        'third_floor_area_square_feet' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'universal_building_area_square_feet' => 'universalBuildingAreaSquareFeet',
        'universal_building_area_square_feet_source_code' => 'universalBuildingAreaSquareFeetSourceCode',
        'building_area_square_feet' => 'buildingAreaSquareFeet',
        'building_adjusted_area_square_feet' => 'buildingAdjustedAreaSquareFeet',
        'building_gross_area_square_feet' => 'buildingGrossAreaSquareFeet',
        'living_area_square_feet' => 'livingAreaSquareFeet',
        'above_grade_area_square_feet' => 'aboveGradeAreaSquareFeet',
        'ground_floor_area_square_feet' => 'groundFloorAreaSquareFeet',
        'basement_area_square_feet' => 'basementAreaSquareFeet',
        'finished_basement_area_square_feet' => 'finishedBasementAreaSquareFeet',
        'unfinished_basement_area_square_feet' => 'unfinishedBasementAreaSquareFeet',
        'above_ground_floor_area_square_feet' => 'aboveGroundFloorAreaSquareFeet',
        'building_additions_area_square_feet' => 'buildingAdditionsAreaSquareFeet',
        'entry_level_floor_area_square_feet' => 'entryLevelFloorAreaSquareFeet',
        'second_floor_area_square_feet' => 'secondFloorAreaSquareFeet',
        'third_floor_area_square_feet' => 'thirdFloorAreaSquareFeet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'universal_building_area_square_feet' => 'setUniversalBuildingAreaSquareFeet',
        'universal_building_area_square_feet_source_code' => 'setUniversalBuildingAreaSquareFeetSourceCode',
        'building_area_square_feet' => 'setBuildingAreaSquareFeet',
        'building_adjusted_area_square_feet' => 'setBuildingAdjustedAreaSquareFeet',
        'building_gross_area_square_feet' => 'setBuildingGrossAreaSquareFeet',
        'living_area_square_feet' => 'setLivingAreaSquareFeet',
        'above_grade_area_square_feet' => 'setAboveGradeAreaSquareFeet',
        'ground_floor_area_square_feet' => 'setGroundFloorAreaSquareFeet',
        'basement_area_square_feet' => 'setBasementAreaSquareFeet',
        'finished_basement_area_square_feet' => 'setFinishedBasementAreaSquareFeet',
        'unfinished_basement_area_square_feet' => 'setUnfinishedBasementAreaSquareFeet',
        'above_ground_floor_area_square_feet' => 'setAboveGroundFloorAreaSquareFeet',
        'building_additions_area_square_feet' => 'setBuildingAdditionsAreaSquareFeet',
        'entry_level_floor_area_square_feet' => 'setEntryLevelFloorAreaSquareFeet',
        'second_floor_area_square_feet' => 'setSecondFloorAreaSquareFeet',
        'third_floor_area_square_feet' => 'setThirdFloorAreaSquareFeet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'universal_building_area_square_feet' => 'getUniversalBuildingAreaSquareFeet',
        'universal_building_area_square_feet_source_code' => 'getUniversalBuildingAreaSquareFeetSourceCode',
        'building_area_square_feet' => 'getBuildingAreaSquareFeet',
        'building_adjusted_area_square_feet' => 'getBuildingAdjustedAreaSquareFeet',
        'building_gross_area_square_feet' => 'getBuildingGrossAreaSquareFeet',
        'living_area_square_feet' => 'getLivingAreaSquareFeet',
        'above_grade_area_square_feet' => 'getAboveGradeAreaSquareFeet',
        'ground_floor_area_square_feet' => 'getGroundFloorAreaSquareFeet',
        'basement_area_square_feet' => 'getBasementAreaSquareFeet',
        'finished_basement_area_square_feet' => 'getFinishedBasementAreaSquareFeet',
        'unfinished_basement_area_square_feet' => 'getUnfinishedBasementAreaSquareFeet',
        'above_ground_floor_area_square_feet' => 'getAboveGroundFloorAreaSquareFeet',
        'building_additions_area_square_feet' => 'getBuildingAdditionsAreaSquareFeet',
        'entry_level_floor_area_square_feet' => 'getEntryLevelFloorAreaSquareFeet',
        'second_floor_area_square_feet' => 'getSecondFloorAreaSquareFeet',
        'third_floor_area_square_feet' => 'getThirdFloorAreaSquareFeet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['universal_building_area_square_feet'] = isset($data['universal_building_area_square_feet']) ? $data['universal_building_area_square_feet'] : null;
        $this->container['universal_building_area_square_feet_source_code'] = isset($data['universal_building_area_square_feet_source_code']) ? $data['universal_building_area_square_feet_source_code'] : null;
        $this->container['building_area_square_feet'] = isset($data['building_area_square_feet']) ? $data['building_area_square_feet'] : null;
        $this->container['building_adjusted_area_square_feet'] = isset($data['building_adjusted_area_square_feet']) ? $data['building_adjusted_area_square_feet'] : null;
        $this->container['building_gross_area_square_feet'] = isset($data['building_gross_area_square_feet']) ? $data['building_gross_area_square_feet'] : null;
        $this->container['living_area_square_feet'] = isset($data['living_area_square_feet']) ? $data['living_area_square_feet'] : null;
        $this->container['above_grade_area_square_feet'] = isset($data['above_grade_area_square_feet']) ? $data['above_grade_area_square_feet'] : null;
        $this->container['ground_floor_area_square_feet'] = isset($data['ground_floor_area_square_feet']) ? $data['ground_floor_area_square_feet'] : null;
        $this->container['basement_area_square_feet'] = isset($data['basement_area_square_feet']) ? $data['basement_area_square_feet'] : null;
        $this->container['finished_basement_area_square_feet'] = isset($data['finished_basement_area_square_feet']) ? $data['finished_basement_area_square_feet'] : null;
        $this->container['unfinished_basement_area_square_feet'] = isset($data['unfinished_basement_area_square_feet']) ? $data['unfinished_basement_area_square_feet'] : null;
        $this->container['above_ground_floor_area_square_feet'] = isset($data['above_ground_floor_area_square_feet']) ? $data['above_ground_floor_area_square_feet'] : null;
        $this->container['building_additions_area_square_feet'] = isset($data['building_additions_area_square_feet']) ? $data['building_additions_area_square_feet'] : null;
        $this->container['entry_level_floor_area_square_feet'] = isset($data['entry_level_floor_area_square_feet']) ? $data['entry_level_floor_area_square_feet'] : null;
        $this->container['second_floor_area_square_feet'] = isset($data['second_floor_area_square_feet']) ? $data['second_floor_area_square_feet'] : null;
        $this->container['third_floor_area_square_feet'] = isset($data['third_floor_area_square_feet']) ? $data['third_floor_area_square_feet'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets universal_building_area_square_feet
     *
     * @return int
     */
    public function getUniversalBuildingAreaSquareFeet()
    {
        return $this->container['universal_building_area_square_feet'];
    }

    /**
     * Sets universal_building_area_square_feet
     *
     * @param int $universal_building_area_square_feet The Building Square Footage that reflects the most accurate available for use in assessments or comparables (e.g., Living, Adjusted, Gross).
     *
     * @return $this
     */
    public function setUniversalBuildingAreaSquareFeet($universal_building_area_square_feet)
    {
        $this->container['universal_building_area_square_feet'] = $universal_building_area_square_feet;

        return $this;
    }

    /**
     * Gets universal_building_area_square_feet_source_code
     *
     * @return string
     */
    public function getUniversalBuildingAreaSquareFeetSourceCode()
    {
        return $this->container['universal_building_area_square_feet_source_code'];
    }

    /**
     * Sets universal_building_area_square_feet_source_code
     *
     * @param string $universal_building_area_square_feet_source_code The codes appearing in this field indicates the source used to populate the UNIVERSAL BUILDING SQUARE FEET field. A=ADJUSTED, B=TOTAL, D=GROUND FLOOR, G=GROSS, L=LIVING, M=BASE/MAIN
     *
     * @return $this
     */
    public function setUniversalBuildingAreaSquareFeetSourceCode($universal_building_area_square_feet_source_code)
    {
        $this->container['universal_building_area_square_feet_source_code'] = $universal_building_area_square_feet_source_code;

        return $this;
    }

    /**
     * Gets building_area_square_feet
     *
     * @return int
     */
    public function getBuildingAreaSquareFeet()
    {
        return $this->container['building_area_square_feet'];
    }

    /**
     * Sets building_area_square_feet
     *
     * @param int $building_area_square_feet The size of the building in square feet. This field is most commonly populated as an aggregate total when a county does not differentiate between living and non-living areas.
     *
     * @return $this
     */
    public function setBuildingAreaSquareFeet($building_area_square_feet)
    {
        $this->container['building_area_square_feet'] = $building_area_square_feet;

        return $this;
    }

    /**
     * Gets building_adjusted_area_square_feet
     *
     * @return float
     */
    public function getBuildingAdjustedAreaSquareFeet()
    {
        return $this->container['building_adjusted_area_square_feet'];
    }

    /**
     * Sets building_adjusted_area_square_feet
     *
     * @param float $building_adjusted_area_square_feet This is the square footage used by the county or local taxing / assessment authority to determine Improvement Value. This figure is typically 100% of the living area, plus lower percentage of non-living area.
     *
     * @return $this
     */
    public function setBuildingAdjustedAreaSquareFeet($building_adjusted_area_square_feet)
    {
        $this->container['building_adjusted_area_square_feet'] = $building_adjusted_area_square_feet;

        return $this;
    }

    /**
     * Gets building_gross_area_square_feet
     *
     * @return float
     */
    public function getBuildingGrossAreaSquareFeet()
    {
        return $this->container['building_gross_area_square_feet'];
    }

    /**
     * Sets building_gross_area_square_feet
     *
     * @param float $building_gross_area_square_feet This is the square footage for the entire building. Typically this represents all square feet under the roof.
     *
     * @return $this
     */
    public function setBuildingGrossAreaSquareFeet($building_gross_area_square_feet)
    {
        $this->container['building_gross_area_square_feet'] = $building_gross_area_square_feet;

        return $this;
    }

    /**
     * Gets living_area_square_feet
     *
     * @return float
     */
    public function getLivingAreaSquareFeet()
    {
        return $this->container['living_area_square_feet'];
    }

    /**
     * Sets living_area_square_feet
     *
     * @param float $living_area_square_feet This is the area of a building that is used for general living. This is typically the area of a building that is heated or air conditioned and generally does not include Garage, Porch or Unfinished Basement Square Footage values.
     *
     * @return $this
     */
    public function setLivingAreaSquareFeet($living_area_square_feet)
    {
        $this->container['living_area_square_feet'] = $living_area_square_feet;

        return $this;
    }

    /**
     * Gets above_grade_area_square_feet
     *
     * @return float
     */
    public function getAboveGradeAreaSquareFeet()
    {
        return $this->container['above_grade_area_square_feet'];
    }

    /**
     * Sets above_grade_area_square_feet
     *
     * @param float $above_grade_area_square_feet Square footage (sq. ft.) of above ground line or grade of the earth for listed property.
     *
     * @return $this
     */
    public function setAboveGradeAreaSquareFeet($above_grade_area_square_feet)
    {
        $this->container['above_grade_area_square_feet'] = $above_grade_area_square_feet;

        return $this;
    }

    /**
     * Gets ground_floor_area_square_feet
     *
     * @return float
     */
    public function getGroundFloorAreaSquareFeet()
    {
        return $this->container['ground_floor_area_square_feet'];
    }

    /**
     * Sets ground_floor_area_square_feet
     *
     * @param float $ground_floor_area_square_feet Square footage of the part of the building which is level with the ground (typically the front of the building). This is generally above the basement(s) and below the second floor.
     *
     * @return $this
     */
    public function setGroundFloorAreaSquareFeet($ground_floor_area_square_feet)
    {
        $this->container['ground_floor_area_square_feet'] = $ground_floor_area_square_feet;

        return $this;
    }

    /**
     * Gets basement_area_square_feet
     *
     * @return float
     */
    public function getBasementAreaSquareFeet()
    {
        return $this->container['basement_area_square_feet'];
    }

    /**
     * Sets basement_area_square_feet
     *
     * @param float $basement_area_square_feet This is the total square footage associated with the Basement portion of a building. This would include both finished and unfinished areas.
     *
     * @return $this
     */
    public function setBasementAreaSquareFeet($basement_area_square_feet)
    {
        $this->container['basement_area_square_feet'] = $basement_area_square_feet;

        return $this;
    }

    /**
     * Gets finished_basement_area_square_feet
     *
     * @return float
     */
    public function getFinishedBasementAreaSquareFeet()
    {
        return $this->container['finished_basement_area_square_feet'];
    }

    /**
     * Sets finished_basement_area_square_feet
     *
     * @param float $finished_basement_area_square_feet Square footage of below grade area improved for occupancy.
     *
     * @return $this
     */
    public function setFinishedBasementAreaSquareFeet($finished_basement_area_square_feet)
    {
        $this->container['finished_basement_area_square_feet'] = $finished_basement_area_square_feet;

        return $this;
    }

    /**
     * Gets unfinished_basement_area_square_feet
     *
     * @return float
     */
    public function getUnfinishedBasementAreaSquareFeet()
    {
        return $this->container['unfinished_basement_area_square_feet'];
    }

    /**
     * Sets unfinished_basement_area_square_feet
     *
     * @param float $unfinished_basement_area_square_feet Square footage of below grade area not improved for occupancy.
     *
     * @return $this
     */
    public function setUnfinishedBasementAreaSquareFeet($unfinished_basement_area_square_feet)
    {
        $this->container['unfinished_basement_area_square_feet'] = $unfinished_basement_area_square_feet;

        return $this;
    }

    /**
     * Gets above_ground_floor_area_square_feet
     *
     * @return float
     */
    public function getAboveGroundFloorAreaSquareFeet()
    {
        return $this->container['above_ground_floor_area_square_feet'];
    }

    /**
     * Sets above_ground_floor_area_square_feet
     *
     * @param float $above_ground_floor_area_square_feet Square footage (sq. ft.) of above ground line or grade of the earth for listed property.
     *
     * @return $this
     */
    public function setAboveGroundFloorAreaSquareFeet($above_ground_floor_area_square_feet)
    {
        $this->container['above_ground_floor_area_square_feet'] = $above_ground_floor_area_square_feet;

        return $this;
    }

    /**
     * Gets building_additions_area_square_feet
     *
     * @return float
     */
    public function getBuildingAdditionsAreaSquareFeet()
    {
        return $this->container['building_additions_area_square_feet'];
    }

    /**
     * Sets building_additions_area_square_feet
     *
     * @param float $building_additions_area_square_feet Total square footage for the additions to a building.
     *
     * @return $this
     */
    public function setBuildingAdditionsAreaSquareFeet($building_additions_area_square_feet)
    {
        $this->container['building_additions_area_square_feet'] = $building_additions_area_square_feet;

        return $this;
    }

    /**
     * Gets entry_level_floor_area_square_feet
     *
     * @return float
     */
    public function getEntryLevelFloorAreaSquareFeet()
    {
        return $this->container['entry_level_floor_area_square_feet'];
    }

    /**
     * Sets entry_level_floor_area_square_feet
     *
     * @param float $entry_level_floor_area_square_feet Total square footage for the entry level in the building.
     *
     * @return $this
     */
    public function setEntryLevelFloorAreaSquareFeet($entry_level_floor_area_square_feet)
    {
        $this->container['entry_level_floor_area_square_feet'] = $entry_level_floor_area_square_feet;

        return $this;
    }

    /**
     * Gets second_floor_area_square_feet
     *
     * @return float
     */
    public function getSecondFloorAreaSquareFeet()
    {
        return $this->container['second_floor_area_square_feet'];
    }

    /**
     * Sets second_floor_area_square_feet
     *
     * @param float $second_floor_area_square_feet Square footage of building level immediately above ground floor.
     *
     * @return $this
     */
    public function setSecondFloorAreaSquareFeet($second_floor_area_square_feet)
    {
        $this->container['second_floor_area_square_feet'] = $second_floor_area_square_feet;

        return $this;
    }

    /**
     * Gets third_floor_area_square_feet
     *
     * @return float
     */
    public function getThirdFloorAreaSquareFeet()
    {
        return $this->container['third_floor_area_square_feet'];
    }

    /**
     * Sets third_floor_area_square_feet
     *
     * @param float $third_floor_area_square_feet Total square footage for the third floor in the building.
     *
     * @return $this
     */
    public function setThirdFloorAreaSquareFeet($third_floor_area_square_feet)
    {
        $this->container['third_floor_area_square_feet'] = $third_floor_area_square_feet;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
