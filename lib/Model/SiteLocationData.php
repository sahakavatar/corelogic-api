<?php
/**
 * SiteLocationData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SiteLocationData Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SiteLocationData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SiteLocationData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clip' => 'string',
        'coordinates_parcel' => '\Swagger\Client\Model\CoordinatesParcel',
        'coordinates_block' => '\Swagger\Client\Model\CoordinatesBlock',
        'location_legal' => '\Swagger\Client\Model\LocationLegal',
        'location_survey' => '\Swagger\Client\Model\LocationSurvey',
        'neighborhood' => '\Swagger\Client\Model\Neighborhood',
        'municipality' => '\Swagger\Client\Model\Municipality',
        'town' => '\Swagger\Client\Model\Town',
        'jurisdiction_county' => '\Swagger\Client\Model\JurisdictionCounty',
        'cbsa' => '\Swagger\Client\Model\Cbsa',
        'census_tract' => '\Swagger\Client\Model\CensusTract',
        'tax_rate_area' => '\Swagger\Client\Model\TaxRateArea',
        'tax_district' => '\Swagger\Client\Model\TaxDistrict',
        'land_use_and_zoning_codes' => '\Swagger\Client\Model\LandUseAndZoningCodes',
        'lot' => '\Swagger\Client\Model\Lot',
        'utilities' => '\Swagger\Client\Model\UtilitiesType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clip' => null,
        'coordinates_parcel' => null,
        'coordinates_block' => null,
        'location_legal' => null,
        'location_survey' => null,
        'neighborhood' => null,
        'municipality' => null,
        'town' => null,
        'jurisdiction_county' => null,
        'cbsa' => null,
        'census_tract' => null,
        'tax_rate_area' => null,
        'tax_district' => null,
        'land_use_and_zoning_codes' => null,
        'lot' => null,
        'utilities' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clip' => 'clip',
        'coordinates_parcel' => 'coordinatesParcel',
        'coordinates_block' => 'coordinatesBlock',
        'location_legal' => 'locationLegal',
        'location_survey' => 'locationSurvey',
        'neighborhood' => 'neighborhood',
        'municipality' => 'municipality',
        'town' => 'town',
        'jurisdiction_county' => 'jurisdictionCounty',
        'cbsa' => 'cbsa',
        'census_tract' => 'censusTract',
        'tax_rate_area' => 'taxRateArea',
        'tax_district' => 'taxDistrict',
        'land_use_and_zoning_codes' => 'landUseAndZoningCodes',
        'lot' => 'lot',
        'utilities' => 'utilities'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clip' => 'setClip',
        'coordinates_parcel' => 'setCoordinatesParcel',
        'coordinates_block' => 'setCoordinatesBlock',
        'location_legal' => 'setLocationLegal',
        'location_survey' => 'setLocationSurvey',
        'neighborhood' => 'setNeighborhood',
        'municipality' => 'setMunicipality',
        'town' => 'setTown',
        'jurisdiction_county' => 'setJurisdictionCounty',
        'cbsa' => 'setCbsa',
        'census_tract' => 'setCensusTract',
        'tax_rate_area' => 'setTaxRateArea',
        'tax_district' => 'setTaxDistrict',
        'land_use_and_zoning_codes' => 'setLandUseAndZoningCodes',
        'lot' => 'setLot',
        'utilities' => 'setUtilities'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clip' => 'getClip',
        'coordinates_parcel' => 'getCoordinatesParcel',
        'coordinates_block' => 'getCoordinatesBlock',
        'location_legal' => 'getLocationLegal',
        'location_survey' => 'getLocationSurvey',
        'neighborhood' => 'getNeighborhood',
        'municipality' => 'getMunicipality',
        'town' => 'getTown',
        'jurisdiction_county' => 'getJurisdictionCounty',
        'cbsa' => 'getCbsa',
        'census_tract' => 'getCensusTract',
        'tax_rate_area' => 'getTaxRateArea',
        'tax_district' => 'getTaxDistrict',
        'land_use_and_zoning_codes' => 'getLandUseAndZoningCodes',
        'lot' => 'getLot',
        'utilities' => 'getUtilities'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clip'] = isset($data['clip']) ? $data['clip'] : null;
        $this->container['coordinates_parcel'] = isset($data['coordinates_parcel']) ? $data['coordinates_parcel'] : null;
        $this->container['coordinates_block'] = isset($data['coordinates_block']) ? $data['coordinates_block'] : null;
        $this->container['location_legal'] = isset($data['location_legal']) ? $data['location_legal'] : null;
        $this->container['location_survey'] = isset($data['location_survey']) ? $data['location_survey'] : null;
        $this->container['neighborhood'] = isset($data['neighborhood']) ? $data['neighborhood'] : null;
        $this->container['municipality'] = isset($data['municipality']) ? $data['municipality'] : null;
        $this->container['town'] = isset($data['town']) ? $data['town'] : null;
        $this->container['jurisdiction_county'] = isset($data['jurisdiction_county']) ? $data['jurisdiction_county'] : null;
        $this->container['cbsa'] = isset($data['cbsa']) ? $data['cbsa'] : null;
        $this->container['census_tract'] = isset($data['census_tract']) ? $data['census_tract'] : null;
        $this->container['tax_rate_area'] = isset($data['tax_rate_area']) ? $data['tax_rate_area'] : null;
        $this->container['tax_district'] = isset($data['tax_district']) ? $data['tax_district'] : null;
        $this->container['land_use_and_zoning_codes'] = isset($data['land_use_and_zoning_codes']) ? $data['land_use_and_zoning_codes'] : null;
        $this->container['lot'] = isset($data['lot']) ? $data['lot'] : null;
        $this->container['utilities'] = isset($data['utilities']) ? $data['utilities'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clip
     *
     * @return string
     */
    public function getClip()
    {
        return $this->container['clip'];
    }

    /**
     * Sets clip
     *
     * @param string $clip Corelogic Unique identification number assigned to each property.
     *
     * @return $this
     */
    public function setClip($clip)
    {
        $this->container['clip'] = $clip;

        return $this;
    }

    /**
     * Gets coordinates_parcel
     *
     * @return \Swagger\Client\Model\CoordinatesParcel
     */
    public function getCoordinatesParcel()
    {
        return $this->container['coordinates_parcel'];
    }

    /**
     * Sets coordinates_parcel
     *
     * @param \Swagger\Client\Model\CoordinatesParcel $coordinates_parcel coordinates_parcel
     *
     * @return $this
     */
    public function setCoordinatesParcel($coordinates_parcel)
    {
        $this->container['coordinates_parcel'] = $coordinates_parcel;

        return $this;
    }

    /**
     * Gets coordinates_block
     *
     * @return \Swagger\Client\Model\CoordinatesBlock
     */
    public function getCoordinatesBlock()
    {
        return $this->container['coordinates_block'];
    }

    /**
     * Sets coordinates_block
     *
     * @param \Swagger\Client\Model\CoordinatesBlock $coordinates_block coordinates_block
     *
     * @return $this
     */
    public function setCoordinatesBlock($coordinates_block)
    {
        $this->container['coordinates_block'] = $coordinates_block;

        return $this;
    }

    /**
     * Gets location_legal
     *
     * @return \Swagger\Client\Model\LocationLegal
     */
    public function getLocationLegal()
    {
        return $this->container['location_legal'];
    }

    /**
     * Sets location_legal
     *
     * @param \Swagger\Client\Model\LocationLegal $location_legal location_legal
     *
     * @return $this
     */
    public function setLocationLegal($location_legal)
    {
        $this->container['location_legal'] = $location_legal;

        return $this;
    }

    /**
     * Gets location_survey
     *
     * @return \Swagger\Client\Model\LocationSurvey
     */
    public function getLocationSurvey()
    {
        return $this->container['location_survey'];
    }

    /**
     * Sets location_survey
     *
     * @param \Swagger\Client\Model\LocationSurvey $location_survey location_survey
     *
     * @return $this
     */
    public function setLocationSurvey($location_survey)
    {
        $this->container['location_survey'] = $location_survey;

        return $this;
    }

    /**
     * Gets neighborhood
     *
     * @return \Swagger\Client\Model\Neighborhood
     */
    public function getNeighborhood()
    {
        return $this->container['neighborhood'];
    }

    /**
     * Sets neighborhood
     *
     * @param \Swagger\Client\Model\Neighborhood $neighborhood neighborhood
     *
     * @return $this
     */
    public function setNeighborhood($neighborhood)
    {
        $this->container['neighborhood'] = $neighborhood;

        return $this;
    }

    /**
     * Gets municipality
     *
     * @return \Swagger\Client\Model\Municipality
     */
    public function getMunicipality()
    {
        return $this->container['municipality'];
    }

    /**
     * Sets municipality
     *
     * @param \Swagger\Client\Model\Municipality $municipality municipality
     *
     * @return $this
     */
    public function setMunicipality($municipality)
    {
        $this->container['municipality'] = $municipality;

        return $this;
    }

    /**
     * Gets town
     *
     * @return \Swagger\Client\Model\Town
     */
    public function getTown()
    {
        return $this->container['town'];
    }

    /**
     * Sets town
     *
     * @param \Swagger\Client\Model\Town $town town
     *
     * @return $this
     */
    public function setTown($town)
    {
        $this->container['town'] = $town;

        return $this;
    }

    /**
     * Gets jurisdiction_county
     *
     * @return \Swagger\Client\Model\JurisdictionCounty
     */
    public function getJurisdictionCounty()
    {
        return $this->container['jurisdiction_county'];
    }

    /**
     * Sets jurisdiction_county
     *
     * @param \Swagger\Client\Model\JurisdictionCounty $jurisdiction_county jurisdiction_county
     *
     * @return $this
     */
    public function setJurisdictionCounty($jurisdiction_county)
    {
        $this->container['jurisdiction_county'] = $jurisdiction_county;

        return $this;
    }

    /**
     * Gets cbsa
     *
     * @return \Swagger\Client\Model\Cbsa
     */
    public function getCbsa()
    {
        return $this->container['cbsa'];
    }

    /**
     * Sets cbsa
     *
     * @param \Swagger\Client\Model\Cbsa $cbsa cbsa
     *
     * @return $this
     */
    public function setCbsa($cbsa)
    {
        $this->container['cbsa'] = $cbsa;

        return $this;
    }

    /**
     * Gets census_tract
     *
     * @return \Swagger\Client\Model\CensusTract
     */
    public function getCensusTract()
    {
        return $this->container['census_tract'];
    }

    /**
     * Sets census_tract
     *
     * @param \Swagger\Client\Model\CensusTract $census_tract census_tract
     *
     * @return $this
     */
    public function setCensusTract($census_tract)
    {
        $this->container['census_tract'] = $census_tract;

        return $this;
    }

    /**
     * Gets tax_rate_area
     *
     * @return \Swagger\Client\Model\TaxRateArea
     */
    public function getTaxRateArea()
    {
        return $this->container['tax_rate_area'];
    }

    /**
     * Sets tax_rate_area
     *
     * @param \Swagger\Client\Model\TaxRateArea $tax_rate_area tax_rate_area
     *
     * @return $this
     */
    public function setTaxRateArea($tax_rate_area)
    {
        $this->container['tax_rate_area'] = $tax_rate_area;

        return $this;
    }

    /**
     * Gets tax_district
     *
     * @return \Swagger\Client\Model\TaxDistrict
     */
    public function getTaxDistrict()
    {
        return $this->container['tax_district'];
    }

    /**
     * Sets tax_district
     *
     * @param \Swagger\Client\Model\TaxDistrict $tax_district tax_district
     *
     * @return $this
     */
    public function setTaxDistrict($tax_district)
    {
        $this->container['tax_district'] = $tax_district;

        return $this;
    }

    /**
     * Gets land_use_and_zoning_codes
     *
     * @return \Swagger\Client\Model\LandUseAndZoningCodes
     */
    public function getLandUseAndZoningCodes()
    {
        return $this->container['land_use_and_zoning_codes'];
    }

    /**
     * Sets land_use_and_zoning_codes
     *
     * @param \Swagger\Client\Model\LandUseAndZoningCodes $land_use_and_zoning_codes land_use_and_zoning_codes
     *
     * @return $this
     */
    public function setLandUseAndZoningCodes($land_use_and_zoning_codes)
    {
        $this->container['land_use_and_zoning_codes'] = $land_use_and_zoning_codes;

        return $this;
    }

    /**
     * Gets lot
     *
     * @return \Swagger\Client\Model\Lot
     */
    public function getLot()
    {
        return $this->container['lot'];
    }

    /**
     * Sets lot
     *
     * @param \Swagger\Client\Model\Lot $lot lot
     *
     * @return $this
     */
    public function setLot($lot)
    {
        $this->container['lot'] = $lot;

        return $this;
    }

    /**
     * Gets utilities
     *
     * @return \Swagger\Client\Model\UtilitiesType
     */
    public function getUtilities()
    {
        return $this->container['utilities'];
    }

    /**
     * Sets utilities
     *
     * @param \Swagger\Client\Model\UtilitiesType $utilities utilities
     *
     * @return $this
     */
    public function setUtilities($utilities)
    {
        $this->container['utilities'] = $utilities;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
