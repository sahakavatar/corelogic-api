<?php
/**
 * StructureExterior
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StructureExterior Class Doc Comment
 *
 * @category Class
 * @description Structure Exterior.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StructureExterior implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StructureExterior';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'patios' => '\Swagger\Client\Model\Patio',
        'porches' => '\Swagger\Client\Model\Porch',
        'parking' => '\Swagger\Client\Model\Parking',
        'pool' => '\Swagger\Client\Model\Pool',
        'walls' => '\Swagger\Client\Model\Wall',
        'roof' => '\Swagger\Client\Model\Roof'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'patios' => null,
        'porches' => null,
        'parking' => null,
        'pool' => null,
        'walls' => null,
        'roof' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'patios' => 'patios',
        'porches' => 'porches',
        'parking' => 'parking',
        'pool' => 'pool',
        'walls' => 'walls',
        'roof' => 'roof'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'patios' => 'setPatios',
        'porches' => 'setPorches',
        'parking' => 'setParking',
        'pool' => 'setPool',
        'walls' => 'setWalls',
        'roof' => 'setRoof'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'patios' => 'getPatios',
        'porches' => 'getPorches',
        'parking' => 'getParking',
        'pool' => 'getPool',
        'walls' => 'getWalls',
        'roof' => 'getRoof'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['patios'] = isset($data['patios']) ? $data['patios'] : null;
        $this->container['porches'] = isset($data['porches']) ? $data['porches'] : null;
        $this->container['parking'] = isset($data['parking']) ? $data['parking'] : null;
        $this->container['pool'] = isset($data['pool']) ? $data['pool'] : null;
        $this->container['walls'] = isset($data['walls']) ? $data['walls'] : null;
        $this->container['roof'] = isset($data['roof']) ? $data['roof'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets patios
     *
     * @return \Swagger\Client\Model\Patio
     */
    public function getPatios()
    {
        return $this->container['patios'];
    }

    /**
     * Sets patios
     *
     * @param \Swagger\Client\Model\Patio $patios patios
     *
     * @return $this
     */
    public function setPatios($patios)
    {
        $this->container['patios'] = $patios;

        return $this;
    }

    /**
     * Gets porches
     *
     * @return \Swagger\Client\Model\Porch
     */
    public function getPorches()
    {
        return $this->container['porches'];
    }

    /**
     * Sets porches
     *
     * @param \Swagger\Client\Model\Porch $porches porches
     *
     * @return $this
     */
    public function setPorches($porches)
    {
        $this->container['porches'] = $porches;

        return $this;
    }

    /**
     * Gets parking
     *
     * @return \Swagger\Client\Model\Parking
     */
    public function getParking()
    {
        return $this->container['parking'];
    }

    /**
     * Sets parking
     *
     * @param \Swagger\Client\Model\Parking $parking parking
     *
     * @return $this
     */
    public function setParking($parking)
    {
        $this->container['parking'] = $parking;

        return $this;
    }

    /**
     * Gets pool
     *
     * @return \Swagger\Client\Model\Pool
     */
    public function getPool()
    {
        return $this->container['pool'];
    }

    /**
     * Sets pool
     *
     * @param \Swagger\Client\Model\Pool $pool pool
     *
     * @return $this
     */
    public function setPool($pool)
    {
        $this->container['pool'] = $pool;

        return $this;
    }

    /**
     * Gets walls
     *
     * @return \Swagger\Client\Model\Wall
     */
    public function getWalls()
    {
        return $this->container['walls'];
    }

    /**
     * Sets walls
     *
     * @param \Swagger\Client\Model\Wall $walls walls
     *
     * @return $this
     */
    public function setWalls($walls)
    {
        $this->container['walls'] = $walls;

        return $this;
    }

    /**
     * Gets roof
     *
     * @return \Swagger\Client\Model\Roof
     */
    public function getRoof()
    {
        return $this->container['roof'];
    }

    /**
     * Sets roof
     *
     * @param \Swagger\Client\Model\Roof $roof roof
     *
     * @return $this
     */
    public function setRoof($roof)
    {
        $this->container['roof'] = $roof;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
