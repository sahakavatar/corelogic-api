<?php
/**
 * HoaLienPlaintiff
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HoaLienPlaintiff Class Doc Comment
 *
 * @category Class
 * @description hoaLienPlaintiff.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HoaLienPlaintiff implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HoaLienPlaintiff';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'plaintiff_full_name' => 'string',
        'plaintiff_address' => 'string',
        'plaintiff_city' => 'string',
        'plaintiff_state' => 'string',
        'plaintiff_zip_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'plaintiff_full_name' => null,
        'plaintiff_address' => null,
        'plaintiff_city' => null,
        'plaintiff_state' => null,
        'plaintiff_zip_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plaintiff_full_name' => 'plaintiffFullName',
        'plaintiff_address' => 'plaintiffAddress',
        'plaintiff_city' => 'plaintiffCity',
        'plaintiff_state' => 'plaintiffState',
        'plaintiff_zip_code' => 'plaintiffZipCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plaintiff_full_name' => 'setPlaintiffFullName',
        'plaintiff_address' => 'setPlaintiffAddress',
        'plaintiff_city' => 'setPlaintiffCity',
        'plaintiff_state' => 'setPlaintiffState',
        'plaintiff_zip_code' => 'setPlaintiffZipCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plaintiff_full_name' => 'getPlaintiffFullName',
        'plaintiff_address' => 'getPlaintiffAddress',
        'plaintiff_city' => 'getPlaintiffCity',
        'plaintiff_state' => 'getPlaintiffState',
        'plaintiff_zip_code' => 'getPlaintiffZipCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plaintiff_full_name'] = isset($data['plaintiff_full_name']) ? $data['plaintiff_full_name'] : null;
        $this->container['plaintiff_address'] = isset($data['plaintiff_address']) ? $data['plaintiff_address'] : null;
        $this->container['plaintiff_city'] = isset($data['plaintiff_city']) ? $data['plaintiff_city'] : null;
        $this->container['plaintiff_state'] = isset($data['plaintiff_state']) ? $data['plaintiff_state'] : null;
        $this->container['plaintiff_zip_code'] = isset($data['plaintiff_zip_code']) ? $data['plaintiff_zip_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plaintiff_full_name
     *
     * @return string
     */
    public function getPlaintiffFullName()
    {
        return $this->container['plaintiff_full_name'];
    }

    /**
     * Sets plaintiff_full_name
     *
     * @param string $plaintiff_full_name Name of the claimant or representative either taking lien action or releasing a prior lien against the owner.
     *
     * @return $this
     */
    public function setPlaintiffFullName($plaintiff_full_name)
    {
        $this->container['plaintiff_full_name'] = $plaintiff_full_name;

        return $this;
    }

    /**
     * Gets plaintiff_address
     *
     * @return string
     */
    public function getPlaintiffAddress()
    {
        return $this->container['plaintiff_address'];
    }

    /**
     * Sets plaintiff_address
     *
     * @param string $plaintiff_address Address of the Plaintiff as recorded on the document.
     *
     * @return $this
     */
    public function setPlaintiffAddress($plaintiff_address)
    {
        $this->container['plaintiff_address'] = $plaintiff_address;

        return $this;
    }

    /**
     * Gets plaintiff_city
     *
     * @return string
     */
    public function getPlaintiffCity()
    {
        return $this->container['plaintiff_city'];
    }

    /**
     * Sets plaintiff_city
     *
     * @param string $plaintiff_city Plaintiff City as recorded on the document.
     *
     * @return $this
     */
    public function setPlaintiffCity($plaintiff_city)
    {
        $this->container['plaintiff_city'] = $plaintiff_city;

        return $this;
    }

    /**
     * Gets plaintiff_state
     *
     * @return string
     */
    public function getPlaintiffState()
    {
        return $this->container['plaintiff_state'];
    }

    /**
     * Sets plaintiff_state
     *
     * @param string $plaintiff_state Plaintiff State as recorded on the document.
     *
     * @return $this
     */
    public function setPlaintiffState($plaintiff_state)
    {
        $this->container['plaintiff_state'] = $plaintiff_state;

        return $this;
    }

    /**
     * Gets plaintiff_zip_code
     *
     * @return string
     */
    public function getPlaintiffZipCode()
    {
        return $this->container['plaintiff_zip_code'];
    }

    /**
     * Sets plaintiff_zip_code
     *
     * @param string $plaintiff_zip_code Plaintiff ZIP code as recorded on the document.
     *
     * @return $this
     */
    public function setPlaintiffZipCode($plaintiff_zip_code)
    {
        $this->container['plaintiff_zip_code'] = $plaintiff_zip_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
