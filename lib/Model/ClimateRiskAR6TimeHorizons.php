<?php
/**
 * ClimateRiskAR6TimeHorizons
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ClimateRiskAR6TimeHorizons Class Doc Comment
 *
 * @category Class
 * @description Time Horizon Details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClimateRiskAR6TimeHorizons implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClimateRiskAR6TimeHorizons';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'time_horizon' => 'int',
        'average_annual_loss_ratio' => 'float',
        'average_annual_loss_risk_score' => 'int',
        'annual_exceedance_probability' => '\Swagger\Client\Model\ClimateRiskAR6AnnualExceedanceProbability',
        'occurrence_exceedance_probability' => '\Swagger\Client\Model\ClimateRiskAR6OccurrenceExceedanceProbability',
        'annual_exceedance_probability_tvar' => '\Swagger\Client\Model\ClimateRiskAR6AnnualExceedanceProbabilityTvar',
        'occurrence_exceedance_probability_tvar' => '\Swagger\Client\Model\ClimateRiskAR6OccurrenceExceedanceProbabilityTvar'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'time_horizon' => 'int32',
        'average_annual_loss_ratio' => null,
        'average_annual_loss_risk_score' => 'int32',
        'annual_exceedance_probability' => null,
        'occurrence_exceedance_probability' => null,
        'annual_exceedance_probability_tvar' => null,
        'occurrence_exceedance_probability_tvar' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'time_horizon' => 'timeHorizon',
        'average_annual_loss_ratio' => 'averageAnnualLossRatio',
        'average_annual_loss_risk_score' => 'averageAnnualLossRiskScore',
        'annual_exceedance_probability' => 'annualExceedanceProbability',
        'occurrence_exceedance_probability' => 'occurrenceExceedanceProbability',
        'annual_exceedance_probability_tvar' => 'annualExceedanceProbabilityTvar',
        'occurrence_exceedance_probability_tvar' => 'occurrenceExceedanceProbabilityTvar'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'time_horizon' => 'setTimeHorizon',
        'average_annual_loss_ratio' => 'setAverageAnnualLossRatio',
        'average_annual_loss_risk_score' => 'setAverageAnnualLossRiskScore',
        'annual_exceedance_probability' => 'setAnnualExceedanceProbability',
        'occurrence_exceedance_probability' => 'setOccurrenceExceedanceProbability',
        'annual_exceedance_probability_tvar' => 'setAnnualExceedanceProbabilityTvar',
        'occurrence_exceedance_probability_tvar' => 'setOccurrenceExceedanceProbabilityTvar'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'time_horizon' => 'getTimeHorizon',
        'average_annual_loss_ratio' => 'getAverageAnnualLossRatio',
        'average_annual_loss_risk_score' => 'getAverageAnnualLossRiskScore',
        'annual_exceedance_probability' => 'getAnnualExceedanceProbability',
        'occurrence_exceedance_probability' => 'getOccurrenceExceedanceProbability',
        'annual_exceedance_probability_tvar' => 'getAnnualExceedanceProbabilityTvar',
        'occurrence_exceedance_probability_tvar' => 'getOccurrenceExceedanceProbabilityTvar'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['time_horizon'] = isset($data['time_horizon']) ? $data['time_horizon'] : null;
        $this->container['average_annual_loss_ratio'] = isset($data['average_annual_loss_ratio']) ? $data['average_annual_loss_ratio'] : null;
        $this->container['average_annual_loss_risk_score'] = isset($data['average_annual_loss_risk_score']) ? $data['average_annual_loss_risk_score'] : null;
        $this->container['annual_exceedance_probability'] = isset($data['annual_exceedance_probability']) ? $data['annual_exceedance_probability'] : null;
        $this->container['occurrence_exceedance_probability'] = isset($data['occurrence_exceedance_probability']) ? $data['occurrence_exceedance_probability'] : null;
        $this->container['annual_exceedance_probability_tvar'] = isset($data['annual_exceedance_probability_tvar']) ? $data['annual_exceedance_probability_tvar'] : null;
        $this->container['occurrence_exceedance_probability_tvar'] = isset($data['occurrence_exceedance_probability_tvar']) ? $data['occurrence_exceedance_probability_tvar'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets time_horizon
     *
     * @return int
     */
    public function getTimeHorizon()
    {
        return $this->container['time_horizon'];
    }

    /**
     * Sets time_horizon
     *
     * @param int $time_horizon The climate timeframe is the timeframe for the record. (e.g., 0 represents Current, 2030, 2040, 2050) Format: YYYY
     *
     * @return $this
     */
    public function setTimeHorizon($time_horizon)
    {
        $this->container['time_horizon'] = $time_horizon;

        return $this;
    }

    /**
     * Gets average_annual_loss_ratio
     *
     * @return float
     */
    public function getAverageAnnualLossRatio()
    {
        return $this->container['average_annual_loss_ratio'];
    }

    /**
     * Sets average_annual_loss_ratio
     *
     * @param float $average_annual_loss_ratio Long-term Average Annual Loss expressed as a ratio.  This represents the ratio between long-term average annual loss and replacement cost.
     *
     * @return $this
     */
    public function setAverageAnnualLossRatio($average_annual_loss_ratio)
    {
        $this->container['average_annual_loss_ratio'] = $average_annual_loss_ratio;

        return $this;
    }

    /**
     * Gets average_annual_loss_risk_score
     *
     * @return int
     */
    public function getAverageAnnualLossRiskScore()
    {
        return $this->container['average_annual_loss_risk_score'];
    }

    /**
     * Sets average_annual_loss_risk_score
     *
     * @param int $average_annual_loss_risk_score Values range from 0 to 100, based on the Average Annual Loss relative to all properties in the given risk type score group (SFR, MFR, COM, IND, MUN, AGR) nationwide. 0 indicates the peril isn't modeled for the given location. If a peril is modeled for the given location, 1 indicates the lowest risk and 100 indicates the highest risk.
     *
     * @return $this
     */
    public function setAverageAnnualLossRiskScore($average_annual_loss_risk_score)
    {
        $this->container['average_annual_loss_risk_score'] = $average_annual_loss_risk_score;

        return $this;
    }

    /**
     * Gets annual_exceedance_probability
     *
     * @return \Swagger\Client\Model\ClimateRiskAR6AnnualExceedanceProbability
     */
    public function getAnnualExceedanceProbability()
    {
        return $this->container['annual_exceedance_probability'];
    }

    /**
     * Sets annual_exceedance_probability
     *
     * @param \Swagger\Client\Model\ClimateRiskAR6AnnualExceedanceProbability $annual_exceedance_probability annual_exceedance_probability
     *
     * @return $this
     */
    public function setAnnualExceedanceProbability($annual_exceedance_probability)
    {
        $this->container['annual_exceedance_probability'] = $annual_exceedance_probability;

        return $this;
    }

    /**
     * Gets occurrence_exceedance_probability
     *
     * @return \Swagger\Client\Model\ClimateRiskAR6OccurrenceExceedanceProbability
     */
    public function getOccurrenceExceedanceProbability()
    {
        return $this->container['occurrence_exceedance_probability'];
    }

    /**
     * Sets occurrence_exceedance_probability
     *
     * @param \Swagger\Client\Model\ClimateRiskAR6OccurrenceExceedanceProbability $occurrence_exceedance_probability occurrence_exceedance_probability
     *
     * @return $this
     */
    public function setOccurrenceExceedanceProbability($occurrence_exceedance_probability)
    {
        $this->container['occurrence_exceedance_probability'] = $occurrence_exceedance_probability;

        return $this;
    }

    /**
     * Gets annual_exceedance_probability_tvar
     *
     * @return \Swagger\Client\Model\ClimateRiskAR6AnnualExceedanceProbabilityTvar
     */
    public function getAnnualExceedanceProbabilityTvar()
    {
        return $this->container['annual_exceedance_probability_tvar'];
    }

    /**
     * Sets annual_exceedance_probability_tvar
     *
     * @param \Swagger\Client\Model\ClimateRiskAR6AnnualExceedanceProbabilityTvar $annual_exceedance_probability_tvar annual_exceedance_probability_tvar
     *
     * @return $this
     */
    public function setAnnualExceedanceProbabilityTvar($annual_exceedance_probability_tvar)
    {
        $this->container['annual_exceedance_probability_tvar'] = $annual_exceedance_probability_tvar;

        return $this;
    }

    /**
     * Gets occurrence_exceedance_probability_tvar
     *
     * @return \Swagger\Client\Model\ClimateRiskAR6OccurrenceExceedanceProbabilityTvar
     */
    public function getOccurrenceExceedanceProbabilityTvar()
    {
        return $this->container['occurrence_exceedance_probability_tvar'];
    }

    /**
     * Sets occurrence_exceedance_probability_tvar
     *
     * @param \Swagger\Client\Model\ClimateRiskAR6OccurrenceExceedanceProbabilityTvar $occurrence_exceedance_probability_tvar occurrence_exceedance_probability_tvar
     *
     * @return $this
     */
    public function setOccurrenceExceedanceProbabilityTvar($occurrence_exceedance_probability_tvar)
    {
        $this->container['occurrence_exceedance_probability_tvar'] = $occurrence_exceedance_probability_tvar;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
