<?php
/**
 * EnrichedLienLoanIndicator
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnrichedLienLoanIndicator Class Doc Comment
 *
 * @category Class
 * @description Loan indicator details.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnrichedLienLoanIndicator implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnrichedLienLoanIndicator';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enriched_conforming' => 'int',
        'equity' => 'int',
        'enriched_fha' => 'int',
        'construction' => 'int',
        'private_party_lender' => 'int',
        'seller_carry_back' => 'int',
        'planned_unit_development_rider' => 'int',
        'multifamily_rider' => 'int',
        'condominium_rider' => 'int',
        'second_home_rider' => 'int',
        'eligible_mortgage_gse' => 'int',
        'variable_rider' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'enriched_conforming' => 'int32',
        'equity' => 'int32',
        'enriched_fha' => 'int32',
        'construction' => 'int32',
        'private_party_lender' => 'int32',
        'seller_carry_back' => 'int32',
        'planned_unit_development_rider' => 'int32',
        'multifamily_rider' => 'int32',
        'condominium_rider' => 'int32',
        'second_home_rider' => 'int32',
        'eligible_mortgage_gse' => 'int32',
        'variable_rider' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'enriched_conforming' => 'enrichedConforming',
        'equity' => 'equity',
        'enriched_fha' => 'enrichedFHA',
        'construction' => 'construction',
        'private_party_lender' => 'privatePartyLender',
        'seller_carry_back' => 'sellerCarryBack',
        'planned_unit_development_rider' => 'plannedUnitDevelopmentRider',
        'multifamily_rider' => 'multifamilyRider',
        'condominium_rider' => 'condominiumRider',
        'second_home_rider' => 'secondHomeRider',
        'eligible_mortgage_gse' => 'eligibleMortgageGSE',
        'variable_rider' => 'variableRider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'enriched_conforming' => 'setEnrichedConforming',
        'equity' => 'setEquity',
        'enriched_fha' => 'setEnrichedFha',
        'construction' => 'setConstruction',
        'private_party_lender' => 'setPrivatePartyLender',
        'seller_carry_back' => 'setSellerCarryBack',
        'planned_unit_development_rider' => 'setPlannedUnitDevelopmentRider',
        'multifamily_rider' => 'setMultifamilyRider',
        'condominium_rider' => 'setCondominiumRider',
        'second_home_rider' => 'setSecondHomeRider',
        'eligible_mortgage_gse' => 'setEligibleMortgageGse',
        'variable_rider' => 'setVariableRider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'enriched_conforming' => 'getEnrichedConforming',
        'equity' => 'getEquity',
        'enriched_fha' => 'getEnrichedFha',
        'construction' => 'getConstruction',
        'private_party_lender' => 'getPrivatePartyLender',
        'seller_carry_back' => 'getSellerCarryBack',
        'planned_unit_development_rider' => 'getPlannedUnitDevelopmentRider',
        'multifamily_rider' => 'getMultifamilyRider',
        'condominium_rider' => 'getCondominiumRider',
        'second_home_rider' => 'getSecondHomeRider',
        'eligible_mortgage_gse' => 'getEligibleMortgageGse',
        'variable_rider' => 'getVariableRider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enriched_conforming'] = isset($data['enriched_conforming']) ? $data['enriched_conforming'] : null;
        $this->container['equity'] = isset($data['equity']) ? $data['equity'] : null;
        $this->container['enriched_fha'] = isset($data['enriched_fha']) ? $data['enriched_fha'] : null;
        $this->container['construction'] = isset($data['construction']) ? $data['construction'] : null;
        $this->container['private_party_lender'] = isset($data['private_party_lender']) ? $data['private_party_lender'] : null;
        $this->container['seller_carry_back'] = isset($data['seller_carry_back']) ? $data['seller_carry_back'] : null;
        $this->container['planned_unit_development_rider'] = isset($data['planned_unit_development_rider']) ? $data['planned_unit_development_rider'] : null;
        $this->container['multifamily_rider'] = isset($data['multifamily_rider']) ? $data['multifamily_rider'] : null;
        $this->container['condominium_rider'] = isset($data['condominium_rider']) ? $data['condominium_rider'] : null;
        $this->container['second_home_rider'] = isset($data['second_home_rider']) ? $data['second_home_rider'] : null;
        $this->container['eligible_mortgage_gse'] = isset($data['eligible_mortgage_gse']) ? $data['eligible_mortgage_gse'] : null;
        $this->container['variable_rider'] = isset($data['variable_rider']) ? $data['variable_rider'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets enriched_conforming
     *
     * @return int
     */
    public function getEnrichedConforming()
    {
        return $this->container['enriched_conforming'];
    }

    /**
     * Sets enriched_conforming
     *
     * @param int $enriched_conforming CoreLogic enriched value that indicates if the mortgage loan is considered a conforming loan.  The Enriched proprietary logic is designed to improve completeness and accuracy. Values:  0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setEnrichedConforming($enriched_conforming)
    {
        $this->container['enriched_conforming'] = $enriched_conforming;

        return $this;
    }

    /**
     * Gets equity
     *
     * @return int
     */
    public function getEquity()
    {
        return $this->container['equity'];
    }

    /**
     * Sets equity
     *
     * @param int $equity CoreLogic standardized value that indicates if the mortgage loan is an equity loan. Values:  0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setEquity($equity)
    {
        $this->container['equity'] = $equity;

        return $this;
    }

    /**
     * Gets enriched_fha
     *
     * @return int
     */
    public function getEnrichedFha()
    {
        return $this->container['enriched_fha'];
    }

    /**
     * Sets enriched_fha
     *
     * @param int $enriched_fha CoreLogic standardized value that indicates if the mortgage loan is an FHA (Federal Housing Authority) loan. 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setEnrichedFha($enriched_fha)
    {
        $this->container['enriched_fha'] = $enriched_fha;

        return $this;
    }

    /**
     * Gets construction
     *
     * @return int
     */
    public function getConstruction()
    {
        return $this->container['construction'];
    }

    /**
     * Sets construction
     *
     * @param int $construction CoreLogic standardized value that indicates if this mortgage is specifically for any type of construction on the property and is identified as a construction loan on the trust documents. 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setConstruction($construction)
    {
        $this->container['construction'] = $construction;

        return $this;
    }

    /**
     * Gets private_party_lender
     *
     * @return int
     */
    public function getPrivatePartyLender()
    {
        return $this->container['private_party_lender'];
    }

    /**
     * Sets private_party_lender
     *
     * @param int $private_party_lender CoreLogic standardized value that indicates if the mortgage loan lender is a private party or lender not currently listed in the CoreLogic Lender table. 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setPrivatePartyLender($private_party_lender)
    {
        $this->container['private_party_lender'] = $private_party_lender;

        return $this;
    }

    /**
     * Gets seller_carry_back
     *
     * @return int
     */
    public function getSellerCarryBack()
    {
        return $this->container['seller_carry_back'];
    }

    /**
     * Sets seller_carry_back
     *
     * @param int $seller_carry_back CoreLogic standardized value that indicates if part or all of the mortgage loan is carried by the seller. 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setSellerCarryBack($seller_carry_back)
    {
        $this->container['seller_carry_back'] = $seller_carry_back;

        return $this;
    }

    /**
     * Gets planned_unit_development_rider
     *
     * @return int
     */
    public function getPlannedUnitDevelopmentRider()
    {
        return $this->container['planned_unit_development_rider'];
    }

    /**
     * Sets planned_unit_development_rider
     *
     * @param int $planned_unit_development_rider Indicates if a Planned Unit Development (PUD) Rider was recorded with the mortgage loan. 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setPlannedUnitDevelopmentRider($planned_unit_development_rider)
    {
        $this->container['planned_unit_development_rider'] = $planned_unit_development_rider;

        return $this;
    }

    /**
     * Gets multifamily_rider
     *
     * @return int
     */
    public function getMultifamilyRider()
    {
        return $this->container['multifamily_rider'];
    }

    /**
     * Sets multifamily_rider
     *
     * @param int $multifamily_rider Indicates if a Multifamily Rider was recorded with the mortgage loan. 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setMultifamilyRider($multifamily_rider)
    {
        $this->container['multifamily_rider'] = $multifamily_rider;

        return $this;
    }

    /**
     * Gets condominium_rider
     *
     * @return int
     */
    public function getCondominiumRider()
    {
        return $this->container['condominium_rider'];
    }

    /**
     * Sets condominium_rider
     *
     * @param int $condominium_rider Indicates if a Condominium Rider was recorded with the mortgage loan. 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setCondominiumRider($condominium_rider)
    {
        $this->container['condominium_rider'] = $condominium_rider;

        return $this;
    }

    /**
     * Gets second_home_rider
     *
     * @return int
     */
    public function getSecondHomeRider()
    {
        return $this->container['second_home_rider'];
    }

    /**
     * Sets second_home_rider
     *
     * @param int $second_home_rider Indicates if a Second Home Rider was recorded with the mortgage loan. 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setSecondHomeRider($second_home_rider)
    {
        $this->container['second_home_rider'] = $second_home_rider;

        return $this;
    }

    /**
     * Gets eligible_mortgage_gse
     *
     * @return int
     */
    public function getEligibleMortgageGse()
    {
        return $this->container['eligible_mortgage_gse'];
    }

    /**
     * Sets eligible_mortgage_gse
     *
     * @param int $eligible_mortgage_gse Indicates if a Government Sponsored Enterprise Mortgage Rider was recorded with the mortgage loan. 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setEligibleMortgageGse($eligible_mortgage_gse)
    {
        $this->container['eligible_mortgage_gse'] = $eligible_mortgage_gse;

        return $this;
    }

    /**
     * Gets variable_rider
     *
     * @return string
     */
    public function getVariableRider()
    {
        return $this->container['variable_rider'];
    }

    /**
     * Sets variable_rider
     *
     * @param string $variable_rider CoreLogic standardized value that indicates if the mortgage loan contains an adjustable or variable rate rider. 0 or null = not applicable, 1= applicable.
     *
     * @return $this
     */
    public function setVariableRider($variable_rider)
    {
        $this->container['variable_rider'] = $variable_rider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
