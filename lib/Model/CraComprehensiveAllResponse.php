<?php
/**
 * CraComprehensiveAllResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CraComprehensiveAllResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CraComprehensiveAllResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CraComprehensiveAllResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cra_record_id' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'risk_type_score_group' => 'string',
        'perils' => '\Swagger\Client\Model\CraComprehensiveAllPeril[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cra_record_id' => null,
        'latitude' => null,
        'longitude' => null,
        'risk_type_score_group' => null,
        'perils' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cra_record_id' => 'craRecordId',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'risk_type_score_group' => 'riskTypeScoreGroup',
        'perils' => 'perils'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cra_record_id' => 'setCraRecordId',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'risk_type_score_group' => 'setRiskTypeScoreGroup',
        'perils' => 'setPerils'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cra_record_id' => 'getCraRecordId',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'risk_type_score_group' => 'getRiskTypeScoreGroup',
        'perils' => 'getPerils'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cra_record_id'] = isset($data['cra_record_id']) ? $data['cra_record_id'] : null;
        $this->container['latitude'] = isset($data['latitude']) ? $data['latitude'] : null;
        $this->container['longitude'] = isset($data['longitude']) ? $data['longitude'] : null;
        $this->container['risk_type_score_group'] = isset($data['risk_type_score_group']) ? $data['risk_type_score_group'] : null;
        $this->container['perils'] = isset($data['perils']) ? $data['perils'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cra_record_id
     *
     * @return string
     */
    public function getCraRecordId()
    {
        return $this->container['cra_record_id'];
    }

    /**
     * Sets cra_record_id
     *
     * @param string $cra_record_id An identifier that uniquely identifies a structure or a parcel within this dataset and run date.
     *
     * @return $this
     */
    public function setCraRecordId($cra_record_id)
    {
        $this->container['cra_record_id'] = $cra_record_id;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude CoreLogic proprietary parcel-centroid coordinate that specifies the north-south position of the center point of a parcel. The latitude contains numeric data values only conforming to the mask XX.ZZZZZZ, where the XX are the digits to the left of the decimal point, and ZZZZZZ are the digits to the right of the decimal point. Latitude is always a positive value north on the North American continent.
     *
     * @return $this
     */
    public function setLatitude($latitude)
    {
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude CoreLogic proprietary parcel-centroid coordinate that specifies the east-west position of the center point of a parcel. The longitude contains numeric data values only conforming to the mask -XXX.ZZZZZZ, where the XXX are the numeric digits to the left of the decimal point, and ZZZZZZ are the 6 numeric digits to the right of the decimal point. Longitude is negative on the North American continent.
     *
     * @return $this
     */
    public function setLongitude($longitude)
    {
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets risk_type_score_group
     *
     * @return string
     */
    public function getRiskTypeScoreGroup()
    {
        return $this->container['risk_type_score_group'];
    }

    /**
     * Sets risk_type_score_group
     *
     * @param string $risk_type_score_group Groups where the scores are calculated (SFR, MFR, COM, IND, AGR, MUN - representing Single-Family Residential, Multi-Family Residential, Commercial, Industrial, Agricultural and Municipal).
     *
     * @return $this
     */
    public function setRiskTypeScoreGroup($risk_type_score_group)
    {
        $this->container['risk_type_score_group'] = $risk_type_score_group;

        return $this;
    }

    /**
     * Gets perils
     *
     * @return \Swagger\Client\Model\CraComprehensiveAllPeril[]
     */
    public function getPerils()
    {
        return $this->container['perils'];
    }

    /**
     * Sets perils
     *
     * @param \Swagger\Client\Model\CraComprehensiveAllPeril[] $perils Peril Details
     *
     * @return $this
     */
    public function setPerils($perils)
    {
        $this->container['perils'] = $perils;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
