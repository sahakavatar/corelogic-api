<?php
/**
 * OwnershipTransfersItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OwnershipTransfersItem Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OwnershipTransfersItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OwnershipTransfersItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clip' => 'string',
        'transaction_details' => '\Swagger\Client\Model\TransactionDetails',
        'recorded_property_address' => '\Swagger\Client\Model\RecordedPropertyAddress',
        'title_company' => '\Swagger\Client\Model\TitleCompany',
        'property_details' => '\Swagger\Client\Model\PropertyDetails',
        'land_use_and_zoning_codes' => '\Swagger\Client\Model\LandUseAndZoningCodes',
        'buyer_details' => '\Swagger\Client\Model\BuyerDetails',
        'seller_details' => '\Swagger\Client\Model\SellerDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clip' => null,
        'transaction_details' => null,
        'recorded_property_address' => null,
        'title_company' => null,
        'property_details' => null,
        'land_use_and_zoning_codes' => null,
        'buyer_details' => null,
        'seller_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clip' => 'clip',
        'transaction_details' => 'transactionDetails',
        'recorded_property_address' => 'recordedPropertyAddress',
        'title_company' => 'titleCompany',
        'property_details' => 'propertyDetails',
        'land_use_and_zoning_codes' => 'landUseAndZoningCodes',
        'buyer_details' => 'buyerDetails',
        'seller_details' => 'sellerDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clip' => 'setClip',
        'transaction_details' => 'setTransactionDetails',
        'recorded_property_address' => 'setRecordedPropertyAddress',
        'title_company' => 'setTitleCompany',
        'property_details' => 'setPropertyDetails',
        'land_use_and_zoning_codes' => 'setLandUseAndZoningCodes',
        'buyer_details' => 'setBuyerDetails',
        'seller_details' => 'setSellerDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clip' => 'getClip',
        'transaction_details' => 'getTransactionDetails',
        'recorded_property_address' => 'getRecordedPropertyAddress',
        'title_company' => 'getTitleCompany',
        'property_details' => 'getPropertyDetails',
        'land_use_and_zoning_codes' => 'getLandUseAndZoningCodes',
        'buyer_details' => 'getBuyerDetails',
        'seller_details' => 'getSellerDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clip'] = isset($data['clip']) ? $data['clip'] : null;
        $this->container['transaction_details'] = isset($data['transaction_details']) ? $data['transaction_details'] : null;
        $this->container['recorded_property_address'] = isset($data['recorded_property_address']) ? $data['recorded_property_address'] : null;
        $this->container['title_company'] = isset($data['title_company']) ? $data['title_company'] : null;
        $this->container['property_details'] = isset($data['property_details']) ? $data['property_details'] : null;
        $this->container['land_use_and_zoning_codes'] = isset($data['land_use_and_zoning_codes']) ? $data['land_use_and_zoning_codes'] : null;
        $this->container['buyer_details'] = isset($data['buyer_details']) ? $data['buyer_details'] : null;
        $this->container['seller_details'] = isset($data['seller_details']) ? $data['seller_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clip
     *
     * @return string
     */
    public function getClip()
    {
        return $this->container['clip'];
    }

    /**
     * Sets clip
     *
     * @param string $clip Corelogic Unique identification number assigned to each property.
     *
     * @return $this
     */
    public function setClip($clip)
    {
        $this->container['clip'] = $clip;

        return $this;
    }

    /**
     * Gets transaction_details
     *
     * @return \Swagger\Client\Model\TransactionDetails
     */
    public function getTransactionDetails()
    {
        return $this->container['transaction_details'];
    }

    /**
     * Sets transaction_details
     *
     * @param \Swagger\Client\Model\TransactionDetails $transaction_details transaction_details
     *
     * @return $this
     */
    public function setTransactionDetails($transaction_details)
    {
        $this->container['transaction_details'] = $transaction_details;

        return $this;
    }

    /**
     * Gets recorded_property_address
     *
     * @return \Swagger\Client\Model\RecordedPropertyAddress
     */
    public function getRecordedPropertyAddress()
    {
        return $this->container['recorded_property_address'];
    }

    /**
     * Sets recorded_property_address
     *
     * @param \Swagger\Client\Model\RecordedPropertyAddress $recorded_property_address recorded_property_address
     *
     * @return $this
     */
    public function setRecordedPropertyAddress($recorded_property_address)
    {
        $this->container['recorded_property_address'] = $recorded_property_address;

        return $this;
    }

    /**
     * Gets title_company
     *
     * @return \Swagger\Client\Model\TitleCompany
     */
    public function getTitleCompany()
    {
        return $this->container['title_company'];
    }

    /**
     * Sets title_company
     *
     * @param \Swagger\Client\Model\TitleCompany $title_company title_company
     *
     * @return $this
     */
    public function setTitleCompany($title_company)
    {
        $this->container['title_company'] = $title_company;

        return $this;
    }

    /**
     * Gets property_details
     *
     * @return \Swagger\Client\Model\PropertyDetails
     */
    public function getPropertyDetails()
    {
        return $this->container['property_details'];
    }

    /**
     * Sets property_details
     *
     * @param \Swagger\Client\Model\PropertyDetails $property_details property_details
     *
     * @return $this
     */
    public function setPropertyDetails($property_details)
    {
        $this->container['property_details'] = $property_details;

        return $this;
    }

    /**
     * Gets land_use_and_zoning_codes
     *
     * @return \Swagger\Client\Model\LandUseAndZoningCodes
     */
    public function getLandUseAndZoningCodes()
    {
        return $this->container['land_use_and_zoning_codes'];
    }

    /**
     * Sets land_use_and_zoning_codes
     *
     * @param \Swagger\Client\Model\LandUseAndZoningCodes $land_use_and_zoning_codes land_use_and_zoning_codes
     *
     * @return $this
     */
    public function setLandUseAndZoningCodes($land_use_and_zoning_codes)
    {
        $this->container['land_use_and_zoning_codes'] = $land_use_and_zoning_codes;

        return $this;
    }

    /**
     * Gets buyer_details
     *
     * @return \Swagger\Client\Model\BuyerDetails
     */
    public function getBuyerDetails()
    {
        return $this->container['buyer_details'];
    }

    /**
     * Sets buyer_details
     *
     * @param \Swagger\Client\Model\BuyerDetails $buyer_details buyer_details
     *
     * @return $this
     */
    public function setBuyerDetails($buyer_details)
    {
        $this->container['buyer_details'] = $buyer_details;

        return $this;
    }

    /**
     * Gets seller_details
     *
     * @return \Swagger\Client\Model\SellerDetails
     */
    public function getSellerDetails()
    {
        return $this->container['seller_details'];
    }

    /**
     * Sets seller_details
     *
     * @param \Swagger\Client\Model\SellerDetails $seller_details seller_details
     *
     * @return $this
     */
    public function setSellerDetails($seller_details)
    {
        $this->container['seller_details'] = $seller_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
