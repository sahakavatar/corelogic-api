<?php
/**
 * PropertySearchDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertySearchDetail Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertySearchDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PropertySearchDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clip' => 'string',
        'v1_property_id' => 'string',
        'client_echo_id' => 'string',
        'location' => '\Swagger\Client\Model\Location',
        'property_address' => '\Swagger\Client\Model\PropertySearchAddress',
        'property_apn' => '\Swagger\Client\Model\PropertyApn',
        'address_match_information' => '\Swagger\Client\Model\PropertyAddressMatchInformation'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clip' => null,
        'v1_property_id' => null,
        'client_echo_id' => null,
        'location' => null,
        'property_address' => null,
        'property_apn' => null,
        'address_match_information' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clip' => 'clip',
        'v1_property_id' => 'v1PropertyId',
        'client_echo_id' => 'clientEchoId',
        'location' => 'location',
        'property_address' => 'propertyAddress',
        'property_apn' => 'propertyAPN',
        'address_match_information' => 'addressMatchInformation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clip' => 'setClip',
        'v1_property_id' => 'setV1PropertyId',
        'client_echo_id' => 'setClientEchoId',
        'location' => 'setLocation',
        'property_address' => 'setPropertyAddress',
        'property_apn' => 'setPropertyApn',
        'address_match_information' => 'setAddressMatchInformation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clip' => 'getClip',
        'v1_property_id' => 'getV1PropertyId',
        'client_echo_id' => 'getClientEchoId',
        'location' => 'getLocation',
        'property_address' => 'getPropertyAddress',
        'property_apn' => 'getPropertyApn',
        'address_match_information' => 'getAddressMatchInformation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clip'] = isset($data['clip']) ? $data['clip'] : null;
        $this->container['v1_property_id'] = isset($data['v1_property_id']) ? $data['v1_property_id'] : null;
        $this->container['client_echo_id'] = isset($data['client_echo_id']) ? $data['client_echo_id'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['property_address'] = isset($data['property_address']) ? $data['property_address'] : null;
        $this->container['property_apn'] = isset($data['property_apn']) ? $data['property_apn'] : null;
        $this->container['address_match_information'] = isset($data['address_match_information']) ? $data['address_match_information'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clip
     *
     * @return string
     */
    public function getClip()
    {
        return $this->container['clip'];
    }

    /**
     * Sets clip
     *
     * @param string $clip CoreLogic Unique identification number assigned to each property.
     *
     * @return $this
     */
    public function setClip($clip)
    {
        $this->container['clip'] = $clip;

        return $this;
    }

    /**
     * Gets v1_property_id
     *
     * @return string
     */
    public function getV1PropertyId()
    {
        return $this->container['v1_property_id'];
    }

    /**
     * Sets v1_property_id
     *
     * @param string $v1_property_id Unique identification number assigned to each property in Legacy application.
     *
     * @return $this
     */
    public function setV1PropertyId($v1_property_id)
    {
        $this->container['v1_property_id'] = $v1_property_id;

        return $this;
    }

    /**
     * Gets client_echo_id
     *
     * @return string
     */
    public function getClientEchoId()
    {
        return $this->container['client_echo_id'];
    }

    /**
     * Sets client_echo_id
     *
     * @param string $client_echo_id UID number assigned to each property search.
     *
     * @return $this
     */
    public function setClientEchoId($client_echo_id)
    {
        $this->container['client_echo_id'] = $client_echo_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\Location $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets property_address
     *
     * @return \Swagger\Client\Model\PropertySearchAddress
     */
    public function getPropertyAddress()
    {
        return $this->container['property_address'];
    }

    /**
     * Sets property_address
     *
     * @param \Swagger\Client\Model\PropertySearchAddress $property_address property_address
     *
     * @return $this
     */
    public function setPropertyAddress($property_address)
    {
        $this->container['property_address'] = $property_address;

        return $this;
    }

    /**
     * Gets property_apn
     *
     * @return \Swagger\Client\Model\PropertyApn
     */
    public function getPropertyApn()
    {
        return $this->container['property_apn'];
    }

    /**
     * Sets property_apn
     *
     * @param \Swagger\Client\Model\PropertyApn $property_apn property_apn
     *
     * @return $this
     */
    public function setPropertyApn($property_apn)
    {
        $this->container['property_apn'] = $property_apn;

        return $this;
    }

    /**
     * Gets address_match_information
     *
     * @return \Swagger\Client\Model\PropertyAddressMatchInformation
     */
    public function getAddressMatchInformation()
    {
        return $this->container['address_match_information'];
    }

    /**
     * Sets address_match_information
     *
     * @param \Swagger\Client\Model\PropertyAddressMatchInformation $address_match_information address_match_information
     *
     * @return $this
     */
    public function setAddressMatchInformation($address_match_information)
    {
        $this->container['address_match_information'] = $address_match_information;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
