<?php
/**
 * AssessedValue
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AssessedValue Class Doc Comment
 *
 * @category Class
 * @description Assessed Value.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AssessedValue implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AssessedValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tax_assessed_year' => 'int',
        'calculated_total_value' => 'float',
        'calculated_land_value' => 'float',
        'calculated_improvement_value' => 'float',
        'calculated_improvement_value_percentage' => 'int',
        'calculated_total_value_source_code' => 'string',
        'taxable_value' => 'float',
        'taxable_improvement_value' => 'float',
        'taxable_land_value' => 'float',
        'taxable_other_value' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tax_assessed_year' => 'int32',
        'calculated_total_value' => null,
        'calculated_land_value' => null,
        'calculated_improvement_value' => null,
        'calculated_improvement_value_percentage' => 'int32',
        'calculated_total_value_source_code' => null,
        'taxable_value' => null,
        'taxable_improvement_value' => null,
        'taxable_land_value' => null,
        'taxable_other_value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tax_assessed_year' => 'taxAssessedYear',
        'calculated_total_value' => 'calculatedTotalValue',
        'calculated_land_value' => 'calculatedLandValue',
        'calculated_improvement_value' => 'calculatedImprovementValue',
        'calculated_improvement_value_percentage' => 'calculatedImprovementValuePercentage',
        'calculated_total_value_source_code' => 'calculatedTotalValueSourceCode',
        'taxable_value' => 'taxableValue',
        'taxable_improvement_value' => 'taxableImprovementValue',
        'taxable_land_value' => 'taxableLandValue',
        'taxable_other_value' => 'taxableOtherValue'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tax_assessed_year' => 'setTaxAssessedYear',
        'calculated_total_value' => 'setCalculatedTotalValue',
        'calculated_land_value' => 'setCalculatedLandValue',
        'calculated_improvement_value' => 'setCalculatedImprovementValue',
        'calculated_improvement_value_percentage' => 'setCalculatedImprovementValuePercentage',
        'calculated_total_value_source_code' => 'setCalculatedTotalValueSourceCode',
        'taxable_value' => 'setTaxableValue',
        'taxable_improvement_value' => 'setTaxableImprovementValue',
        'taxable_land_value' => 'setTaxableLandValue',
        'taxable_other_value' => 'setTaxableOtherValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tax_assessed_year' => 'getTaxAssessedYear',
        'calculated_total_value' => 'getCalculatedTotalValue',
        'calculated_land_value' => 'getCalculatedLandValue',
        'calculated_improvement_value' => 'getCalculatedImprovementValue',
        'calculated_improvement_value_percentage' => 'getCalculatedImprovementValuePercentage',
        'calculated_total_value_source_code' => 'getCalculatedTotalValueSourceCode',
        'taxable_value' => 'getTaxableValue',
        'taxable_improvement_value' => 'getTaxableImprovementValue',
        'taxable_land_value' => 'getTaxableLandValue',
        'taxable_other_value' => 'getTaxableOtherValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tax_assessed_year'] = isset($data['tax_assessed_year']) ? $data['tax_assessed_year'] : null;
        $this->container['calculated_total_value'] = isset($data['calculated_total_value']) ? $data['calculated_total_value'] : null;
        $this->container['calculated_land_value'] = isset($data['calculated_land_value']) ? $data['calculated_land_value'] : null;
        $this->container['calculated_improvement_value'] = isset($data['calculated_improvement_value']) ? $data['calculated_improvement_value'] : null;
        $this->container['calculated_improvement_value_percentage'] = isset($data['calculated_improvement_value_percentage']) ? $data['calculated_improvement_value_percentage'] : null;
        $this->container['calculated_total_value_source_code'] = isset($data['calculated_total_value_source_code']) ? $data['calculated_total_value_source_code'] : null;
        $this->container['taxable_value'] = isset($data['taxable_value']) ? $data['taxable_value'] : null;
        $this->container['taxable_improvement_value'] = isset($data['taxable_improvement_value']) ? $data['taxable_improvement_value'] : null;
        $this->container['taxable_land_value'] = isset($data['taxable_land_value']) ? $data['taxable_land_value'] : null;
        $this->container['taxable_other_value'] = isset($data['taxable_other_value']) ? $data['taxable_other_value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tax_assessed_year
     *
     * @return int
     */
    public function getTaxAssessedYear()
    {
        return $this->container['tax_assessed_year'];
    }

    /**
     * Sets tax_assessed_year
     *
     * @param int $tax_assessed_year The assessment year for which the taxes were billed.
     *
     * @return $this
     */
    public function setTaxAssessedYear($tax_assessed_year)
    {
        $this->container['tax_assessed_year'] = $tax_assessed_year;

        return $this;
    }

    /**
     * Gets calculated_total_value
     *
     * @return float
     */
    public function getCalculatedTotalValue()
    {
        return $this->container['calculated_total_value'];
    }

    /**
     * Sets calculated_total_value
     *
     * @param float $calculated_total_value The \"TOTAL\" (i.e., Land + Improvement) Value closest to current market value used for assessment by county or local taxing authorities.
     *
     * @return $this
     */
    public function setCalculatedTotalValue($calculated_total_value)
    {
        $this->container['calculated_total_value'] = $calculated_total_value;

        return $this;
    }

    /**
     * Gets calculated_land_value
     *
     * @return float
     */
    public function getCalculatedLandValue()
    {
        return $this->container['calculated_land_value'];
    }

    /**
     * Sets calculated_land_value
     *
     * @param float $calculated_land_value The \"LAND\" Value closest to current market value used for assessment by county or local taxing authorities.
     *
     * @return $this
     */
    public function setCalculatedLandValue($calculated_land_value)
    {
        $this->container['calculated_land_value'] = $calculated_land_value;

        return $this;
    }

    /**
     * Gets calculated_improvement_value
     *
     * @return float
     */
    public function getCalculatedImprovementValue()
    {
        return $this->container['calculated_improvement_value'];
    }

    /**
     * Sets calculated_improvement_value
     *
     * @param float $calculated_improvement_value The \"IMPROVEMENT\" Value closest to current market value used for assessment by county or local taxing authorities.
     *
     * @return $this
     */
    public function setCalculatedImprovementValue($calculated_improvement_value)
    {
        $this->container['calculated_improvement_value'] = $calculated_improvement_value;

        return $this;
    }

    /**
     * Gets calculated_improvement_value_percentage
     *
     * @return int
     */
    public function getCalculatedImprovementValuePercentage()
    {
        return $this->container['calculated_improvement_value_percentage'];
    }

    /**
     * Sets calculated_improvement_value_percentage
     *
     * @param int $calculated_improvement_value_percentage The \"IMPROVEMENT\" percentage indicates the percentage of assessed value allocated to improvements.
     *
     * @return $this
     */
    public function setCalculatedImprovementValuePercentage($calculated_improvement_value_percentage)
    {
        $this->container['calculated_improvement_value_percentage'] = $calculated_improvement_value_percentage;

        return $this;
    }

    /**
     * Gets calculated_total_value_source_code
     *
     * @return string
     */
    public function getCalculatedTotalValueSourceCode()
    {
        return $this->container['calculated_total_value_source_code'];
    }

    /**
     * Sets calculated_total_value_source_code
     *
     * @param string $calculated_total_value_source_code The code appearing in this indicator field reflects the type of values used to seed the TOTAL VALUE CALCULATED field (i.e., A = Assessed, M = Market, P = Appraised, T = Transitional).
     *
     * @return $this
     */
    public function setCalculatedTotalValueSourceCode($calculated_total_value_source_code)
    {
        $this->container['calculated_total_value_source_code'] = $calculated_total_value_source_code;

        return $this;
    }

    /**
     * Gets taxable_value
     *
     * @return float
     */
    public function getTaxableValue()
    {
        return $this->container['taxable_value'];
    }

    /**
     * Sets taxable_value
     *
     * @param float $taxable_value Assessed value less exemptions. Value on which property taxes are based.
     *
     * @return $this
     */
    public function setTaxableValue($taxable_value)
    {
        $this->container['taxable_value'] = $taxable_value;

        return $this;
    }

    /**
     * Gets taxable_improvement_value
     *
     * @return float
     */
    public function getTaxableImprovementValue()
    {
        return $this->container['taxable_improvement_value'];
    }

    /**
     * Sets taxable_improvement_value
     *
     * @param float $taxable_improvement_value County provided value of the improvement applied to the parcel used in the calculation of the tax bill.
     *
     * @return $this
     */
    public function setTaxableImprovementValue($taxable_improvement_value)
    {
        $this->container['taxable_improvement_value'] = $taxable_improvement_value;

        return $this;
    }

    /**
     * Gets taxable_land_value
     *
     * @return float
     */
    public function getTaxableLandValue()
    {
        return $this->container['taxable_land_value'];
    }

    /**
     * Sets taxable_land_value
     *
     * @param float $taxable_land_value County provided land value of a parcel used in the calculation of the tax bill.
     *
     * @return $this
     */
    public function setTaxableLandValue($taxable_land_value)
    {
        $this->container['taxable_land_value'] = $taxable_land_value;

        return $this;
    }

    /**
     * Gets taxable_other_value
     *
     * @return float
     */
    public function getTaxableOtherValue()
    {
        return $this->container['taxable_other_value'];
    }

    /**
     * Sets taxable_other_value
     *
     * @param float $taxable_other_value County provided land value of fixture, features or miscellaneous values used in the calculation of the tax bill.
     *
     * @return $this
     */
    public function setTaxableOtherValue($taxable_other_value)
    {
        $this->container['taxable_other_value'] = $taxable_other_value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
