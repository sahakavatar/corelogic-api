<?php
/**
 * ClimateRiskAR6OccurrenceExceedanceProbabilityTvar
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ClimateRiskAR6OccurrenceExceedanceProbabilityTvar Class Doc Comment
 *
 * @category Class
 * @description Occurrence Exceedance Probability Tvar Details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClimateRiskAR6OccurrenceExceedanceProbabilityTvar implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClimateRiskAR6OccurrenceExceedanceProbabilityTvar';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'oep50_tvar' => 'float',
        'oep100_tvar' => 'float',
        'oep200_tvar' => 'float',
        'oep500_tvar' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'oep50_tvar' => null,
        'oep100_tvar' => null,
        'oep200_tvar' => null,
        'oep500_tvar' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'oep50_tvar' => 'oep50Tvar',
        'oep100_tvar' => 'oep100Tvar',
        'oep200_tvar' => 'oep200Tvar',
        'oep500_tvar' => 'oep500Tvar'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'oep50_tvar' => 'setOep50Tvar',
        'oep100_tvar' => 'setOep100Tvar',
        'oep200_tvar' => 'setOep200Tvar',
        'oep500_tvar' => 'setOep500Tvar'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'oep50_tvar' => 'getOep50Tvar',
        'oep100_tvar' => 'getOep100Tvar',
        'oep200_tvar' => 'getOep200Tvar',
        'oep500_tvar' => 'getOep500Tvar'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['oep50_tvar'] = isset($data['oep50_tvar']) ? $data['oep50_tvar'] : null;
        $this->container['oep100_tvar'] = isset($data['oep100_tvar']) ? $data['oep100_tvar'] : null;
        $this->container['oep200_tvar'] = isset($data['oep200_tvar']) ? $data['oep200_tvar'] : null;
        $this->container['oep500_tvar'] = isset($data['oep500_tvar']) ? $data['oep500_tvar'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets oep50_tvar
     *
     * @return float
     */
    public function getOep50Tvar()
    {
        return $this->container['oep50_tvar'];
    }

    /**
     * Sets oep50_tvar
     *
     * @param float $oep50_tvar 50-Year Occurrence Exceedance Probability Tail Value-at-Risk. Average of all losses above the level with a 1-in-50 (2%) chance of being exceeded in any given year, based on the largest loss each year and the potential for extreme losses.
     *
     * @return $this
     */
    public function setOep50Tvar($oep50_tvar)
    {
        $this->container['oep50_tvar'] = $oep50_tvar;

        return $this;
    }

    /**
     * Gets oep100_tvar
     *
     * @return float
     */
    public function getOep100Tvar()
    {
        return $this->container['oep100_tvar'];
    }

    /**
     * Sets oep100_tvar
     *
     * @param float $oep100_tvar 100-Year Occurrence Exceedance Probability Tail Value-at-Risk. Average of all losses above the level with a 1-in-100 (1%) chance of being exceeded in any given year, based on the largest loss each year and the potential for extreme losses.
     *
     * @return $this
     */
    public function setOep100Tvar($oep100_tvar)
    {
        $this->container['oep100_tvar'] = $oep100_tvar;

        return $this;
    }

    /**
     * Gets oep200_tvar
     *
     * @return float
     */
    public function getOep200Tvar()
    {
        return $this->container['oep200_tvar'];
    }

    /**
     * Sets oep200_tvar
     *
     * @param float $oep200_tvar 200-Year Occurrence Exceedance Probability Tail Value-at-Risk. Average of all losses above the level with a 1-in-200 (0.5%) chance of being exceeded in any given year, based on the largest loss each year and the potential for extreme losses. Applies to AR6 SSPs only.
     *
     * @return $this
     */
    public function setOep200Tvar($oep200_tvar)
    {
        $this->container['oep200_tvar'] = $oep200_tvar;

        return $this;
    }

    /**
     * Gets oep500_tvar
     *
     * @return float
     */
    public function getOep500Tvar()
    {
        return $this->container['oep500_tvar'];
    }

    /**
     * Sets oep500_tvar
     *
     * @param float $oep500_tvar 500-Year Occurrence Exceedance Probability Tail Value-at-Risk. Average of all losses above the level with a 1-in-500 (0.2%) chance of being exceeded in any given year, based on the largest loss each year and the potential for extreme losses.
     *
     * @return $this
     */
    public function setOep500Tvar($oep500_tvar)
    {
        $this->container['oep500_tvar'] = $oep500_tvar;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
