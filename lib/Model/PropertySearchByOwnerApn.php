<?php
/**
 * PropertySearchByOwnerApn
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PropertySearchByOwnerApn Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertySearchByOwnerApn implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PropertySearchByOwnerApn';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fips_code' => 'string',
        'apn_sequence_number' => 'int',
        'apn_parcel_number_unformatted' => 'string',
        'apn_parcel_number_formatted' => 'string',
        'previous_apn_unformatted' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fips_code' => null,
        'apn_sequence_number' => 'int64',
        'apn_parcel_number_unformatted' => null,
        'apn_parcel_number_formatted' => null,
        'previous_apn_unformatted' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fips_code' => 'fipsCode',
        'apn_sequence_number' => 'apnSequenceNumber',
        'apn_parcel_number_unformatted' => 'apnParcelNumberUnformatted',
        'apn_parcel_number_formatted' => 'apnParcelNumberFormatted',
        'previous_apn_unformatted' => 'previousApnUnformatted'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fips_code' => 'setFipsCode',
        'apn_sequence_number' => 'setApnSequenceNumber',
        'apn_parcel_number_unformatted' => 'setApnParcelNumberUnformatted',
        'apn_parcel_number_formatted' => 'setApnParcelNumberFormatted',
        'previous_apn_unformatted' => 'setPreviousApnUnformatted'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fips_code' => 'getFipsCode',
        'apn_sequence_number' => 'getApnSequenceNumber',
        'apn_parcel_number_unformatted' => 'getApnParcelNumberUnformatted',
        'apn_parcel_number_formatted' => 'getApnParcelNumberFormatted',
        'previous_apn_unformatted' => 'getPreviousApnUnformatted'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fips_code'] = isset($data['fips_code']) ? $data['fips_code'] : null;
        $this->container['apn_sequence_number'] = isset($data['apn_sequence_number']) ? $data['apn_sequence_number'] : null;
        $this->container['apn_parcel_number_unformatted'] = isset($data['apn_parcel_number_unformatted']) ? $data['apn_parcel_number_unformatted'] : null;
        $this->container['apn_parcel_number_formatted'] = isset($data['apn_parcel_number_formatted']) ? $data['apn_parcel_number_formatted'] : null;
        $this->container['previous_apn_unformatted'] = isset($data['previous_apn_unformatted']) ? $data['previous_apn_unformatted'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fips_code
     *
     * @return string
     */
    public function getFipsCode()
    {
        return $this->container['fips_code'];
    }

    /**
     * Sets fips_code
     *
     * @param string $fips_code Federal Information Processing Standards codes used nationally to numerically identify a specific county or political jurisdiction.
     *
     * @return $this
     */
    public function setFipsCode($fips_code)
    {
        $this->container['fips_code'] = $fips_code;

        return $this;
    }

    /**
     * Gets apn_sequence_number
     *
     * @return int
     */
    public function getApnSequenceNumber()
    {
        return $this->container['apn_sequence_number'];
    }

    /**
     * Sets apn_sequence_number
     *
     * @param int $apn_sequence_number This internal sequence number is used to ensure uniqueness of the Assessor's Parcel Number.
     *
     * @return $this
     */
    public function setApnSequenceNumber($apn_sequence_number)
    {
        $this->container['apn_sequence_number'] = $apn_sequence_number;

        return $this;
    }

    /**
     * Gets apn_parcel_number_unformatted
     *
     * @return string
     */
    public function getApnParcelNumberUnformatted()
    {
        return $this->container['apn_parcel_number_unformatted'];
    }

    /**
     * Sets apn_parcel_number_unformatted
     *
     * @param string $apn_parcel_number_unformatted Assessor's Parcel Number in an unformatted form. This is most often used by the county and others as a unique key.
     *
     * @return $this
     */
    public function setApnParcelNumberUnformatted($apn_parcel_number_unformatted)
    {
        $this->container['apn_parcel_number_unformatted'] = $apn_parcel_number_unformatted;

        return $this;
    }

    /**
     * Gets apn_parcel_number_formatted
     *
     * @return string
     */
    public function getApnParcelNumberFormatted()
    {
        return $this->container['apn_parcel_number_formatted'];
    }

    /**
     * Sets apn_parcel_number_formatted
     *
     * @param string $apn_parcel_number_formatted Assessor's Parcel Number in a formatted form. This is most often used by the county and others as a unique key.
     *
     * @return $this
     */
    public function setApnParcelNumberFormatted($apn_parcel_number_formatted)
    {
        $this->container['apn_parcel_number_formatted'] = $apn_parcel_number_formatted;

        return $this;
    }

    /**
     * Gets previous_apn_unformatted
     *
     * @return string
     */
    public function getPreviousApnUnformatted()
    {
        return $this->container['previous_apn_unformatted'];
    }

    /**
     * Sets previous_apn_unformatted
     *
     * @param string $previous_apn_unformatted The prior parcel number if the county changed the number in the last year. Otherwise, the field will be empty.
     *
     * @return $this
     */
    public function setPreviousApnUnformatted($previous_apn_unformatted)
    {
        $this->container['previous_apn_unformatted'] = $previous_apn_unformatted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
