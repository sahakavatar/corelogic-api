<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @description Items.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Item implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'clip' => 'string',
        'tax_amount' => '\Swagger\Client\Model\TaxAmount',
        'tax_exemptions' => '\Swagger\Client\Model\TaxExemptions',
        'assessed_value' => '\Swagger\Client\Model\AssessedValue',
        'taxroll_update' => '\Swagger\Client\Model\TaxrollUpdate',
        'school_districts' => '\Swagger\Client\Model\SchoolDistricts',
        'service_districts' => '\Swagger\Client\Model\ServiceDistricts'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'clip' => null,
        'tax_amount' => null,
        'tax_exemptions' => null,
        'assessed_value' => null,
        'taxroll_update' => null,
        'school_districts' => null,
        'service_districts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'clip' => 'clip',
        'tax_amount' => 'taxAmount',
        'tax_exemptions' => 'taxExemptions',
        'assessed_value' => 'assessedValue',
        'taxroll_update' => 'taxrollUpdate',
        'school_districts' => 'schoolDistricts',
        'service_districts' => 'serviceDistricts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'clip' => 'setClip',
        'tax_amount' => 'setTaxAmount',
        'tax_exemptions' => 'setTaxExemptions',
        'assessed_value' => 'setAssessedValue',
        'taxroll_update' => 'setTaxrollUpdate',
        'school_districts' => 'setSchoolDistricts',
        'service_districts' => 'setServiceDistricts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'clip' => 'getClip',
        'tax_amount' => 'getTaxAmount',
        'tax_exemptions' => 'getTaxExemptions',
        'assessed_value' => 'getAssessedValue',
        'taxroll_update' => 'getTaxrollUpdate',
        'school_districts' => 'getSchoolDistricts',
        'service_districts' => 'getServiceDistricts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['clip'] = isset($data['clip']) ? $data['clip'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['tax_exemptions'] = isset($data['tax_exemptions']) ? $data['tax_exemptions'] : null;
        $this->container['assessed_value'] = isset($data['assessed_value']) ? $data['assessed_value'] : null;
        $this->container['taxroll_update'] = isset($data['taxroll_update']) ? $data['taxroll_update'] : null;
        $this->container['school_districts'] = isset($data['school_districts']) ? $data['school_districts'] : null;
        $this->container['service_districts'] = isset($data['service_districts']) ? $data['service_districts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets clip
     *
     * @return string
     */
    public function getClip()
    {
        return $this->container['clip'];
    }

    /**
     * Sets clip
     *
     * @param string $clip Unique identification number assigned to each property.
     *
     * @return $this
     */
    public function setClip($clip)
    {
        $this->container['clip'] = $clip;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return \Swagger\Client\Model\TaxAmount
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param \Swagger\Client\Model\TaxAmount $tax_amount tax_amount
     *
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets tax_exemptions
     *
     * @return \Swagger\Client\Model\TaxExemptions
     */
    public function getTaxExemptions()
    {
        return $this->container['tax_exemptions'];
    }

    /**
     * Sets tax_exemptions
     *
     * @param \Swagger\Client\Model\TaxExemptions $tax_exemptions tax_exemptions
     *
     * @return $this
     */
    public function setTaxExemptions($tax_exemptions)
    {
        $this->container['tax_exemptions'] = $tax_exemptions;

        return $this;
    }

    /**
     * Gets assessed_value
     *
     * @return \Swagger\Client\Model\AssessedValue
     */
    public function getAssessedValue()
    {
        return $this->container['assessed_value'];
    }

    /**
     * Sets assessed_value
     *
     * @param \Swagger\Client\Model\AssessedValue $assessed_value assessed_value
     *
     * @return $this
     */
    public function setAssessedValue($assessed_value)
    {
        $this->container['assessed_value'] = $assessed_value;

        return $this;
    }

    /**
     * Gets taxroll_update
     *
     * @return \Swagger\Client\Model\TaxrollUpdate
     */
    public function getTaxrollUpdate()
    {
        return $this->container['taxroll_update'];
    }

    /**
     * Sets taxroll_update
     *
     * @param \Swagger\Client\Model\TaxrollUpdate $taxroll_update taxroll_update
     *
     * @return $this
     */
    public function setTaxrollUpdate($taxroll_update)
    {
        $this->container['taxroll_update'] = $taxroll_update;

        return $this;
    }

    /**
     * Gets school_districts
     *
     * @return \Swagger\Client\Model\SchoolDistricts
     */
    public function getSchoolDistricts()
    {
        return $this->container['school_districts'];
    }

    /**
     * Sets school_districts
     *
     * @param \Swagger\Client\Model\SchoolDistricts $school_districts school_districts
     *
     * @return $this
     */
    public function setSchoolDistricts($school_districts)
    {
        $this->container['school_districts'] = $school_districts;

        return $this;
    }

    /**
     * Gets service_districts
     *
     * @return \Swagger\Client\Model\ServiceDistricts
     */
    public function getServiceDistricts()
    {
        return $this->container['service_districts'];
    }

    /**
     * Sets service_districts
     *
     * @param \Swagger\Client\Model\ServiceDistricts $service_districts service_districts
     *
     * @return $this
     */
    public function setServiceDistricts($service_districts)
    {
        $this->container['service_districts'] = $service_districts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
