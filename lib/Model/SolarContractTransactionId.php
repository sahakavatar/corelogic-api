<?php
/**
 * SolarContractTransactionId
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SolarContractTransactionId Class Doc Comment
 *
 * @category Class
 * @description Solar Contract Transaction Id
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SolarContractTransactionId implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SolarContractTransactionId';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'solar_contract_transaction_fips_code' => 'string',
        'solar_contract_transaction_apn' => 'string',
        'solar_contract_record_id' => 'int',
        'solar_contract_multi_or_split_parcel_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'solar_contract_transaction_fips_code' => null,
        'solar_contract_transaction_apn' => null,
        'solar_contract_record_id' => 'int32',
        'solar_contract_multi_or_split_parcel_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'solar_contract_transaction_fips_code' => 'solarContractTransactionFipsCode',
        'solar_contract_transaction_apn' => 'solarContractTransactionApn',
        'solar_contract_record_id' => 'solarContractRecordId',
        'solar_contract_multi_or_split_parcel_code' => 'solarContractMultiOrSplitParcelCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'solar_contract_transaction_fips_code' => 'setSolarContractTransactionFipsCode',
        'solar_contract_transaction_apn' => 'setSolarContractTransactionApn',
        'solar_contract_record_id' => 'setSolarContractRecordId',
        'solar_contract_multi_or_split_parcel_code' => 'setSolarContractMultiOrSplitParcelCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'solar_contract_transaction_fips_code' => 'getSolarContractTransactionFipsCode',
        'solar_contract_transaction_apn' => 'getSolarContractTransactionApn',
        'solar_contract_record_id' => 'getSolarContractRecordId',
        'solar_contract_multi_or_split_parcel_code' => 'getSolarContractMultiOrSplitParcelCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['solar_contract_transaction_fips_code'] = isset($data['solar_contract_transaction_fips_code']) ? $data['solar_contract_transaction_fips_code'] : null;
        $this->container['solar_contract_transaction_apn'] = isset($data['solar_contract_transaction_apn']) ? $data['solar_contract_transaction_apn'] : null;
        $this->container['solar_contract_record_id'] = isset($data['solar_contract_record_id']) ? $data['solar_contract_record_id'] : null;
        $this->container['solar_contract_multi_or_split_parcel_code'] = isset($data['solar_contract_multi_or_split_parcel_code']) ? $data['solar_contract_multi_or_split_parcel_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets solar_contract_transaction_fips_code
     *
     * @return string
     */
    public function getSolarContractTransactionFipsCode()
    {
        return $this->container['solar_contract_transaction_fips_code'];
    }

    /**
     * Sets solar_contract_transaction_fips_code
     *
     * @param string $solar_contract_transaction_fips_code Federal Information Processing Standards codes used nationally to numerically identify a specific county or political jurisdiction.
     *
     * @return $this
     */
    public function setSolarContractTransactionFipsCode($solar_contract_transaction_fips_code)
    {
        $this->container['solar_contract_transaction_fips_code'] = $solar_contract_transaction_fips_code;

        return $this;
    }

    /**
     * Gets solar_contract_transaction_apn
     *
     * @return string
     */
    public function getSolarContractTransactionApn()
    {
        return $this->container['solar_contract_transaction_apn'];
    }

    /**
     * Sets solar_contract_transaction_apn
     *
     * @param string $solar_contract_transaction_apn Unique transaction key comprised of FIPS Code, Transaction Batch Date, Transaction Sequence Number, and either Mortgage Sequence Number if record reflects mortgage data content or '000' if record does not reflect mortgage data content.
     *
     * @return $this
     */
    public function setSolarContractTransactionApn($solar_contract_transaction_apn)
    {
        $this->container['solar_contract_transaction_apn'] = $solar_contract_transaction_apn;

        return $this;
    }

    /**
     * Gets solar_contract_record_id
     *
     * @return int
     */
    public function getSolarContractRecordId()
    {
        return $this->container['solar_contract_record_id'];
    }

    /**
     * Sets solar_contract_record_id
     *
     * @param int $solar_contract_record_id Unique record identifier.
     *
     * @return $this
     */
    public function setSolarContractRecordId($solar_contract_record_id)
    {
        $this->container['solar_contract_record_id'] = $solar_contract_record_id;

        return $this;
    }

    /**
     * Gets solar_contract_multi_or_split_parcel_code
     *
     * @return string
     */
    public function getSolarContractMultiOrSplitParcelCode()
    {
        return $this->container['solar_contract_multi_or_split_parcel_code'];
    }

    /**
     * Sets solar_contract_multi_or_split_parcel_code
     *
     * @param string $solar_contract_multi_or_split_parcel_code Indicates either that the transaction involves multiple parcels, or the split of an existing parcel.
     *
     * @return $this
     */
    public function setSolarContractMultiOrSplitParcelCode($solar_contract_multi_or_split_parcel_code)
    {
        $this->container['solar_contract_multi_or_split_parcel_code'] = $solar_contract_multi_or_split_parcel_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
