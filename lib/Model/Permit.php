<?php
/**
 * Permit
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Permit Class Doc Comment
 *
 * @category Class
 * @description Permit.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Permit implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Permit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'number' => 'string',
        'most_recent_status_source' => 'string',
        'building_permit_status' => '\Swagger\Client\Model\BuildingPermitStatus[]',
        'expiration_date' => 'string',
        'filing_fees' => 'float',
        'units_count' => 'int',
        'stories_count' => 'int',
        'area_square_feet' => 'int',
        'home_owner_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'number' => null,
        'most_recent_status_source' => null,
        'building_permit_status' => null,
        'expiration_date' => null,
        'filing_fees' => null,
        'units_count' => 'int32',
        'stories_count' => 'int32',
        'area_square_feet' => 'int32',
        'home_owner_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'number' => 'number',
        'most_recent_status_source' => 'mostRecentStatusSource',
        'building_permit_status' => 'buildingPermitStatus',
        'expiration_date' => 'expirationDate',
        'filing_fees' => 'filingFees',
        'units_count' => 'unitsCount',
        'stories_count' => 'storiesCount',
        'area_square_feet' => 'areaSquareFeet',
        'home_owner_name' => 'homeOwnerName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'most_recent_status_source' => 'setMostRecentStatusSource',
        'building_permit_status' => 'setBuildingPermitStatus',
        'expiration_date' => 'setExpirationDate',
        'filing_fees' => 'setFilingFees',
        'units_count' => 'setUnitsCount',
        'stories_count' => 'setStoriesCount',
        'area_square_feet' => 'setAreaSquareFeet',
        'home_owner_name' => 'setHomeOwnerName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'most_recent_status_source' => 'getMostRecentStatusSource',
        'building_permit_status' => 'getBuildingPermitStatus',
        'expiration_date' => 'getExpirationDate',
        'filing_fees' => 'getFilingFees',
        'units_count' => 'getUnitsCount',
        'stories_count' => 'getStoriesCount',
        'area_square_feet' => 'getAreaSquareFeet',
        'home_owner_name' => 'getHomeOwnerName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['most_recent_status_source'] = isset($data['most_recent_status_source']) ? $data['most_recent_status_source'] : null;
        $this->container['building_permit_status'] = isset($data['building_permit_status']) ? $data['building_permit_status'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['filing_fees'] = isset($data['filing_fees']) ? $data['filing_fees'] : null;
        $this->container['units_count'] = isset($data['units_count']) ? $data['units_count'] : null;
        $this->container['stories_count'] = isset($data['stories_count']) ? $data['stories_count'] : null;
        $this->container['area_square_feet'] = isset($data['area_square_feet']) ? $data['area_square_feet'] : null;
        $this->container['home_owner_name'] = isset($data['home_owner_name']) ? $data['home_owner_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The unique proprietary identifier assigned to each Building Permit entity. The Property entity's Building Permit entity matches are reconciled onto this identifier.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number The official permit number as provided by the permit issuing agency.
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets most_recent_status_source
     *
     * @return string
     */
    public function getMostRecentStatusSource()
    {
        return $this->container['most_recent_status_source'];
    }

    /**
     * Sets most_recent_status_source
     *
     * @param string $most_recent_status_source The most recent stage of the permit in the building and approval process, standardized. This is paired with Permit Effective Date.
     *
     * @return $this
     */
    public function setMostRecentStatusSource($most_recent_status_source)
    {
        $this->container['most_recent_status_source'] = $most_recent_status_source;

        return $this;
    }

    /**
     * Gets building_permit_status
     *
     * @return \Swagger\Client\Model\BuildingPermitStatus[]
     */
    public function getBuildingPermitStatus()
    {
        return $this->container['building_permit_status'];
    }

    /**
     * Sets building_permit_status
     *
     * @param \Swagger\Client\Model\BuildingPermitStatus[] $building_permit_status building_permit_status
     *
     * @return $this
     */
    public function setBuildingPermitStatus($building_permit_status)
    {
        $this->container['building_permit_status'] = $building_permit_status;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return string
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param string $expiration_date The permit's expiration date which can be assigned upon permit issuance. Certain permits are issued/approved but given a time limit for completion, i.e. expiration of approval by the city or county to complete the work. This field reflects the date, if any, when approved permits must complete the work on the subject property. Null if not applicable to a specific permit.  Format: \"YYYY-MM-DD\"
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets filing_fees
     *
     * @return float
     */
    public function getFilingFees()
    {
        return $this->container['filing_fees'];
    }

    /**
     * Sets filing_fees
     *
     * @param float $filing_fees The building permit fees paid to the presiding building permit authority. In absence of a declared job value, the fees are a reasonable, directional estimate to the size and scale of a project.
     *
     * @return $this
     */
    public function setFilingFees($filing_fees)
    {
        $this->container['filing_fees'] = $filing_fees;

        return $this;
    }

    /**
     * Gets units_count
     *
     * @return int
     */
    public function getUnitsCount()
    {
        return $this->container['units_count'];
    }

    /**
     * Sets units_count
     *
     * @param int $units_count The description of the nature of work requiring the permit as specified by the project owner on the permit.
     *
     * @return $this
     */
    public function setUnitsCount($units_count)
    {
        $this->container['units_count'] = $units_count;

        return $this;
    }

    /**
     * Gets stories_count
     *
     * @return int
     */
    public function getStoriesCount()
    {
        return $this->container['stories_count'];
    }

    /**
     * Sets stories_count
     *
     * @param int $stories_count The number of stories in the relevant structure as reported on the building permit.
     *
     * @return $this
     */
    public function setStoriesCount($stories_count)
    {
        $this->container['stories_count'] = $stories_count;

        return $this;
    }

    /**
     * Gets area_square_feet
     *
     * @return int
     */
    public function getAreaSquareFeet()
    {
        return $this->container['area_square_feet'];
    }

    /**
     * Sets area_square_feet
     *
     * @param int $area_square_feet The estimated square feet of the project as reported on the building permit.
     *
     * @return $this
     */
    public function setAreaSquareFeet($area_square_feet)
    {
        $this->container['area_square_feet'] = $area_square_feet;

        return $this;
    }

    /**
     * Gets home_owner_name
     *
     * @return string
     */
    public function getHomeOwnerName()
    {
        return $this->container['home_owner_name'];
    }

    /**
     * Sets home_owner_name
     *
     * @param string $home_owner_name The name of the home/property owner as specified on the building permit.
     *
     * @return $this
     */
    public function setHomeOwnerName($home_owner_name)
    {
        $this->container['home_owner_name'] = $home_owner_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
