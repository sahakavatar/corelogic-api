<?php
/**
 * Parking
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Parking Class Doc Comment
 *
 * @category Class
 * @description Parking
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Parking implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Parking';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type_code' => 'string',
        'garage_type_code' => 'string',
        'parking_spaces_count' => 'float',
        'primary_area_square_feet' => 'float',
        'second_area_square_feet' => 'float',
        'carport_area_square_feet' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type_code' => null,
        'garage_type_code' => null,
        'parking_spaces_count' => null,
        'primary_area_square_feet' => null,
        'second_area_square_feet' => null,
        'carport_area_square_feet' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type_code' => 'typeCode',
        'garage_type_code' => 'garageTypeCode',
        'parking_spaces_count' => 'parkingSpacesCount',
        'primary_area_square_feet' => 'primaryAreaSquareFeet',
        'second_area_square_feet' => 'secondAreaSquareFeet',
        'carport_area_square_feet' => 'carportAreaSquareFeet'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type_code' => 'setTypeCode',
        'garage_type_code' => 'setGarageTypeCode',
        'parking_spaces_count' => 'setParkingSpacesCount',
        'primary_area_square_feet' => 'setPrimaryAreaSquareFeet',
        'second_area_square_feet' => 'setSecondAreaSquareFeet',
        'carport_area_square_feet' => 'setCarportAreaSquareFeet'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type_code' => 'getTypeCode',
        'garage_type_code' => 'getGarageTypeCode',
        'parking_spaces_count' => 'getParkingSpacesCount',
        'primary_area_square_feet' => 'getPrimaryAreaSquareFeet',
        'second_area_square_feet' => 'getSecondAreaSquareFeet',
        'carport_area_square_feet' => 'getCarportAreaSquareFeet'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type_code'] = isset($data['type_code']) ? $data['type_code'] : null;
        $this->container['garage_type_code'] = isset($data['garage_type_code']) ? $data['garage_type_code'] : null;
        $this->container['parking_spaces_count'] = isset($data['parking_spaces_count']) ? $data['parking_spaces_count'] : null;
        $this->container['primary_area_square_feet'] = isset($data['primary_area_square_feet']) ? $data['primary_area_square_feet'] : null;
        $this->container['second_area_square_feet'] = isset($data['second_area_square_feet']) ? $data['second_area_square_feet'] : null;
        $this->container['carport_area_square_feet'] = isset($data['carport_area_square_feet']) ? $data['carport_area_square_feet'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type_code
     *
     * @return string
     */
    public function getTypeCode()
    {
        return $this->container['type_code'];
    }

    /**
     * Sets type_code
     *
     * @param string $type_code Type of parking found for the structure. This is typically commercial or communal in nature (e.g., Condos).
     *
     * @return $this
     */
    public function setTypeCode($type_code)
    {
        $this->container['type_code'] = $type_code;

        return $this;
    }

    /**
     * Gets garage_type_code
     *
     * @return string
     */
    public function getGarageTypeCode()
    {
        return $this->container['garage_type_code'];
    }

    /**
     * Sets garage_type_code
     *
     * @param string $garage_type_code Type of garage or carport present (e.g., Attached Finished, Enclosed Carport, Basement Garage).
     *
     * @return $this
     */
    public function setGarageTypeCode($garage_type_code)
    {
        $this->container['garage_type_code'] = $garage_type_code;

        return $this;
    }

    /**
     * Gets parking_spaces_count
     *
     * @return float
     */
    public function getParkingSpacesCount()
    {
        return $this->container['parking_spaces_count'];
    }

    /**
     * Sets parking_spaces_count
     *
     * @param float $parking_spaces_count This represents the total number of parking spaces or car capacity associated with the garage or parking type.
     *
     * @return $this
     */
    public function setParkingSpacesCount($parking_spaces_count)
    {
        $this->container['parking_spaces_count'] = $parking_spaces_count;

        return $this;
    }

    /**
     * Gets primary_area_square_feet
     *
     * @return float
     */
    public function getPrimaryAreaSquareFeet()
    {
        return $this->container['primary_area_square_feet'];
    }

    /**
     * Sets primary_area_square_feet
     *
     * @param float $primary_area_square_feet This is the total square footage of the primary garage or parking area.
     *
     * @return $this
     */
    public function setPrimaryAreaSquareFeet($primary_area_square_feet)
    {
        $this->container['primary_area_square_feet'] = $primary_area_square_feet;

        return $this;
    }

    /**
     * Gets second_area_square_feet
     *
     * @return float
     */
    public function getSecondAreaSquareFeet()
    {
        return $this->container['second_area_square_feet'];
    }

    /**
     * Sets second_area_square_feet
     *
     * @param float $second_area_square_feet Total square footage for second Garage/Parking on the property.
     *
     * @return $this
     */
    public function setSecondAreaSquareFeet($second_area_square_feet)
    {
        $this->container['second_area_square_feet'] = $second_area_square_feet;

        return $this;
    }

    /**
     * Gets carport_area_square_feet
     *
     * @return float
     */
    public function getCarportAreaSquareFeet()
    {
        return $this->container['carport_area_square_feet'];
    }

    /**
     * Sets carport_area_square_feet
     *
     * @param float $carport_area_square_feet Total square footage for primary carport on the property.
     *
     * @return $this
     */
    public function setCarportAreaSquareFeet($carport_area_square_feet)
    {
        $this->container['carport_area_square_feet'] = $carport_area_square_feet;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
