<?php
/**
 * HoaLienTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * HoaLienTransaction Class Doc Comment
 *
 * @category Class
 * @description HOA Lien Transaction
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class HoaLienTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'HoaLienTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hoa_lien_transaction_id' => '\Swagger\Client\Model\HoaLienTransactionId',
        'hoa_lien_transaction_details' => '\Swagger\Client\Model\HoaLienTransactionDetails',
        'deed_property_owner' => '\Swagger\Client\Model\DeedPropertyOwner',
        'hoa_lien_plaintiff' => '\Swagger\Client\Model\HoaLienPlaintiff',
        'subject_transaction' => '\Swagger\Client\Model\SubjectTransaction'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hoa_lien_transaction_id' => null,
        'hoa_lien_transaction_details' => null,
        'deed_property_owner' => null,
        'hoa_lien_plaintiff' => null,
        'subject_transaction' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hoa_lien_transaction_id' => 'hoaLienTransactionId',
        'hoa_lien_transaction_details' => 'hoaLienTransactionDetails',
        'deed_property_owner' => 'deedPropertyOwner',
        'hoa_lien_plaintiff' => 'hoaLienPlaintiff',
        'subject_transaction' => 'subjectTransaction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hoa_lien_transaction_id' => 'setHoaLienTransactionId',
        'hoa_lien_transaction_details' => 'setHoaLienTransactionDetails',
        'deed_property_owner' => 'setDeedPropertyOwner',
        'hoa_lien_plaintiff' => 'setHoaLienPlaintiff',
        'subject_transaction' => 'setSubjectTransaction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hoa_lien_transaction_id' => 'getHoaLienTransactionId',
        'hoa_lien_transaction_details' => 'getHoaLienTransactionDetails',
        'deed_property_owner' => 'getDeedPropertyOwner',
        'hoa_lien_plaintiff' => 'getHoaLienPlaintiff',
        'subject_transaction' => 'getSubjectTransaction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hoa_lien_transaction_id'] = isset($data['hoa_lien_transaction_id']) ? $data['hoa_lien_transaction_id'] : null;
        $this->container['hoa_lien_transaction_details'] = isset($data['hoa_lien_transaction_details']) ? $data['hoa_lien_transaction_details'] : null;
        $this->container['deed_property_owner'] = isset($data['deed_property_owner']) ? $data['deed_property_owner'] : null;
        $this->container['hoa_lien_plaintiff'] = isset($data['hoa_lien_plaintiff']) ? $data['hoa_lien_plaintiff'] : null;
        $this->container['subject_transaction'] = isset($data['subject_transaction']) ? $data['subject_transaction'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hoa_lien_transaction_id
     *
     * @return \Swagger\Client\Model\HoaLienTransactionId
     */
    public function getHoaLienTransactionId()
    {
        return $this->container['hoa_lien_transaction_id'];
    }

    /**
     * Sets hoa_lien_transaction_id
     *
     * @param \Swagger\Client\Model\HoaLienTransactionId $hoa_lien_transaction_id hoa_lien_transaction_id
     *
     * @return $this
     */
    public function setHoaLienTransactionId($hoa_lien_transaction_id)
    {
        $this->container['hoa_lien_transaction_id'] = $hoa_lien_transaction_id;

        return $this;
    }

    /**
     * Gets hoa_lien_transaction_details
     *
     * @return \Swagger\Client\Model\HoaLienTransactionDetails
     */
    public function getHoaLienTransactionDetails()
    {
        return $this->container['hoa_lien_transaction_details'];
    }

    /**
     * Sets hoa_lien_transaction_details
     *
     * @param \Swagger\Client\Model\HoaLienTransactionDetails $hoa_lien_transaction_details hoa_lien_transaction_details
     *
     * @return $this
     */
    public function setHoaLienTransactionDetails($hoa_lien_transaction_details)
    {
        $this->container['hoa_lien_transaction_details'] = $hoa_lien_transaction_details;

        return $this;
    }

    /**
     * Gets deed_property_owner
     *
     * @return \Swagger\Client\Model\DeedPropertyOwner
     */
    public function getDeedPropertyOwner()
    {
        return $this->container['deed_property_owner'];
    }

    /**
     * Sets deed_property_owner
     *
     * @param \Swagger\Client\Model\DeedPropertyOwner $deed_property_owner deed_property_owner
     *
     * @return $this
     */
    public function setDeedPropertyOwner($deed_property_owner)
    {
        $this->container['deed_property_owner'] = $deed_property_owner;

        return $this;
    }

    /**
     * Gets hoa_lien_plaintiff
     *
     * @return \Swagger\Client\Model\HoaLienPlaintiff
     */
    public function getHoaLienPlaintiff()
    {
        return $this->container['hoa_lien_plaintiff'];
    }

    /**
     * Sets hoa_lien_plaintiff
     *
     * @param \Swagger\Client\Model\HoaLienPlaintiff $hoa_lien_plaintiff hoa_lien_plaintiff
     *
     * @return $this
     */
    public function setHoaLienPlaintiff($hoa_lien_plaintiff)
    {
        $this->container['hoa_lien_plaintiff'] = $hoa_lien_plaintiff;

        return $this;
    }

    /**
     * Gets subject_transaction
     *
     * @return \Swagger\Client\Model\SubjectTransaction
     */
    public function getSubjectTransaction()
    {
        return $this->container['subject_transaction'];
    }

    /**
     * Sets subject_transaction
     *
     * @param \Swagger\Client\Model\SubjectTransaction $subject_transaction subject_transaction
     *
     * @return $this
     */
    public function setSubjectTransaction($subject_transaction)
    {
        $this->container['subject_transaction'] = $subject_transaction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
