<?php
/**
 * PaceBuyerMailingAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PaceBuyerMailingAddress Class Doc Comment
 *
 * @category Class
 * @description Pace Buyer Mailing Address
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaceBuyerMailingAddress implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaceBuyerMailingAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'buyer_mailing_house_number' => 'string',
        'buyer_mailing_house_number_suffix' => 'string',
        'buyer_mailing_house_number2' => 'string',
        'buyer_mailing_direction' => 'string',
        'buyer_mailing_street_name' => 'string',
        'buyer_mailing_mode' => 'string',
        'buyer_mailing_quadrant' => 'string',
        'buyer_mailing_unit_number' => 'string',
        'buyer_mailing_city' => 'string',
        'buyer_mailing_state' => 'string',
        'buyer_mailing_zip_code' => 'string',
        'buyer_mailing_carrier_route' => 'string',
        'buyer_mailing_street_address' => 'string',
        'buyer_mailing_opt_out_indicator' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'buyer_mailing_house_number' => null,
        'buyer_mailing_house_number_suffix' => null,
        'buyer_mailing_house_number2' => null,
        'buyer_mailing_direction' => null,
        'buyer_mailing_street_name' => null,
        'buyer_mailing_mode' => null,
        'buyer_mailing_quadrant' => null,
        'buyer_mailing_unit_number' => null,
        'buyer_mailing_city' => null,
        'buyer_mailing_state' => null,
        'buyer_mailing_zip_code' => null,
        'buyer_mailing_carrier_route' => null,
        'buyer_mailing_street_address' => null,
        'buyer_mailing_opt_out_indicator' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buyer_mailing_house_number' => 'buyerMailingHouseNumber',
        'buyer_mailing_house_number_suffix' => 'buyerMailingHouseNumberSuffix',
        'buyer_mailing_house_number2' => 'buyerMailingHouseNumber2',
        'buyer_mailing_direction' => 'buyerMailingDirection',
        'buyer_mailing_street_name' => 'buyerMailingStreetName',
        'buyer_mailing_mode' => 'buyerMailingMode',
        'buyer_mailing_quadrant' => 'buyerMailingQuadrant',
        'buyer_mailing_unit_number' => 'buyerMailingUnitNumber',
        'buyer_mailing_city' => 'buyerMailingCity',
        'buyer_mailing_state' => 'buyerMailingState',
        'buyer_mailing_zip_code' => 'buyerMailingZipCode',
        'buyer_mailing_carrier_route' => 'buyerMailingCarrierRoute',
        'buyer_mailing_street_address' => 'buyerMailingStreetAddress',
        'buyer_mailing_opt_out_indicator' => 'buyerMailingOptOutIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buyer_mailing_house_number' => 'setBuyerMailingHouseNumber',
        'buyer_mailing_house_number_suffix' => 'setBuyerMailingHouseNumberSuffix',
        'buyer_mailing_house_number2' => 'setBuyerMailingHouseNumber2',
        'buyer_mailing_direction' => 'setBuyerMailingDirection',
        'buyer_mailing_street_name' => 'setBuyerMailingStreetName',
        'buyer_mailing_mode' => 'setBuyerMailingMode',
        'buyer_mailing_quadrant' => 'setBuyerMailingQuadrant',
        'buyer_mailing_unit_number' => 'setBuyerMailingUnitNumber',
        'buyer_mailing_city' => 'setBuyerMailingCity',
        'buyer_mailing_state' => 'setBuyerMailingState',
        'buyer_mailing_zip_code' => 'setBuyerMailingZipCode',
        'buyer_mailing_carrier_route' => 'setBuyerMailingCarrierRoute',
        'buyer_mailing_street_address' => 'setBuyerMailingStreetAddress',
        'buyer_mailing_opt_out_indicator' => 'setBuyerMailingOptOutIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buyer_mailing_house_number' => 'getBuyerMailingHouseNumber',
        'buyer_mailing_house_number_suffix' => 'getBuyerMailingHouseNumberSuffix',
        'buyer_mailing_house_number2' => 'getBuyerMailingHouseNumber2',
        'buyer_mailing_direction' => 'getBuyerMailingDirection',
        'buyer_mailing_street_name' => 'getBuyerMailingStreetName',
        'buyer_mailing_mode' => 'getBuyerMailingMode',
        'buyer_mailing_quadrant' => 'getBuyerMailingQuadrant',
        'buyer_mailing_unit_number' => 'getBuyerMailingUnitNumber',
        'buyer_mailing_city' => 'getBuyerMailingCity',
        'buyer_mailing_state' => 'getBuyerMailingState',
        'buyer_mailing_zip_code' => 'getBuyerMailingZipCode',
        'buyer_mailing_carrier_route' => 'getBuyerMailingCarrierRoute',
        'buyer_mailing_street_address' => 'getBuyerMailingStreetAddress',
        'buyer_mailing_opt_out_indicator' => 'getBuyerMailingOptOutIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buyer_mailing_house_number'] = isset($data['buyer_mailing_house_number']) ? $data['buyer_mailing_house_number'] : null;
        $this->container['buyer_mailing_house_number_suffix'] = isset($data['buyer_mailing_house_number_suffix']) ? $data['buyer_mailing_house_number_suffix'] : null;
        $this->container['buyer_mailing_house_number2'] = isset($data['buyer_mailing_house_number2']) ? $data['buyer_mailing_house_number2'] : null;
        $this->container['buyer_mailing_direction'] = isset($data['buyer_mailing_direction']) ? $data['buyer_mailing_direction'] : null;
        $this->container['buyer_mailing_street_name'] = isset($data['buyer_mailing_street_name']) ? $data['buyer_mailing_street_name'] : null;
        $this->container['buyer_mailing_mode'] = isset($data['buyer_mailing_mode']) ? $data['buyer_mailing_mode'] : null;
        $this->container['buyer_mailing_quadrant'] = isset($data['buyer_mailing_quadrant']) ? $data['buyer_mailing_quadrant'] : null;
        $this->container['buyer_mailing_unit_number'] = isset($data['buyer_mailing_unit_number']) ? $data['buyer_mailing_unit_number'] : null;
        $this->container['buyer_mailing_city'] = isset($data['buyer_mailing_city']) ? $data['buyer_mailing_city'] : null;
        $this->container['buyer_mailing_state'] = isset($data['buyer_mailing_state']) ? $data['buyer_mailing_state'] : null;
        $this->container['buyer_mailing_zip_code'] = isset($data['buyer_mailing_zip_code']) ? $data['buyer_mailing_zip_code'] : null;
        $this->container['buyer_mailing_carrier_route'] = isset($data['buyer_mailing_carrier_route']) ? $data['buyer_mailing_carrier_route'] : null;
        $this->container['buyer_mailing_street_address'] = isset($data['buyer_mailing_street_address']) ? $data['buyer_mailing_street_address'] : null;
        $this->container['buyer_mailing_opt_out_indicator'] = isset($data['buyer_mailing_opt_out_indicator']) ? $data['buyer_mailing_opt_out_indicator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buyer_mailing_house_number
     *
     * @return string
     */
    public function getBuyerMailingHouseNumber()
    {
        return $this->container['buyer_mailing_house_number'];
    }

    /**
     * Sets buyer_mailing_house_number
     *
     * @param string $buyer_mailing_house_number The digits found to the left of a street name, representing the house number for the mailing address.
     *
     * @return $this
     */
    public function setBuyerMailingHouseNumber($buyer_mailing_house_number)
    {
        $this->container['buyer_mailing_house_number'] = $buyer_mailing_house_number;

        return $this;
    }

    /**
     * Gets buyer_mailing_house_number_suffix
     *
     * @return string
     */
    public function getBuyerMailingHouseNumberSuffix()
    {
        return $this->container['buyer_mailing_house_number_suffix'];
    }

    /**
     * Sets buyer_mailing_house_number_suffix
     *
     * @param string $buyer_mailing_house_number_suffix The characters found to the immediate right of a house number (e.g., 202B Jones Rd).
     *
     * @return $this
     */
    public function setBuyerMailingHouseNumberSuffix($buyer_mailing_house_number_suffix)
    {
        $this->container['buyer_mailing_house_number_suffix'] = $buyer_mailing_house_number_suffix;

        return $this;
    }

    /**
     * Gets buyer_mailing_house_number2
     *
     * @return string
     */
    public function getBuyerMailingHouseNumber2()
    {
        return $this->container['buyer_mailing_house_number2'];
    }

    /**
     * Sets buyer_mailing_house_number2
     *
     * @param string $buyer_mailing_house_number2 The second set of numbers in an address range.
     *
     * @return $this
     */
    public function setBuyerMailingHouseNumber2($buyer_mailing_house_number2)
    {
        $this->container['buyer_mailing_house_number2'] = $buyer_mailing_house_number2;

        return $this;
    }

    /**
     * Gets buyer_mailing_direction
     *
     * @return string
     */
    public function getBuyerMailingDirection()
    {
        return $this->container['buyer_mailing_direction'];
    }

    /**
     * Sets buyer_mailing_direction
     *
     * @param string $buyer_mailing_direction This field represents the direction found to the left of the street name (e.g., 9340 N Dunhill Dr). AKA Directional Abbreviations, Pre-Directional.
     *
     * @return $this
     */
    public function setBuyerMailingDirection($buyer_mailing_direction)
    {
        $this->container['buyer_mailing_direction'] = $buyer_mailing_direction;

        return $this;
    }

    /**
     * Gets buyer_mailing_street_name
     *
     * @return string
     */
    public function getBuyerMailingStreetName()
    {
        return $this->container['buyer_mailing_street_name'];
    }

    /**
     * Sets buyer_mailing_street_name
     *
     * @param string $buyer_mailing_street_name The name or number of the street of the mailing address.
     *
     * @return $this
     */
    public function setBuyerMailingStreetName($buyer_mailing_street_name)
    {
        $this->container['buyer_mailing_street_name'] = $buyer_mailing_street_name;

        return $this;
    }

    /**
     * Gets buyer_mailing_mode
     *
     * @return string
     */
    public function getBuyerMailingMode()
    {
        return $this->container['buyer_mailing_mode'];
    }

    /**
     * Sets buyer_mailing_mode
     *
     * @param string $buyer_mailing_mode The Mode or Type of street found to the right of the street name (e.g., 9340 N Dunhill Dr). AKA Street Designators / Street Suffixes.
     *
     * @return $this
     */
    public function setBuyerMailingMode($buyer_mailing_mode)
    {
        $this->container['buyer_mailing_mode'] = $buyer_mailing_mode;

        return $this;
    }

    /**
     * Gets buyer_mailing_quadrant
     *
     * @return string
     */
    public function getBuyerMailingQuadrant()
    {
        return $this->container['buyer_mailing_quadrant'];
    }

    /**
     * Sets buyer_mailing_quadrant
     *
     * @param string $buyer_mailing_quadrant The quadrant is found to the right of Mailing Mode (e.g., 2040 NW 100 ST SW). AKA Post-Directional.
     *
     * @return $this
     */
    public function setBuyerMailingQuadrant($buyer_mailing_quadrant)
    {
        $this->container['buyer_mailing_quadrant'] = $buyer_mailing_quadrant;

        return $this;
    }

    /**
     * Gets buyer_mailing_unit_number
     *
     * @return string
     */
    public function getBuyerMailingUnitNumber()
    {
        return $this->container['buyer_mailing_unit_number'];
    }

    /**
     * Sets buyer_mailing_unit_number
     *
     * @param string $buyer_mailing_unit_number The unit or suite number of the mailing address (e.g., 649 Lake Shore Dr #1400).
     *
     * @return $this
     */
    public function setBuyerMailingUnitNumber($buyer_mailing_unit_number)
    {
        $this->container['buyer_mailing_unit_number'] = $buyer_mailing_unit_number;

        return $this;
    }

    /**
     * Gets buyer_mailing_city
     *
     * @return string
     */
    public function getBuyerMailingCity()
    {
        return $this->container['buyer_mailing_city'];
    }

    /**
     * Sets buyer_mailing_city
     *
     * @param string $buyer_mailing_city The city associated with the mailing address.
     *
     * @return $this
     */
    public function setBuyerMailingCity($buyer_mailing_city)
    {
        $this->container['buyer_mailing_city'] = $buyer_mailing_city;

        return $this;
    }

    /**
     * Gets buyer_mailing_state
     *
     * @return string
     */
    public function getBuyerMailingState()
    {
        return $this->container['buyer_mailing_state'];
    }

    /**
     * Sets buyer_mailing_state
     *
     * @param string $buyer_mailing_state The two-letter USPS postal abbreviation associated with the state / protectorates / commonwealth (e.g., CA, VI, PR).
     *
     * @return $this
     */
    public function setBuyerMailingState($buyer_mailing_state)
    {
        $this->container['buyer_mailing_state'] = $buyer_mailing_state;

        return $this;
    }

    /**
     * Gets buyer_mailing_zip_code
     *
     * @return string
     */
    public function getBuyerMailingZipCode()
    {
        return $this->container['buyer_mailing_zip_code'];
    }

    /**
     * Sets buyer_mailing_zip_code
     *
     * @param string $buyer_mailing_zip_code Code assigned by the USPS. This is populated by various source files and other proprietary and non-proprietary processes. Data may be the 5-digit zip or 9-digit Zip+4 (e.g., 00501 or 954630042).
     *
     * @return $this
     */
    public function setBuyerMailingZipCode($buyer_mailing_zip_code)
    {
        $this->container['buyer_mailing_zip_code'] = $buyer_mailing_zip_code;

        return $this;
    }

    /**
     * Gets buyer_mailing_carrier_route
     *
     * @return string
     */
    public function getBuyerMailingCarrierRoute()
    {
        return $this->container['buyer_mailing_carrier_route'];
    }

    /**
     * Sets buyer_mailing_carrier_route
     *
     * @param string $buyer_mailing_carrier_route This is the four digit code used by the local mail carrier to identify the delivery path.
     *
     * @return $this
     */
    public function setBuyerMailingCarrierRoute($buyer_mailing_carrier_route)
    {
        $this->container['buyer_mailing_carrier_route'] = $buyer_mailing_carrier_route;

        return $this;
    }

    /**
     * Gets buyer_mailing_street_address
     *
     * @return string
     */
    public function getBuyerMailingStreetAddress()
    {
        return $this->container['buyer_mailing_street_address'];
    }

    /**
     * Sets buyer_mailing_street_address
     *
     * @param string $buyer_mailing_street_address Full mail address (not including City/St/Zip) (e.g. 123 N Main St).  This also contains unparsed foreign mailing address.
     *
     * @return $this
     */
    public function setBuyerMailingStreetAddress($buyer_mailing_street_address)
    {
        $this->container['buyer_mailing_street_address'] = $buyer_mailing_street_address;

        return $this;
    }

    /**
     * Gets buyer_mailing_opt_out_indicator
     *
     * @return string
     */
    public function getBuyerMailingOptOutIndicator()
    {
        return $this->container['buyer_mailing_opt_out_indicator'];
    }

    /**
     * Sets buyer_mailing_opt_out_indicator
     *
     * @param string $buyer_mailing_opt_out_indicator A \"Y\" represents a record where buyer has contacted the DMA (i.e., Direct Marketing Association) and has asked not to be contacted by mail for solicitation.
     *
     * @return $this
     */
    public function setBuyerMailingOptOutIndicator($buyer_mailing_opt_out_indicator)
    {
        $this->container['buyer_mailing_opt_out_indicator'] = $buyer_mailing_opt_out_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
