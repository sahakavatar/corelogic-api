<?php
/**
 * StructureId
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StructureId Class Doc Comment
 *
 * @category Class
 * @description Structure Id.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StructureId implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StructureId';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'sequence_number' => 'int',
        'composite_building_linkage_key' => 'string',
        'building_name' => 'string',
        'building_number' => 'string',
        'building_section_number' => 'int',
        'building_comments' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'sequence_number' => 'int32',
        'composite_building_linkage_key' => null,
        'building_name' => null,
        'building_number' => null,
        'building_section_number' => 'int32',
        'building_comments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'sequence_number' => 'sequenceNumber',
        'composite_building_linkage_key' => 'compositeBuildingLinkageKey',
        'building_name' => 'buildingName',
        'building_number' => 'buildingNumber',
        'building_section_number' => 'buildingSectionNumber',
        'building_comments' => 'buildingComments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'sequence_number' => 'setSequenceNumber',
        'composite_building_linkage_key' => 'setCompositeBuildingLinkageKey',
        'building_name' => 'setBuildingName',
        'building_number' => 'setBuildingNumber',
        'building_section_number' => 'setBuildingSectionNumber',
        'building_comments' => 'setBuildingComments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'sequence_number' => 'getSequenceNumber',
        'composite_building_linkage_key' => 'getCompositeBuildingLinkageKey',
        'building_name' => 'getBuildingName',
        'building_number' => 'getBuildingNumber',
        'building_section_number' => 'getBuildingSectionNumber',
        'building_comments' => 'getBuildingComments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['sequence_number'] = isset($data['sequence_number']) ? $data['sequence_number'] : null;
        $this->container['composite_building_linkage_key'] = isset($data['composite_building_linkage_key']) ? $data['composite_building_linkage_key'] : null;
        $this->container['building_name'] = isset($data['building_name']) ? $data['building_name'] : null;
        $this->container['building_number'] = isset($data['building_number']) ? $data['building_number'] : null;
        $this->container['building_section_number'] = isset($data['building_section_number']) ? $data['building_section_number'] : null;
        $this->container['building_comments'] = isset($data['building_comments']) ? $data['building_comments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets sequence_number
     *
     * @return int
     */
    public function getSequenceNumber()
    {
        return $this->container['sequence_number'];
    }

    /**
     * Sets sequence_number
     *
     * @param int $sequence_number This internal sequence number is used to ensure uniqueness of the Building Key.
     *
     * @return $this
     */
    public function setSequenceNumber($sequence_number)
    {
        $this->container['sequence_number'] = $sequence_number;

        return $this;
    }

    /**
     * Gets composite_building_linkage_key
     *
     * @return string
     */
    public function getCompositeBuildingLinkageKey()
    {
        return $this->container['composite_building_linkage_key'];
    }

    /**
     * Sets composite_building_linkage_key
     *
     * @param string $composite_building_linkage_key Unique building key. This is a fixed-width field, with the APN component padded with blanks out to 45 characters within the composite key.
     *
     * @return $this
     */
    public function setCompositeBuildingLinkageKey($composite_building_linkage_key)
    {
        $this->container['composite_building_linkage_key'] = $composite_building_linkage_key;

        return $this;
    }

    /**
     * Gets building_name
     *
     * @return string
     */
    public function getBuildingName()
    {
        return $this->container['building_name'];
    }

    /**
     * Sets building_name
     *
     * @param string $building_name County provided name for the building. Prevalent in commercial or multi-family buildings.
     *
     * @return $this
     */
    public function setBuildingName($building_name)
    {
        $this->container['building_name'] = $building_name;

        return $this;
    }

    /**
     * Gets building_number
     *
     * @return string
     */
    public function getBuildingNumber()
    {
        return $this->container['building_number'];
    }

    /**
     * Sets building_number
     *
     * @param string $building_number County provided number of the building that uniquely identifies the building from others on the same parcel.
     *
     * @return $this
     */
    public function setBuildingNumber($building_number)
    {
        $this->container['building_number'] = $building_number;

        return $this;
    }

    /**
     * Gets building_section_number
     *
     * @return int
     */
    public function getBuildingSectionNumber()
    {
        return $this->container['building_section_number'];
    }

    /**
     * Sets building_section_number
     *
     * @param int $building_section_number County provided building record section indicator that represents one section of the building only. This is only found in large commercial and multi-family buildings that are divided into multiple sections. Example: West Wing and East Wing.
     *
     * @return $this
     */
    public function setBuildingSectionNumber($building_section_number)
    {
        $this->container['building_section_number'] = $building_section_number;

        return $this;
    }

    /**
     * Gets building_comments
     *
     * @return string
     */
    public function getBuildingComments()
    {
        return $this->container['building_comments'];
    }

    /**
     * Sets building_comments
     *
     * @param string $building_comments Additional building description information.
     *
     * @return $this
     */
    public function setBuildingComments($building_comments)
    {
        $this->container['building_comments'] = $building_comments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
