<?php
/**
 * OwnerMailingAddress
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OwnerMailingAddress Class Doc Comment
 *
 * @category Class
 * @description Owner Mailing Address
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OwnerMailingAddress implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OwnerMailingAddress';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'owner_mailing_house_number' => 'string',
        'owner_mailing_house_number_suffix' => 'string',
        'owner_mailing_house_number2' => 'string',
        'owner_mailing_direction' => 'string',
        'owner_mailing_street_name' => 'string',
        'owner_mailing_mode' => 'string',
        'owner_mailing_quadrant' => 'string',
        'owner_mailing_unit_number' => 'string',
        'owner_mailing_city' => 'string',
        'owner_mailing_state' => 'string',
        'owner_mailing_zip_code' => 'string',
        'owner_mailing_carrier_route' => 'string',
        'owner_mailing_street_address' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'owner_mailing_house_number' => null,
        'owner_mailing_house_number_suffix' => null,
        'owner_mailing_house_number2' => null,
        'owner_mailing_direction' => null,
        'owner_mailing_street_name' => null,
        'owner_mailing_mode' => null,
        'owner_mailing_quadrant' => null,
        'owner_mailing_unit_number' => null,
        'owner_mailing_city' => null,
        'owner_mailing_state' => null,
        'owner_mailing_zip_code' => null,
        'owner_mailing_carrier_route' => null,
        'owner_mailing_street_address' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'owner_mailing_house_number' => 'ownerMailingHouseNumber',
        'owner_mailing_house_number_suffix' => 'ownerMailingHouseNumberSuffix',
        'owner_mailing_house_number2' => 'ownerMailingHouseNumber2',
        'owner_mailing_direction' => 'ownerMailingDirection',
        'owner_mailing_street_name' => 'ownerMailingStreetName',
        'owner_mailing_mode' => 'ownerMailingMode',
        'owner_mailing_quadrant' => 'ownerMailingQuadrant',
        'owner_mailing_unit_number' => 'ownerMailingUnitNumber',
        'owner_mailing_city' => 'ownerMailingCity',
        'owner_mailing_state' => 'ownerMailingState',
        'owner_mailing_zip_code' => 'ownerMailingZipCode',
        'owner_mailing_carrier_route' => 'ownerMailingCarrierRoute',
        'owner_mailing_street_address' => 'ownerMailingStreetAddress'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'owner_mailing_house_number' => 'setOwnerMailingHouseNumber',
        'owner_mailing_house_number_suffix' => 'setOwnerMailingHouseNumberSuffix',
        'owner_mailing_house_number2' => 'setOwnerMailingHouseNumber2',
        'owner_mailing_direction' => 'setOwnerMailingDirection',
        'owner_mailing_street_name' => 'setOwnerMailingStreetName',
        'owner_mailing_mode' => 'setOwnerMailingMode',
        'owner_mailing_quadrant' => 'setOwnerMailingQuadrant',
        'owner_mailing_unit_number' => 'setOwnerMailingUnitNumber',
        'owner_mailing_city' => 'setOwnerMailingCity',
        'owner_mailing_state' => 'setOwnerMailingState',
        'owner_mailing_zip_code' => 'setOwnerMailingZipCode',
        'owner_mailing_carrier_route' => 'setOwnerMailingCarrierRoute',
        'owner_mailing_street_address' => 'setOwnerMailingStreetAddress'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'owner_mailing_house_number' => 'getOwnerMailingHouseNumber',
        'owner_mailing_house_number_suffix' => 'getOwnerMailingHouseNumberSuffix',
        'owner_mailing_house_number2' => 'getOwnerMailingHouseNumber2',
        'owner_mailing_direction' => 'getOwnerMailingDirection',
        'owner_mailing_street_name' => 'getOwnerMailingStreetName',
        'owner_mailing_mode' => 'getOwnerMailingMode',
        'owner_mailing_quadrant' => 'getOwnerMailingQuadrant',
        'owner_mailing_unit_number' => 'getOwnerMailingUnitNumber',
        'owner_mailing_city' => 'getOwnerMailingCity',
        'owner_mailing_state' => 'getOwnerMailingState',
        'owner_mailing_zip_code' => 'getOwnerMailingZipCode',
        'owner_mailing_carrier_route' => 'getOwnerMailingCarrierRoute',
        'owner_mailing_street_address' => 'getOwnerMailingStreetAddress'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['owner_mailing_house_number'] = isset($data['owner_mailing_house_number']) ? $data['owner_mailing_house_number'] : null;
        $this->container['owner_mailing_house_number_suffix'] = isset($data['owner_mailing_house_number_suffix']) ? $data['owner_mailing_house_number_suffix'] : null;
        $this->container['owner_mailing_house_number2'] = isset($data['owner_mailing_house_number2']) ? $data['owner_mailing_house_number2'] : null;
        $this->container['owner_mailing_direction'] = isset($data['owner_mailing_direction']) ? $data['owner_mailing_direction'] : null;
        $this->container['owner_mailing_street_name'] = isset($data['owner_mailing_street_name']) ? $data['owner_mailing_street_name'] : null;
        $this->container['owner_mailing_mode'] = isset($data['owner_mailing_mode']) ? $data['owner_mailing_mode'] : null;
        $this->container['owner_mailing_quadrant'] = isset($data['owner_mailing_quadrant']) ? $data['owner_mailing_quadrant'] : null;
        $this->container['owner_mailing_unit_number'] = isset($data['owner_mailing_unit_number']) ? $data['owner_mailing_unit_number'] : null;
        $this->container['owner_mailing_city'] = isset($data['owner_mailing_city']) ? $data['owner_mailing_city'] : null;
        $this->container['owner_mailing_state'] = isset($data['owner_mailing_state']) ? $data['owner_mailing_state'] : null;
        $this->container['owner_mailing_zip_code'] = isset($data['owner_mailing_zip_code']) ? $data['owner_mailing_zip_code'] : null;
        $this->container['owner_mailing_carrier_route'] = isset($data['owner_mailing_carrier_route']) ? $data['owner_mailing_carrier_route'] : null;
        $this->container['owner_mailing_street_address'] = isset($data['owner_mailing_street_address']) ? $data['owner_mailing_street_address'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets owner_mailing_house_number
     *
     * @return string
     */
    public function getOwnerMailingHouseNumber()
    {
        return $this->container['owner_mailing_house_number'];
    }

    /**
     * Sets owner_mailing_house_number
     *
     * @param string $owner_mailing_house_number The digits found to the left of a street name, representing the house number for the mailing address.
     *
     * @return $this
     */
    public function setOwnerMailingHouseNumber($owner_mailing_house_number)
    {
        $this->container['owner_mailing_house_number'] = $owner_mailing_house_number;

        return $this;
    }

    /**
     * Gets owner_mailing_house_number_suffix
     *
     * @return string
     */
    public function getOwnerMailingHouseNumberSuffix()
    {
        return $this->container['owner_mailing_house_number_suffix'];
    }

    /**
     * Sets owner_mailing_house_number_suffix
     *
     * @param string $owner_mailing_house_number_suffix The characters found to the immediate right of a house number (e.g., 202B Jones Rd).
     *
     * @return $this
     */
    public function setOwnerMailingHouseNumberSuffix($owner_mailing_house_number_suffix)
    {
        $this->container['owner_mailing_house_number_suffix'] = $owner_mailing_house_number_suffix;

        return $this;
    }

    /**
     * Gets owner_mailing_house_number2
     *
     * @return string
     */
    public function getOwnerMailingHouseNumber2()
    {
        return $this->container['owner_mailing_house_number2'];
    }

    /**
     * Sets owner_mailing_house_number2
     *
     * @param string $owner_mailing_house_number2 The second set of numbers in an address range.
     *
     * @return $this
     */
    public function setOwnerMailingHouseNumber2($owner_mailing_house_number2)
    {
        $this->container['owner_mailing_house_number2'] = $owner_mailing_house_number2;

        return $this;
    }

    /**
     * Gets owner_mailing_direction
     *
     * @return string
     */
    public function getOwnerMailingDirection()
    {
        return $this->container['owner_mailing_direction'];
    }

    /**
     * Sets owner_mailing_direction
     *
     * @param string $owner_mailing_direction This field represents the direction found to the left of the street name (e.g., 9340 N Dunhill Dr). AKA Directional Abbreviations, Pre-Directional.
     *
     * @return $this
     */
    public function setOwnerMailingDirection($owner_mailing_direction)
    {
        $this->container['owner_mailing_direction'] = $owner_mailing_direction;

        return $this;
    }

    /**
     * Gets owner_mailing_street_name
     *
     * @return string
     */
    public function getOwnerMailingStreetName()
    {
        return $this->container['owner_mailing_street_name'];
    }

    /**
     * Sets owner_mailing_street_name
     *
     * @param string $owner_mailing_street_name The name or number of the street of the mailing address.
     *
     * @return $this
     */
    public function setOwnerMailingStreetName($owner_mailing_street_name)
    {
        $this->container['owner_mailing_street_name'] = $owner_mailing_street_name;

        return $this;
    }

    /**
     * Gets owner_mailing_mode
     *
     * @return string
     */
    public function getOwnerMailingMode()
    {
        return $this->container['owner_mailing_mode'];
    }

    /**
     * Sets owner_mailing_mode
     *
     * @param string $owner_mailing_mode The Mode or Type of street found to the right of the street name (e.g., 9340 N Dunhill Dr). AKA Street Designators / Street Suffixes.
     *
     * @return $this
     */
    public function setOwnerMailingMode($owner_mailing_mode)
    {
        $this->container['owner_mailing_mode'] = $owner_mailing_mode;

        return $this;
    }

    /**
     * Gets owner_mailing_quadrant
     *
     * @return string
     */
    public function getOwnerMailingQuadrant()
    {
        return $this->container['owner_mailing_quadrant'];
    }

    /**
     * Sets owner_mailing_quadrant
     *
     * @param string $owner_mailing_quadrant The quadrant is found to the right of Mailing Mode (e.g., 2040 NW 100 ST SW). AKA Post-Directional.
     *
     * @return $this
     */
    public function setOwnerMailingQuadrant($owner_mailing_quadrant)
    {
        $this->container['owner_mailing_quadrant'] = $owner_mailing_quadrant;

        return $this;
    }

    /**
     * Gets owner_mailing_unit_number
     *
     * @return string
     */
    public function getOwnerMailingUnitNumber()
    {
        return $this->container['owner_mailing_unit_number'];
    }

    /**
     * Sets owner_mailing_unit_number
     *
     * @param string $owner_mailing_unit_number The unit or suite number of the mailing address (e.g., 649 Lake Shore Dr #1400).
     *
     * @return $this
     */
    public function setOwnerMailingUnitNumber($owner_mailing_unit_number)
    {
        $this->container['owner_mailing_unit_number'] = $owner_mailing_unit_number;

        return $this;
    }

    /**
     * Gets owner_mailing_city
     *
     * @return string
     */
    public function getOwnerMailingCity()
    {
        return $this->container['owner_mailing_city'];
    }

    /**
     * Sets owner_mailing_city
     *
     * @param string $owner_mailing_city The city associated with the mailing address.
     *
     * @return $this
     */
    public function setOwnerMailingCity($owner_mailing_city)
    {
        $this->container['owner_mailing_city'] = $owner_mailing_city;

        return $this;
    }

    /**
     * Gets owner_mailing_state
     *
     * @return string
     */
    public function getOwnerMailingState()
    {
        return $this->container['owner_mailing_state'];
    }

    /**
     * Sets owner_mailing_state
     *
     * @param string $owner_mailing_state The two-letter USPS postal abbreviation associated with the state / protectorates / commonwealth (e.g., CA, VI, PR).
     *
     * @return $this
     */
    public function setOwnerMailingState($owner_mailing_state)
    {
        $this->container['owner_mailing_state'] = $owner_mailing_state;

        return $this;
    }

    /**
     * Gets owner_mailing_zip_code
     *
     * @return string
     */
    public function getOwnerMailingZipCode()
    {
        return $this->container['owner_mailing_zip_code'];
    }

    /**
     * Sets owner_mailing_zip_code
     *
     * @param string $owner_mailing_zip_code Code assigned by the USPS. This is populated by various source files and other proprietary and non-proprietary processes. Data may be the 5-digit zip or 9-digit Zip+4 (e.g., 00501 or 954630042).
     *
     * @return $this
     */
    public function setOwnerMailingZipCode($owner_mailing_zip_code)
    {
        $this->container['owner_mailing_zip_code'] = $owner_mailing_zip_code;

        return $this;
    }

    /**
     * Gets owner_mailing_carrier_route
     *
     * @return string
     */
    public function getOwnerMailingCarrierRoute()
    {
        return $this->container['owner_mailing_carrier_route'];
    }

    /**
     * Sets owner_mailing_carrier_route
     *
     * @param string $owner_mailing_carrier_route This is the four digit code used by the local mail carrier to identify the delivery path.
     *
     * @return $this
     */
    public function setOwnerMailingCarrierRoute($owner_mailing_carrier_route)
    {
        $this->container['owner_mailing_carrier_route'] = $owner_mailing_carrier_route;

        return $this;
    }

    /**
     * Gets owner_mailing_street_address
     *
     * @return string
     */
    public function getOwnerMailingStreetAddress()
    {
        return $this->container['owner_mailing_street_address'];
    }

    /**
     * Sets owner_mailing_street_address
     *
     * @param string $owner_mailing_street_address Full mail address (not including City/St/Zip) (e.g. 123 N Main St). This also contains unparsed foreign mailing address.
     *
     * @return $this
     */
    public function setOwnerMailingStreetAddress($owner_mailing_street_address)
    {
        $this->container['owner_mailing_street_address'] = $owner_mailing_street_address;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
