<?php
/**
 * EnrichedLienMortgageRiskTransaction
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnrichedLienMortgageRiskTransaction Class Doc Comment
 *
 * @category Class
 * @description Mortgage transaction details.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnrichedLienMortgageRiskTransaction implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnrichedLienMortgageRiskTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'mortgage_composite_transaction_id' => 'string',
        'enriched_ltv' => 'float',
        'multi_or_split_parcel_code' => 'string',
        'enriched_mortgage_lien_position' => 'int',
        'type_code' => 'string',
        'purpose_code' => 'string',
        'subordinate_type_code' => 'string',
        'subordinate_type_code_description' => 'string',
        'amount' => 'float',
        'enriched_loan_type_code' => 'string',
        'enriched_loan_type_code_confidence_rank' => 'int',
        'enriched_interest_rate' => 'float',
        'enriched_interest_rate_confidence_rank' => 'int',
        'enriched_interest_rate_type_code' => 'string',
        'enriched_interest_rate_type_code_confidence_rank' => 'int',
        'enriched_term' => 'int',
        'enriched_term_confidence_rank' => 'int',
        'enriched_term_code' => 'string',
        'enriched_term_code_confidence_rank' => 'int',
        'mortgage_date' => 'int',
        'maturity_date' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'mortgage_composite_transaction_id' => null,
        'enriched_ltv' => null,
        'multi_or_split_parcel_code' => null,
        'enriched_mortgage_lien_position' => 'int32',
        'type_code' => null,
        'purpose_code' => null,
        'subordinate_type_code' => null,
        'subordinate_type_code_description' => null,
        'amount' => null,
        'enriched_loan_type_code' => null,
        'enriched_loan_type_code_confidence_rank' => 'int32',
        'enriched_interest_rate' => null,
        'enriched_interest_rate_confidence_rank' => 'int32',
        'enriched_interest_rate_type_code' => null,
        'enriched_interest_rate_type_code_confidence_rank' => 'int32',
        'enriched_term' => 'int32',
        'enriched_term_confidence_rank' => 'int32',
        'enriched_term_code' => null,
        'enriched_term_code_confidence_rank' => 'int32',
        'mortgage_date' => 'int32',
        'maturity_date' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'mortgage_composite_transaction_id' => 'mortgageCompositeTransactionId',
        'enriched_ltv' => 'enrichedLTV',
        'multi_or_split_parcel_code' => 'multiOrSplitParcelCode',
        'enriched_mortgage_lien_position' => 'enrichedMortgageLienPosition',
        'type_code' => 'typeCode',
        'purpose_code' => 'purposeCode',
        'subordinate_type_code' => 'subordinateTypeCode',
        'subordinate_type_code_description' => 'subordinateTypeCodeDescription',
        'amount' => 'amount',
        'enriched_loan_type_code' => 'enrichedLoanTypeCode',
        'enriched_loan_type_code_confidence_rank' => 'enrichedLoanTypeCodeConfidenceRank',
        'enriched_interest_rate' => 'enrichedInterestRate',
        'enriched_interest_rate_confidence_rank' => 'enrichedInterestRateConfidenceRank',
        'enriched_interest_rate_type_code' => 'enrichedInterestRateTypeCode',
        'enriched_interest_rate_type_code_confidence_rank' => 'enrichedInterestRateTypeCodeConfidenceRank',
        'enriched_term' => 'enrichedTerm',
        'enriched_term_confidence_rank' => 'enrichedTermConfidenceRank',
        'enriched_term_code' => 'enrichedTermCode',
        'enriched_term_code_confidence_rank' => 'enrichedTermCodeConfidenceRank',
        'mortgage_date' => 'mortgageDate',
        'maturity_date' => 'maturityDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'mortgage_composite_transaction_id' => 'setMortgageCompositeTransactionId',
        'enriched_ltv' => 'setEnrichedLtv',
        'multi_or_split_parcel_code' => 'setMultiOrSplitParcelCode',
        'enriched_mortgage_lien_position' => 'setEnrichedMortgageLienPosition',
        'type_code' => 'setTypeCode',
        'purpose_code' => 'setPurposeCode',
        'subordinate_type_code' => 'setSubordinateTypeCode',
        'subordinate_type_code_description' => 'setSubordinateTypeCodeDescription',
        'amount' => 'setAmount',
        'enriched_loan_type_code' => 'setEnrichedLoanTypeCode',
        'enriched_loan_type_code_confidence_rank' => 'setEnrichedLoanTypeCodeConfidenceRank',
        'enriched_interest_rate' => 'setEnrichedInterestRate',
        'enriched_interest_rate_confidence_rank' => 'setEnrichedInterestRateConfidenceRank',
        'enriched_interest_rate_type_code' => 'setEnrichedInterestRateTypeCode',
        'enriched_interest_rate_type_code_confidence_rank' => 'setEnrichedInterestRateTypeCodeConfidenceRank',
        'enriched_term' => 'setEnrichedTerm',
        'enriched_term_confidence_rank' => 'setEnrichedTermConfidenceRank',
        'enriched_term_code' => 'setEnrichedTermCode',
        'enriched_term_code_confidence_rank' => 'setEnrichedTermCodeConfidenceRank',
        'mortgage_date' => 'setMortgageDate',
        'maturity_date' => 'setMaturityDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'mortgage_composite_transaction_id' => 'getMortgageCompositeTransactionId',
        'enriched_ltv' => 'getEnrichedLtv',
        'multi_or_split_parcel_code' => 'getMultiOrSplitParcelCode',
        'enriched_mortgage_lien_position' => 'getEnrichedMortgageLienPosition',
        'type_code' => 'getTypeCode',
        'purpose_code' => 'getPurposeCode',
        'subordinate_type_code' => 'getSubordinateTypeCode',
        'subordinate_type_code_description' => 'getSubordinateTypeCodeDescription',
        'amount' => 'getAmount',
        'enriched_loan_type_code' => 'getEnrichedLoanTypeCode',
        'enriched_loan_type_code_confidence_rank' => 'getEnrichedLoanTypeCodeConfidenceRank',
        'enriched_interest_rate' => 'getEnrichedInterestRate',
        'enriched_interest_rate_confidence_rank' => 'getEnrichedInterestRateConfidenceRank',
        'enriched_interest_rate_type_code' => 'getEnrichedInterestRateTypeCode',
        'enriched_interest_rate_type_code_confidence_rank' => 'getEnrichedInterestRateTypeCodeConfidenceRank',
        'enriched_term' => 'getEnrichedTerm',
        'enriched_term_confidence_rank' => 'getEnrichedTermConfidenceRank',
        'enriched_term_code' => 'getEnrichedTermCode',
        'enriched_term_code_confidence_rank' => 'getEnrichedTermCodeConfidenceRank',
        'mortgage_date' => 'getMortgageDate',
        'maturity_date' => 'getMaturityDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['mortgage_composite_transaction_id'] = isset($data['mortgage_composite_transaction_id']) ? $data['mortgage_composite_transaction_id'] : null;
        $this->container['enriched_ltv'] = isset($data['enriched_ltv']) ? $data['enriched_ltv'] : null;
        $this->container['multi_or_split_parcel_code'] = isset($data['multi_or_split_parcel_code']) ? $data['multi_or_split_parcel_code'] : null;
        $this->container['enriched_mortgage_lien_position'] = isset($data['enriched_mortgage_lien_position']) ? $data['enriched_mortgage_lien_position'] : null;
        $this->container['type_code'] = isset($data['type_code']) ? $data['type_code'] : null;
        $this->container['purpose_code'] = isset($data['purpose_code']) ? $data['purpose_code'] : null;
        $this->container['subordinate_type_code'] = isset($data['subordinate_type_code']) ? $data['subordinate_type_code'] : null;
        $this->container['subordinate_type_code_description'] = isset($data['subordinate_type_code_description']) ? $data['subordinate_type_code_description'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['enriched_loan_type_code'] = isset($data['enriched_loan_type_code']) ? $data['enriched_loan_type_code'] : null;
        $this->container['enriched_loan_type_code_confidence_rank'] = isset($data['enriched_loan_type_code_confidence_rank']) ? $data['enriched_loan_type_code_confidence_rank'] : null;
        $this->container['enriched_interest_rate'] = isset($data['enriched_interest_rate']) ? $data['enriched_interest_rate'] : null;
        $this->container['enriched_interest_rate_confidence_rank'] = isset($data['enriched_interest_rate_confidence_rank']) ? $data['enriched_interest_rate_confidence_rank'] : null;
        $this->container['enriched_interest_rate_type_code'] = isset($data['enriched_interest_rate_type_code']) ? $data['enriched_interest_rate_type_code'] : null;
        $this->container['enriched_interest_rate_type_code_confidence_rank'] = isset($data['enriched_interest_rate_type_code_confidence_rank']) ? $data['enriched_interest_rate_type_code_confidence_rank'] : null;
        $this->container['enriched_term'] = isset($data['enriched_term']) ? $data['enriched_term'] : null;
        $this->container['enriched_term_confidence_rank'] = isset($data['enriched_term_confidence_rank']) ? $data['enriched_term_confidence_rank'] : null;
        $this->container['enriched_term_code'] = isset($data['enriched_term_code']) ? $data['enriched_term_code'] : null;
        $this->container['enriched_term_code_confidence_rank'] = isset($data['enriched_term_code_confidence_rank']) ? $data['enriched_term_code_confidence_rank'] : null;
        $this->container['mortgage_date'] = isset($data['mortgage_date']) ? $data['mortgage_date'] : null;
        $this->container['maturity_date'] = isset($data['maturity_date']) ? $data['maturity_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets mortgage_composite_transaction_id
     *
     * @return string
     */
    public function getMortgageCompositeTransactionId()
    {
        return $this->container['mortgage_composite_transaction_id'];
    }

    /**
     * Sets mortgage_composite_transaction_id
     *
     * @param string $mortgage_composite_transaction_id Unique transaction key comprised of FIPS Code, Transaction Batch Date, Transaction Sequence Number, and Mortgage Sequence Number.
     *
     * @return $this
     */
    public function setMortgageCompositeTransactionId($mortgage_composite_transaction_id)
    {
        $this->container['mortgage_composite_transaction_id'] = $mortgage_composite_transaction_id;

        return $this;
    }

    /**
     * Gets enriched_ltv
     *
     * @return float
     */
    public function getEnrichedLtv()
    {
        return $this->container['enriched_ltv'];
    }

    /**
     * Sets enriched_ltv
     *
     * @param float $enriched_ltv Ratio of origination loan amount divided into current AVM value.
     *
     * @return $this
     */
    public function setEnrichedLtv($enriched_ltv)
    {
        $this->container['enriched_ltv'] = $enriched_ltv;

        return $this;
    }

    /**
     * Gets multi_or_split_parcel_code
     *
     * @return string
     */
    public function getMultiOrSplitParcelCode()
    {
        return $this->container['multi_or_split_parcel_code'];
    }

    /**
     * Sets multi_or_split_parcel_code
     *
     * @param string $multi_or_split_parcel_code Corelogic standardized code that identifies which parcel is being referenced in a multiple or split parcel sale. Values: NULL = Not applicable, M = First APN involved in the transaction of a multiple parcel sale, D = Second or subsequent APN involved in the transaction of a multiple parcel sale, S = Only APN involved in the transaction of a single parcel split, X = First APN involved in the transaction of a single parcel split, Z = Second or subsequent APN involved in the transaction of a single parcel split
     *
     * @return $this
     */
    public function setMultiOrSplitParcelCode($multi_or_split_parcel_code)
    {
        $this->container['multi_or_split_parcel_code'] = $multi_or_split_parcel_code;

        return $this;
    }

    /**
     * Gets enriched_mortgage_lien_position
     *
     * @return int
     */
    public function getEnrichedMortgageLienPosition()
    {
        return $this->container['enriched_mortgage_lien_position'];
    }

    /**
     * Sets enriched_mortgage_lien_position
     *
     * @param int $enriched_mortgage_lien_position CoreLogic derived position or priority of the recorded property lien. A purchase mortgage loan is usually lien position one (1), with the highest outstanding mortgage amount and recorded first. All other junior liens are subordinate.
     *
     * @return $this
     */
    public function setEnrichedMortgageLienPosition($enriched_mortgage_lien_position)
    {
        $this->container['enriched_mortgage_lien_position'] = $enriched_mortgage_lien_position;

        return $this;
    }

    /**
     * Gets type_code
     *
     * @return string
     */
    public function getTypeCode()
    {
        return $this->container['type_code'];
    }

    /**
     * Sets type_code
     *
     * @param string $type_code CoreLogic standardized mortgage classification for principal mortgages ('P'urchase, 'R'efinance) or subordinate mortgages ('J'unior).
     *
     * @return $this
     */
    public function setTypeCode($type_code)
    {
        $this->container['type_code'] = $type_code;

        return $this;
    }

    /**
     * Gets purpose_code
     *
     * @return string
     */
    public function getPurposeCode()
    {
        return $this->container['purpose_code'];
    }

    /**
     * Sets purpose_code
     *
     * @param string $purpose_code CoreLogic standardized value indicating the reason for the principal or subordinate mortgage.  Won't be populated on pending record.  Values:  A = Cash out first, B = Rate/Term reduction, C = Piggy-back on purchase, D = Standalone subordinate, E = First with subordinate, F = New first mortgage, K = Consolidation, L = Undetermined first mortgage, M = Undetermined standalone subordinate, N = Piggy-back on refinance, O = HUD reverse mortgage, P = First trust modification, Q = Junior trust modification, V = Reverse mortgage
     *
     * @return $this
     */
    public function setPurposeCode($purpose_code)
    {
        $this->container['purpose_code'] = $purpose_code;

        return $this;
    }

    /**
     * Gets subordinate_type_code
     *
     * @return string
     */
    public function getSubordinateTypeCode()
    {
        return $this->container['subordinate_type_code'];
    }

    /**
     * Sets subordinate_type_code
     *
     * @param string $subordinate_type_code CoreLogic code indicating the type of subordinate mortgage secured. (e.g., 'C'redit Line, 'E'quity, Ba'L'loon).  Won't be populated on pending record. Used with Mortgage Subordinate Type Code Description element.
     *
     * @return $this
     */
    public function setSubordinateTypeCode($subordinate_type_code)
    {
        $this->container['subordinate_type_code'] = $subordinate_type_code;

        return $this;
    }

    /**
     * Gets subordinate_type_code_description
     *
     * @return string
     */
    public function getSubordinateTypeCodeDescription()
    {
        return $this->container['subordinate_type_code_description'];
    }

    /**
     * Sets subordinate_type_code_description
     *
     * @param string $subordinate_type_code_description CoreLogic standardized description indicating the type of subordinate mortgage secured. (e.g., 'C'redit Line, 'E'quity, Ba'L'loon). Won't be populated on pending record. Defines the code found in Mortgage Subordinate Type Code element.
     *
     * @return $this
     */
    public function setSubordinateTypeCodeDescription($subordinate_type_code_description)
    {
        $this->container['subordinate_type_code_description'] = $subordinate_type_code_description;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float $amount The amount of the mortgage at the time of the transaction.
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets enriched_loan_type_code
     *
     * @return string
     */
    public function getEnrichedLoanTypeCode()
    {
        return $this->container['enriched_loan_type_code'];
    }

    /**
     * Sets enriched_loan_type_code
     *
     * @param string $enriched_loan_type_code CoreLogic enriched type of loan secured, identified  Values: CNV = Conventional FHA = Federal Housing Administration VA = Veterans Administration PP = Private Party SBA = Small Business Association EMPTY/NULL = Unknown The Enriched proprietary logic is designed to improve completeness and accuracy.
     *
     * @return $this
     */
    public function setEnrichedLoanTypeCode($enriched_loan_type_code)
    {
        $this->container['enriched_loan_type_code'] = $enriched_loan_type_code;

        return $this;
    }

    /**
     * Gets enriched_loan_type_code_confidence_rank
     *
     * @return int
     */
    public function getEnrichedLoanTypeCodeConfidenceRank()
    {
        return $this->container['enriched_loan_type_code_confidence_rank'];
    }

    /**
     * Sets enriched_loan_type_code_confidence_rank
     *
     * @param int $enriched_loan_type_code_confidence_rank A rank of 1-5 depicting the confidence level of the Mortgage Loan Type Code. 5 is the most confident ranking. Rank descriptions: 5 = Excellent; 4 = Very Good; 3 = Good; 2 = Fair; 1 = Very Low. NULL if value is not Enriched.
     *
     * @return $this
     */
    public function setEnrichedLoanTypeCodeConfidenceRank($enriched_loan_type_code_confidence_rank)
    {
        $this->container['enriched_loan_type_code_confidence_rank'] = $enriched_loan_type_code_confidence_rank;

        return $this;
    }

    /**
     * Gets enriched_interest_rate
     *
     * @return float
     */
    public function getEnrichedInterestRate()
    {
        return $this->container['enriched_interest_rate'];
    }

    /**
     * Sets enriched_interest_rate
     *
     * @param float $enriched_interest_rate Fixed interest rate at mortgage origination derived from recorded loan documents or enriched through additional data sources and predictive machine learning models. Adjustable interest rate per the recorded loan documents for mortgage records. Example rates: 3.75 or 5.25
     *
     * @return $this
     */
    public function setEnrichedInterestRate($enriched_interest_rate)
    {
        $this->container['enriched_interest_rate'] = $enriched_interest_rate;

        return $this;
    }

    /**
     * Gets enriched_interest_rate_confidence_rank
     *
     * @return int
     */
    public function getEnrichedInterestRateConfidenceRank()
    {
        return $this->container['enriched_interest_rate_confidence_rank'];
    }

    /**
     * Sets enriched_interest_rate_confidence_rank
     *
     * @param int $enriched_interest_rate_confidence_rank A rank of 1-5 depicting the confidence level of the Mortgage Interest Rate. 5 is the most confident ranking. Rank descriptions: 5 = Excellent; 4 = Very Good; 3 = Good; 2 = Fair; 1 = Very Low. NULL if value is not Enriched.
     *
     * @return $this
     */
    public function setEnrichedInterestRateConfidenceRank($enriched_interest_rate_confidence_rank)
    {
        $this->container['enriched_interest_rate_confidence_rank'] = $enriched_interest_rate_confidence_rank;

        return $this;
    }

    /**
     * Gets enriched_interest_rate_type_code
     *
     * @return string
     */
    public function getEnrichedInterestRateTypeCode()
    {
        return $this->container['enriched_interest_rate_type_code'];
    }

    /**
     * Sets enriched_interest_rate_type_code
     *
     * @param string $enriched_interest_rate_type_code CoreLogic enriched value indicating the type of mortgage interest rate. The Enriched proprietary logic is designed to improve completeness and accuracy.  Values: NULL = Unknown, ADJ = Adjustable, BAL = Balloon, FIX = Fixed
     *
     * @return $this
     */
    public function setEnrichedInterestRateTypeCode($enriched_interest_rate_type_code)
    {
        $this->container['enriched_interest_rate_type_code'] = $enriched_interest_rate_type_code;

        return $this;
    }

    /**
     * Gets enriched_interest_rate_type_code_confidence_rank
     *
     * @return int
     */
    public function getEnrichedInterestRateTypeCodeConfidenceRank()
    {
        return $this->container['enriched_interest_rate_type_code_confidence_rank'];
    }

    /**
     * Sets enriched_interest_rate_type_code_confidence_rank
     *
     * @param int $enriched_interest_rate_type_code_confidence_rank A rank of 1-5 depicting the confidence level of the Mortgage Interest Rate Type Code. 5 is the most confident ranking. Rank descriptions: 5 = Excellent; 4 = Very Good; 3 = Good; 2 = Fair; 1 = Very Low. NULL if value is not Enriched.
     *
     * @return $this
     */
    public function setEnrichedInterestRateTypeCodeConfidenceRank($enriched_interest_rate_type_code_confidence_rank)
    {
        $this->container['enriched_interest_rate_type_code_confidence_rank'] = $enriched_interest_rate_type_code_confidence_rank;

        return $this;
    }

    /**
     * Gets enriched_term
     *
     * @return int
     */
    public function getEnrichedTerm()
    {
        return $this->container['enriched_term'];
    }

    /**
     * Sets enriched_term
     *
     * @param int $enriched_term Specific term associated with mortgage. Examples: 10, 15, 25
     *
     * @return $this
     */
    public function setEnrichedTerm($enriched_term)
    {
        $this->container['enriched_term'] = $enriched_term;

        return $this;
    }

    /**
     * Gets enriched_term_confidence_rank
     *
     * @return int
     */
    public function getEnrichedTermConfidenceRank()
    {
        return $this->container['enriched_term_confidence_rank'];
    }

    /**
     * Sets enriched_term_confidence_rank
     *
     * @param int $enriched_term_confidence_rank A rank of 1-5 depicting the confidence level of the Mortgage Term. 5 is the most confident ranking. Rank descriptions: 5 = Excellent; 4 = Very Good; 3 = Good; 2 = Fair; 1 = Very Low. NULL if value is not Enriched.
     *
     * @return $this
     */
    public function setEnrichedTermConfidenceRank($enriched_term_confidence_rank)
    {
        $this->container['enriched_term_confidence_rank'] = $enriched_term_confidence_rank;

        return $this;
    }

    /**
     * Gets enriched_term_code
     *
     * @return string
     */
    public function getEnrichedTermCode()
    {
        return $this->container['enriched_term_code'];
    }

    /**
     * Sets enriched_term_code
     *
     * @param string $enriched_term_code Code used to identify whether the number stored in MORTGAGE TERM is in days, months or years. Enriched data is represented by 'Y'EARS only.
     *
     * @return $this
     */
    public function setEnrichedTermCode($enriched_term_code)
    {
        $this->container['enriched_term_code'] = $enriched_term_code;

        return $this;
    }

    /**
     * Gets enriched_term_code_confidence_rank
     *
     * @return int
     */
    public function getEnrichedTermCodeConfidenceRank()
    {
        return $this->container['enriched_term_code_confidence_rank'];
    }

    /**
     * Sets enriched_term_code_confidence_rank
     *
     * @param int $enriched_term_code_confidence_rank A rank of 1-5 depicting the confidence level of the Mortgage Term Code. 5 is the most confident ranking. Rank descriptions: 5 = Excellent; 4 = Very Good; 3 = Good; 2 = Fair; 1 = Very Low. NULL if value is not Enriched.
     *
     * @return $this
     */
    public function setEnrichedTermCodeConfidenceRank($enriched_term_code_confidence_rank)
    {
        $this->container['enriched_term_code_confidence_rank'] = $enriched_term_code_confidence_rank;

        return $this;
    }

    /**
     * Gets mortgage_date
     *
     * @return int
     */
    public function getMortgageDate()
    {
        return $this->container['mortgage_date'];
    }

    /**
     * Sets mortgage_date
     *
     * @param int $mortgage_date Borrower's signature date on mortgage/deed of trust. This represents the date the borrower's obligation to the lender begins, i.e. loan open date. This date is the same or prior to the recording date. If the day and/or month is missing, CoreLogic populates these values with 00. Format: YYYYMMDD.
     *
     * @return $this
     */
    public function setMortgageDate($mortgage_date)
    {
        $this->container['mortgage_date'] = $mortgage_date;

        return $this;
    }

    /**
     * Gets maturity_date
     *
     * @return int
     */
    public function getMaturityDate()
    {
        return $this->container['maturity_date'];
    }

    /**
     * Sets maturity_date
     *
     * @param int $maturity_date The date the mortgage becomes due. Format: YYYYMMDD.
     *
     * @return $this
     */
    public function setMaturityDate($maturity_date)
    {
        $this->container['maturity_date'] = $maturity_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
