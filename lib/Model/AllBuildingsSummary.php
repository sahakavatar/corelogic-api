<?php
/**
 * AllBuildingsSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AllBuildingsSummary Class Doc Comment
 *
 * @category Class
 * @description All Buildings Summary.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AllBuildingsSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AllBuildingsSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'buildings_count' => 'int',
        'units_count' => 'int',
        'rooms_count' => 'float',
        'bedrooms_count' => 'int',
        'bathrooms_count' => 'float',
        'full_bathrooms_count' => 'int',
        'half_bathrooms_count' => 'int',
        'one_qtr_bathrooms_count' => 'int',
        'three_qtr_bathrooms_count' => 'int',
        'bathroom_fixtures_count' => 'int',
        'fireplaces_count' => 'int',
        'living_area_square_feet' => 'float',
        'total_area_square_feet' => 'float',
        'open_areas_square_feet' => 'float',
        'office_space_square_feet' => 'float',
        'elevators_count' => 'int',
        'loading_docks_count' => 'int',
        'rail_spurs_count' => 'int',
        'truck_doors_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'buildings_count' => 'int32',
        'units_count' => 'int32',
        'rooms_count' => null,
        'bedrooms_count' => 'int64',
        'bathrooms_count' => null,
        'full_bathrooms_count' => 'int64',
        'half_bathrooms_count' => 'int64',
        'one_qtr_bathrooms_count' => 'int32',
        'three_qtr_bathrooms_count' => 'int32',
        'bathroom_fixtures_count' => 'int32',
        'fireplaces_count' => 'int64',
        'living_area_square_feet' => null,
        'total_area_square_feet' => null,
        'open_areas_square_feet' => null,
        'office_space_square_feet' => null,
        'elevators_count' => 'int32',
        'loading_docks_count' => 'int32',
        'rail_spurs_count' => 'int32',
        'truck_doors_count' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'buildings_count' => 'buildingsCount',
        'units_count' => 'unitsCount',
        'rooms_count' => 'roomsCount',
        'bedrooms_count' => 'bedroomsCount',
        'bathrooms_count' => 'bathroomsCount',
        'full_bathrooms_count' => 'fullBathroomsCount',
        'half_bathrooms_count' => 'halfBathroomsCount',
        'one_qtr_bathrooms_count' => 'oneQtrBathroomsCount',
        'three_qtr_bathrooms_count' => 'threeQtrBathroomsCount',
        'bathroom_fixtures_count' => 'bathroomFixturesCount',
        'fireplaces_count' => 'fireplacesCount',
        'living_area_square_feet' => 'livingAreaSquareFeet',
        'total_area_square_feet' => 'totalAreaSquareFeet',
        'open_areas_square_feet' => 'openAreasSquareFeet',
        'office_space_square_feet' => 'officeSpaceSquareFeet',
        'elevators_count' => 'elevatorsCount',
        'loading_docks_count' => 'loadingDocksCount',
        'rail_spurs_count' => 'railSpursCount',
        'truck_doors_count' => 'truckDoorsCount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'buildings_count' => 'setBuildingsCount',
        'units_count' => 'setUnitsCount',
        'rooms_count' => 'setRoomsCount',
        'bedrooms_count' => 'setBedroomsCount',
        'bathrooms_count' => 'setBathroomsCount',
        'full_bathrooms_count' => 'setFullBathroomsCount',
        'half_bathrooms_count' => 'setHalfBathroomsCount',
        'one_qtr_bathrooms_count' => 'setOneQtrBathroomsCount',
        'three_qtr_bathrooms_count' => 'setThreeQtrBathroomsCount',
        'bathroom_fixtures_count' => 'setBathroomFixturesCount',
        'fireplaces_count' => 'setFireplacesCount',
        'living_area_square_feet' => 'setLivingAreaSquareFeet',
        'total_area_square_feet' => 'setTotalAreaSquareFeet',
        'open_areas_square_feet' => 'setOpenAreasSquareFeet',
        'office_space_square_feet' => 'setOfficeSpaceSquareFeet',
        'elevators_count' => 'setElevatorsCount',
        'loading_docks_count' => 'setLoadingDocksCount',
        'rail_spurs_count' => 'setRailSpursCount',
        'truck_doors_count' => 'setTruckDoorsCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'buildings_count' => 'getBuildingsCount',
        'units_count' => 'getUnitsCount',
        'rooms_count' => 'getRoomsCount',
        'bedrooms_count' => 'getBedroomsCount',
        'bathrooms_count' => 'getBathroomsCount',
        'full_bathrooms_count' => 'getFullBathroomsCount',
        'half_bathrooms_count' => 'getHalfBathroomsCount',
        'one_qtr_bathrooms_count' => 'getOneQtrBathroomsCount',
        'three_qtr_bathrooms_count' => 'getThreeQtrBathroomsCount',
        'bathroom_fixtures_count' => 'getBathroomFixturesCount',
        'fireplaces_count' => 'getFireplacesCount',
        'living_area_square_feet' => 'getLivingAreaSquareFeet',
        'total_area_square_feet' => 'getTotalAreaSquareFeet',
        'open_areas_square_feet' => 'getOpenAreasSquareFeet',
        'office_space_square_feet' => 'getOfficeSpaceSquareFeet',
        'elevators_count' => 'getElevatorsCount',
        'loading_docks_count' => 'getLoadingDocksCount',
        'rail_spurs_count' => 'getRailSpursCount',
        'truck_doors_count' => 'getTruckDoorsCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['buildings_count'] = isset($data['buildings_count']) ? $data['buildings_count'] : null;
        $this->container['units_count'] = isset($data['units_count']) ? $data['units_count'] : null;
        $this->container['rooms_count'] = isset($data['rooms_count']) ? $data['rooms_count'] : null;
        $this->container['bedrooms_count'] = isset($data['bedrooms_count']) ? $data['bedrooms_count'] : null;
        $this->container['bathrooms_count'] = isset($data['bathrooms_count']) ? $data['bathrooms_count'] : null;
        $this->container['full_bathrooms_count'] = isset($data['full_bathrooms_count']) ? $data['full_bathrooms_count'] : null;
        $this->container['half_bathrooms_count'] = isset($data['half_bathrooms_count']) ? $data['half_bathrooms_count'] : null;
        $this->container['one_qtr_bathrooms_count'] = isset($data['one_qtr_bathrooms_count']) ? $data['one_qtr_bathrooms_count'] : null;
        $this->container['three_qtr_bathrooms_count'] = isset($data['three_qtr_bathrooms_count']) ? $data['three_qtr_bathrooms_count'] : null;
        $this->container['bathroom_fixtures_count'] = isset($data['bathroom_fixtures_count']) ? $data['bathroom_fixtures_count'] : null;
        $this->container['fireplaces_count'] = isset($data['fireplaces_count']) ? $data['fireplaces_count'] : null;
        $this->container['living_area_square_feet'] = isset($data['living_area_square_feet']) ? $data['living_area_square_feet'] : null;
        $this->container['total_area_square_feet'] = isset($data['total_area_square_feet']) ? $data['total_area_square_feet'] : null;
        $this->container['open_areas_square_feet'] = isset($data['open_areas_square_feet']) ? $data['open_areas_square_feet'] : null;
        $this->container['office_space_square_feet'] = isset($data['office_space_square_feet']) ? $data['office_space_square_feet'] : null;
        $this->container['elevators_count'] = isset($data['elevators_count']) ? $data['elevators_count'] : null;
        $this->container['loading_docks_count'] = isset($data['loading_docks_count']) ? $data['loading_docks_count'] : null;
        $this->container['rail_spurs_count'] = isset($data['rail_spurs_count']) ? $data['rail_spurs_count'] : null;
        $this->container['truck_doors_count'] = isset($data['truck_doors_count']) ? $data['truck_doors_count'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets buildings_count
     *
     * @return int
     */
    public function getBuildingsCount()
    {
        return $this->container['buildings_count'];
    }

    /**
     * Sets buildings_count
     *
     * @param int $buildings_count Total number of buildings on the parcel.
     *
     * @return $this
     */
    public function setBuildingsCount($buildings_count)
    {
        $this->container['buildings_count'] = $buildings_count;

        return $this;
    }

    /**
     * Gets units_count
     *
     * @return int
     */
    public function getUnitsCount()
    {
        return $this->container['units_count'];
    }

    /**
     * Sets units_count
     *
     * @param int $units_count Number of residential, apartment or business units.
     *
     * @return $this
     */
    public function setUnitsCount($units_count)
    {
        $this->container['units_count'] = $units_count;

        return $this;
    }

    /**
     * Gets rooms_count
     *
     * @return float
     */
    public function getRoomsCount()
    {
        return $this->container['rooms_count'];
    }

    /**
     * Sets rooms_count
     *
     * @param float $rooms_count Total number of rooms as supplied by the source.
     *
     * @return $this
     */
    public function setRoomsCount($rooms_count)
    {
        $this->container['rooms_count'] = $rooms_count;

        return $this;
    }

    /**
     * Gets bedrooms_count
     *
     * @return int
     */
    public function getBedroomsCount()
    {
        return $this->container['bedrooms_count'];
    }

    /**
     * Sets bedrooms_count
     *
     * @param int $bedrooms_count CoreLogic calculated total bedrooms for all the buildings on the property.
     *
     * @return $this
     */
    public function setBedroomsCount($bedrooms_count)
    {
        $this->container['bedrooms_count'] = $bedrooms_count;

        return $this;
    }

    /**
     * Gets bathrooms_count
     *
     * @return float
     */
    public function getBathroomsCount()
    {
        return $this->container['bathrooms_count'];
    }

    /**
     * Sets bathrooms_count
     *
     * @param float $bathrooms_count Total number of rooms that are considered bathrooms across all buildings on the property. For example, a half bathroom is considered one room.
     *
     * @return $this
     */
    public function setBathroomsCount($bathrooms_count)
    {
        $this->container['bathrooms_count'] = $bathrooms_count;

        return $this;
    }

    /**
     * Gets full_bathrooms_count
     *
     * @return int
     */
    public function getFullBathroomsCount()
    {
        return $this->container['full_bathrooms_count'];
    }

    /**
     * Sets full_bathrooms_count
     *
     * @param int $full_bathrooms_count Total number of full bath rooms as supplied by source. If source does not break out full versus partial Baths -field will be null in this case.
     *
     * @return $this
     */
    public function setFullBathroomsCount($full_bathrooms_count)
    {
        $this->container['full_bathrooms_count'] = $full_bathrooms_count;

        return $this;
    }

    /**
     * Gets half_bathrooms_count
     *
     * @return int
     */
    public function getHalfBathroomsCount()
    {
        return $this->container['half_bathrooms_count'];
    }

    /**
     * Sets half_bathrooms_count
     *
     * @param int $half_bathrooms_count Total number of half bath rooms (typically comprised of a sink & toilet) as supplied by source. If source does not break out full versus partial Baths &#45; field will be null in this case.
     *
     * @return $this
     */
    public function setHalfBathroomsCount($half_bathrooms_count)
    {
        $this->container['half_bathrooms_count'] = $half_bathrooms_count;

        return $this;
    }

    /**
     * Gets one_qtr_bathrooms_count
     *
     * @return int
     */
    public function getOneQtrBathroomsCount()
    {
        return $this->container['one_qtr_bathrooms_count'];
    }

    /**
     * Sets one_qtr_bathrooms_count
     *
     * @param int $one_qtr_bathrooms_count Total number of quarter bath rooms (typically comprised only of a sink, as found in many laundry rooms) as supplied by source. If source does not break out full versus partial Baths &#45; field will be null in this case.
     *
     * @return $this
     */
    public function setOneQtrBathroomsCount($one_qtr_bathrooms_count)
    {
        $this->container['one_qtr_bathrooms_count'] = $one_qtr_bathrooms_count;

        return $this;
    }

    /**
     * Gets three_qtr_bathrooms_count
     *
     * @return int
     */
    public function getThreeQtrBathroomsCount()
    {
        return $this->container['three_qtr_bathrooms_count'];
    }

    /**
     * Sets three_qtr_bathrooms_count
     *
     * @param int $three_qtr_bathrooms_count Total number of three-quarter bath rooms (typically comprised of a sink, toilet & shower stall) as supplied by source. If source does not break out full versus partial Baths &#45; field will be null in this case.
     *
     * @return $this
     */
    public function setThreeQtrBathroomsCount($three_qtr_bathrooms_count)
    {
        $this->container['three_qtr_bathrooms_count'] = $three_qtr_bathrooms_count;

        return $this;
    }

    /**
     * Gets bathroom_fixtures_count
     *
     * @return int
     */
    public function getBathroomFixturesCount()
    {
        return $this->container['bathroom_fixtures_count'];
    }

    /**
     * Sets bathroom_fixtures_count
     *
     * @param int $bathroom_fixtures_count CoreLogic calculated total designated bath fixtures associated with all the bathrooms in all the buildings on the property. Examples: sink, toilet, shower stall, tub and faucets.
     *
     * @return $this
     */
    public function setBathroomFixturesCount($bathroom_fixtures_count)
    {
        $this->container['bathroom_fixtures_count'] = $bathroom_fixtures_count;

        return $this;
    }

    /**
     * Gets fireplaces_count
     *
     * @return int
     */
    public function getFireplacesCount()
    {
        return $this->container['fireplaces_count'];
    }

    /**
     * Sets fireplaces_count
     *
     * @param int $fireplaces_count This represents the number of fireplace openings located within the building.
     *
     * @return $this
     */
    public function setFireplacesCount($fireplaces_count)
    {
        $this->container['fireplaces_count'] = $fireplaces_count;

        return $this;
    }

    /**
     * Gets living_area_square_feet
     *
     * @return float
     */
    public function getLivingAreaSquareFeet()
    {
        return $this->container['living_area_square_feet'];
    }

    /**
     * Sets living_area_square_feet
     *
     * @param float $living_area_square_feet This is the area of all buildings that are used for general living. This is typically the area of all buildings that is heated or air conditioned and generally does not include Garage, Porch or Unfinished Basement Square Footage values.
     *
     * @return $this
     */
    public function setLivingAreaSquareFeet($living_area_square_feet)
    {
        $this->container['living_area_square_feet'] = $living_area_square_feet;

        return $this;
    }

    /**
     * Gets total_area_square_feet
     *
     * @return float
     */
    public function getTotalAreaSquareFeet()
    {
        return $this->container['total_area_square_feet'];
    }

    /**
     * Sets total_area_square_feet
     *
     * @param float $total_area_square_feet CoreLogic calculated total square footage allocated to all square footage for all buildings on the property.
     *
     * @return $this
     */
    public function setTotalAreaSquareFeet($total_area_square_feet)
    {
        $this->container['total_area_square_feet'] = $total_area_square_feet;

        return $this;
    }

    /**
     * Gets open_areas_square_feet
     *
     * @return float
     */
    public function getOpenAreasSquareFeet()
    {
        return $this->container['open_areas_square_feet'];
    }

    /**
     * Sets open_areas_square_feet
     *
     * @param float $open_areas_square_feet CoreLogic calculated total square footage allocated to all open areas for the property.
     *
     * @return $this
     */
    public function setOpenAreasSquareFeet($open_areas_square_feet)
    {
        $this->container['open_areas_square_feet'] = $open_areas_square_feet;

        return $this;
    }

    /**
     * Gets office_space_square_feet
     *
     * @return float
     */
    public function getOfficeSpaceSquareFeet()
    {
        return $this->container['office_space_square_feet'];
    }

    /**
     * Sets office_space_square_feet
     *
     * @param float $office_space_square_feet CoreLogic calculated total office area square footage in all the buildings on the property.
     *
     * @return $this
     */
    public function setOfficeSpaceSquareFeet($office_space_square_feet)
    {
        $this->container['office_space_square_feet'] = $office_space_square_feet;

        return $this;
    }

    /**
     * Gets elevators_count
     *
     * @return int
     */
    public function getElevatorsCount()
    {
        return $this->container['elevators_count'];
    }

    /**
     * Sets elevators_count
     *
     * @param int $elevators_count CoreLogic calculated total number of elevators for all the buildings on the property. This is mostly in use for commercial buildings.
     *
     * @return $this
     */
    public function setElevatorsCount($elevators_count)
    {
        $this->container['elevators_count'] = $elevators_count;

        return $this;
    }

    /**
     * Gets loading_docks_count
     *
     * @return int
     */
    public function getLoadingDocksCount()
    {
        return $this->container['loading_docks_count'];
    }

    /**
     * Sets loading_docks_count
     *
     * @param int $loading_docks_count CoreLogic calculated total of loading docks for all the buildings on the property. This is mostly in use for commercial buildings.
     *
     * @return $this
     */
    public function setLoadingDocksCount($loading_docks_count)
    {
        $this->container['loading_docks_count'] = $loading_docks_count;

        return $this;
    }

    /**
     * Gets rail_spurs_count
     *
     * @return int
     */
    public function getRailSpursCount()
    {
        return $this->container['rail_spurs_count'];
    }

    /**
     * Sets rail_spurs_count
     *
     * @param int $rail_spurs_count CoreLogic calculated total of rail spurs for all the buildings on the property. This is mostly in use for commercial buildings.
     *
     * @return $this
     */
    public function setRailSpursCount($rail_spurs_count)
    {
        $this->container['rail_spurs_count'] = $rail_spurs_count;

        return $this;
    }

    /**
     * Gets truck_doors_count
     *
     * @return int
     */
    public function getTruckDoorsCount()
    {
        return $this->container['truck_doors_count'];
    }

    /**
     * Sets truck_doors_count
     *
     * @param int $truck_doors_count CoreLogic calculated total number of truck doors for all the buildings on the property. This is mostly in use for commercial buildings.
     *
     * @return $this
     */
    public function setTruckDoorsCount($truck_doors_count)
    {
        $this->container['truck_doors_count'] = $truck_doors_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
