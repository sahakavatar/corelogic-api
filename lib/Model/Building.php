<?php
/**
 * Building
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Building Class Doc Comment
 *
 * @category Class
 * @description Buildings.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Building implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Building';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'structure_id' => '\Swagger\Client\Model\StructureId',
        'structure_classification' => '\Swagger\Client\Model\StructureClassification',
        'structure_footprint' => '\Swagger\Client\Model\StructureFootprint',
        'structure_units_summary' => '\Swagger\Client\Model\StructureUnitsSummary',
        'structure_vertical_profile' => '\Swagger\Client\Model\StructureVerticalProfile',
        'construction_details' => '\Swagger\Client\Model\ConstructionDetails',
        'structure_exterior' => '\Swagger\Client\Model\StructureExterior',
        'structure_interior' => '\Swagger\Client\Model\StructureInterior',
        'interior_area' => '\Swagger\Client\Model\InteriorArea',
        'interior_rooms' => '\Swagger\Client\Model\InteriorRooms',
        'structure_features' => '\Swagger\Client\Model\StructureFeatures'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'structure_id' => null,
        'structure_classification' => null,
        'structure_footprint' => null,
        'structure_units_summary' => null,
        'structure_vertical_profile' => null,
        'construction_details' => null,
        'structure_exterior' => null,
        'structure_interior' => null,
        'interior_area' => null,
        'interior_rooms' => null,
        'structure_features' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'structure_id' => 'structureId',
        'structure_classification' => 'structureClassification',
        'structure_footprint' => 'structureFootprint',
        'structure_units_summary' => 'structureUnitsSummary',
        'structure_vertical_profile' => 'structureVerticalProfile',
        'construction_details' => 'constructionDetails',
        'structure_exterior' => 'structureExterior',
        'structure_interior' => 'structureInterior',
        'interior_area' => 'interiorArea',
        'interior_rooms' => 'interiorRooms',
        'structure_features' => 'structureFeatures'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'structure_id' => 'setStructureId',
        'structure_classification' => 'setStructureClassification',
        'structure_footprint' => 'setStructureFootprint',
        'structure_units_summary' => 'setStructureUnitsSummary',
        'structure_vertical_profile' => 'setStructureVerticalProfile',
        'construction_details' => 'setConstructionDetails',
        'structure_exterior' => 'setStructureExterior',
        'structure_interior' => 'setStructureInterior',
        'interior_area' => 'setInteriorArea',
        'interior_rooms' => 'setInteriorRooms',
        'structure_features' => 'setStructureFeatures'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'structure_id' => 'getStructureId',
        'structure_classification' => 'getStructureClassification',
        'structure_footprint' => 'getStructureFootprint',
        'structure_units_summary' => 'getStructureUnitsSummary',
        'structure_vertical_profile' => 'getStructureVerticalProfile',
        'construction_details' => 'getConstructionDetails',
        'structure_exterior' => 'getStructureExterior',
        'structure_interior' => 'getStructureInterior',
        'interior_area' => 'getInteriorArea',
        'interior_rooms' => 'getInteriorRooms',
        'structure_features' => 'getStructureFeatures'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['structure_id'] = isset($data['structure_id']) ? $data['structure_id'] : null;
        $this->container['structure_classification'] = isset($data['structure_classification']) ? $data['structure_classification'] : null;
        $this->container['structure_footprint'] = isset($data['structure_footprint']) ? $data['structure_footprint'] : null;
        $this->container['structure_units_summary'] = isset($data['structure_units_summary']) ? $data['structure_units_summary'] : null;
        $this->container['structure_vertical_profile'] = isset($data['structure_vertical_profile']) ? $data['structure_vertical_profile'] : null;
        $this->container['construction_details'] = isset($data['construction_details']) ? $data['construction_details'] : null;
        $this->container['structure_exterior'] = isset($data['structure_exterior']) ? $data['structure_exterior'] : null;
        $this->container['structure_interior'] = isset($data['structure_interior']) ? $data['structure_interior'] : null;
        $this->container['interior_area'] = isset($data['interior_area']) ? $data['interior_area'] : null;
        $this->container['interior_rooms'] = isset($data['interior_rooms']) ? $data['interior_rooms'] : null;
        $this->container['structure_features'] = isset($data['structure_features']) ? $data['structure_features'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets structure_id
     *
     * @return \Swagger\Client\Model\StructureId
     */
    public function getStructureId()
    {
        return $this->container['structure_id'];
    }

    /**
     * Sets structure_id
     *
     * @param \Swagger\Client\Model\StructureId $structure_id structure_id
     *
     * @return $this
     */
    public function setStructureId($structure_id)
    {
        $this->container['structure_id'] = $structure_id;

        return $this;
    }

    /**
     * Gets structure_classification
     *
     * @return \Swagger\Client\Model\StructureClassification
     */
    public function getStructureClassification()
    {
        return $this->container['structure_classification'];
    }

    /**
     * Sets structure_classification
     *
     * @param \Swagger\Client\Model\StructureClassification $structure_classification structure_classification
     *
     * @return $this
     */
    public function setStructureClassification($structure_classification)
    {
        $this->container['structure_classification'] = $structure_classification;

        return $this;
    }

    /**
     * Gets structure_footprint
     *
     * @return \Swagger\Client\Model\StructureFootprint
     */
    public function getStructureFootprint()
    {
        return $this->container['structure_footprint'];
    }

    /**
     * Sets structure_footprint
     *
     * @param \Swagger\Client\Model\StructureFootprint $structure_footprint structure_footprint
     *
     * @return $this
     */
    public function setStructureFootprint($structure_footprint)
    {
        $this->container['structure_footprint'] = $structure_footprint;

        return $this;
    }

    /**
     * Gets structure_units_summary
     *
     * @return \Swagger\Client\Model\StructureUnitsSummary
     */
    public function getStructureUnitsSummary()
    {
        return $this->container['structure_units_summary'];
    }

    /**
     * Sets structure_units_summary
     *
     * @param \Swagger\Client\Model\StructureUnitsSummary $structure_units_summary structure_units_summary
     *
     * @return $this
     */
    public function setStructureUnitsSummary($structure_units_summary)
    {
        $this->container['structure_units_summary'] = $structure_units_summary;

        return $this;
    }

    /**
     * Gets structure_vertical_profile
     *
     * @return \Swagger\Client\Model\StructureVerticalProfile
     */
    public function getStructureVerticalProfile()
    {
        return $this->container['structure_vertical_profile'];
    }

    /**
     * Sets structure_vertical_profile
     *
     * @param \Swagger\Client\Model\StructureVerticalProfile $structure_vertical_profile structure_vertical_profile
     *
     * @return $this
     */
    public function setStructureVerticalProfile($structure_vertical_profile)
    {
        $this->container['structure_vertical_profile'] = $structure_vertical_profile;

        return $this;
    }

    /**
     * Gets construction_details
     *
     * @return \Swagger\Client\Model\ConstructionDetails
     */
    public function getConstructionDetails()
    {
        return $this->container['construction_details'];
    }

    /**
     * Sets construction_details
     *
     * @param \Swagger\Client\Model\ConstructionDetails $construction_details construction_details
     *
     * @return $this
     */
    public function setConstructionDetails($construction_details)
    {
        $this->container['construction_details'] = $construction_details;

        return $this;
    }

    /**
     * Gets structure_exterior
     *
     * @return \Swagger\Client\Model\StructureExterior
     */
    public function getStructureExterior()
    {
        return $this->container['structure_exterior'];
    }

    /**
     * Sets structure_exterior
     *
     * @param \Swagger\Client\Model\StructureExterior $structure_exterior structure_exterior
     *
     * @return $this
     */
    public function setStructureExterior($structure_exterior)
    {
        $this->container['structure_exterior'] = $structure_exterior;

        return $this;
    }

    /**
     * Gets structure_interior
     *
     * @return \Swagger\Client\Model\StructureInterior
     */
    public function getStructureInterior()
    {
        return $this->container['structure_interior'];
    }

    /**
     * Sets structure_interior
     *
     * @param \Swagger\Client\Model\StructureInterior $structure_interior structure_interior
     *
     * @return $this
     */
    public function setStructureInterior($structure_interior)
    {
        $this->container['structure_interior'] = $structure_interior;

        return $this;
    }

    /**
     * Gets interior_area
     *
     * @return \Swagger\Client\Model\InteriorArea
     */
    public function getInteriorArea()
    {
        return $this->container['interior_area'];
    }

    /**
     * Sets interior_area
     *
     * @param \Swagger\Client\Model\InteriorArea $interior_area interior_area
     *
     * @return $this
     */
    public function setInteriorArea($interior_area)
    {
        $this->container['interior_area'] = $interior_area;

        return $this;
    }

    /**
     * Gets interior_rooms
     *
     * @return \Swagger\Client\Model\InteriorRooms
     */
    public function getInteriorRooms()
    {
        return $this->container['interior_rooms'];
    }

    /**
     * Sets interior_rooms
     *
     * @param \Swagger\Client\Model\InteriorRooms $interior_rooms interior_rooms
     *
     * @return $this
     */
    public function setInteriorRooms($interior_rooms)
    {
        $this->container['interior_rooms'] = $interior_rooms;

        return $this;
    }

    /**
     * Gets structure_features
     *
     * @return \Swagger\Client\Model\StructureFeatures
     */
    public function getStructureFeatures()
    {
        return $this->container['structure_features'];
    }

    /**
     * Sets structure_features
     *
     * @param \Swagger\Client\Model\StructureFeatures $structure_features structure_features
     *
     * @return $this
     */
    public function setStructureFeatures($structure_features)
    {
        $this->container['structure_features'] = $structure_features;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
