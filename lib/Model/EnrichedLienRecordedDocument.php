<?php
/**
 * EnrichedLienRecordedDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnrichedLienRecordedDocument Class Doc Comment
 *
 * @category Class
 * @description Mortgage recorded document details.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnrichedLienRecordedDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnrichedLienRecordedDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recording_date' => 'int',
        'document_year' => 'int',
        'document_number' => 'string',
        'document_book_number' => 'string',
        'document_page_number' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recording_date' => 'int32',
        'document_year' => 'int32',
        'document_number' => null,
        'document_book_number' => null,
        'document_page_number' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recording_date' => 'recordingDate',
        'document_year' => 'documentYear',
        'document_number' => 'documentNumber',
        'document_book_number' => 'documentBookNumber',
        'document_page_number' => 'documentPageNumber'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recording_date' => 'setRecordingDate',
        'document_year' => 'setDocumentYear',
        'document_number' => 'setDocumentNumber',
        'document_book_number' => 'setDocumentBookNumber',
        'document_page_number' => 'setDocumentPageNumber'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recording_date' => 'getRecordingDate',
        'document_year' => 'getDocumentYear',
        'document_number' => 'getDocumentNumber',
        'document_book_number' => 'getDocumentBookNumber',
        'document_page_number' => 'getDocumentPageNumber'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recording_date'] = isset($data['recording_date']) ? $data['recording_date'] : null;
        $this->container['document_year'] = isset($data['document_year']) ? $data['document_year'] : null;
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['document_book_number'] = isset($data['document_book_number']) ? $data['document_book_number'] : null;
        $this->container['document_page_number'] = isset($data['document_page_number']) ? $data['document_page_number'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recording_date
     *
     * @return int
     */
    public function getRecordingDate()
    {
        return $this->container['recording_date'];
    }

    /**
     * Sets recording_date
     *
     * @param int $recording_date The date the mortgage transaction was recorded at the county. Format: YYYYMMDD.
     *
     * @return $this
     */
    public function setRecordingDate($recording_date)
    {
        $this->container['recording_date'] = $recording_date;

        return $this;
    }

    /**
     * Gets document_year
     *
     * @return int
     */
    public function getDocumentYear()
    {
        return $this->container['document_year'];
    }

    /**
     * Sets document_year
     *
     * @param int $document_year CoreLogic derived date that indicates the year the document was recorded at the county recorder office. A unique transaction key exists by combining the Transacation FIPS Code, Mortgage Loan Recorded Year and the Mortgage Recorded Document Number elements. Format: YYYY
     *
     * @return $this
     */
    public function setDocumentYear($document_year)
    {
        $this->container['document_year'] = $document_year;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number The document number used by some counties to record mortgage transactions.
     *
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets document_book_number
     *
     * @return string
     */
    public function getDocumentBookNumber()
    {
        return $this->container['document_book_number'];
    }

    /**
     * Sets document_book_number
     *
     * @param string $document_book_number The Book number used by some counties to catalog their mortgage recordings. (e.g., 001234)
     *
     * @return $this
     */
    public function setDocumentBookNumber($document_book_number)
    {
        $this->container['document_book_number'] = $document_book_number;

        return $this;
    }

    /**
     * Gets document_page_number
     *
     * @return string
     */
    public function getDocumentPageNumber()
    {
        return $this->container['document_page_number'];
    }

    /**
     * Sets document_page_number
     *
     * @param string $document_page_number The Page number used by some counties to catalog their mortgage recordings. (e.g., 001234)
     *
     * @return $this
     */
    public function setDocumentPageNumber($document_page_number)
    {
        $this->container['document_page_number'] = $document_page_number;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
