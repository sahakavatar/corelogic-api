<?php
/**
 * UtilitiesType
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UtilitiesType Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UtilitiesType implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UtilitiesType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fuel_type_code' => 'string',
        'electricity_wiring_type_code' => 'string',
        'sewer_type_code' => 'string',
        'utilities_type_code' => 'string',
        'water_type_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fuel_type_code' => null,
        'electricity_wiring_type_code' => null,
        'sewer_type_code' => null,
        'utilities_type_code' => null,
        'water_type_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fuel_type_code' => 'fuelTypeCode',
        'electricity_wiring_type_code' => 'electricityWiringTypeCode',
        'sewer_type_code' => 'sewerTypeCode',
        'utilities_type_code' => 'utilitiesTypeCode',
        'water_type_code' => 'waterTypeCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fuel_type_code' => 'setFuelTypeCode',
        'electricity_wiring_type_code' => 'setElectricityWiringTypeCode',
        'sewer_type_code' => 'setSewerTypeCode',
        'utilities_type_code' => 'setUtilitiesTypeCode',
        'water_type_code' => 'setWaterTypeCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fuel_type_code' => 'getFuelTypeCode',
        'electricity_wiring_type_code' => 'getElectricityWiringTypeCode',
        'sewer_type_code' => 'getSewerTypeCode',
        'utilities_type_code' => 'getUtilitiesTypeCode',
        'water_type_code' => 'getWaterTypeCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fuel_type_code'] = isset($data['fuel_type_code']) ? $data['fuel_type_code'] : null;
        $this->container['electricity_wiring_type_code'] = isset($data['electricity_wiring_type_code']) ? $data['electricity_wiring_type_code'] : null;
        $this->container['sewer_type_code'] = isset($data['sewer_type_code']) ? $data['sewer_type_code'] : null;
        $this->container['utilities_type_code'] = isset($data['utilities_type_code']) ? $data['utilities_type_code'] : null;
        $this->container['water_type_code'] = isset($data['water_type_code']) ? $data['water_type_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fuel_type_code
     *
     * @return string
     */
    public function getFuelTypeCode()
    {
        return $this->container['fuel_type_code'];
    }

    /**
     * Sets fuel_type_code
     *
     * @param string $fuel_type_code Description of the type of fuel used for heating to the parcel. (e.g., Solar, Gas, Oil).
     *
     * @return $this
     */
    public function setFuelTypeCode($fuel_type_code)
    {
        $this->container['fuel_type_code'] = $fuel_type_code;

        return $this;
    }

    /**
     * Gets electricity_wiring_type_code
     *
     * @return string
     */
    public function getElectricityWiringTypeCode()
    {
        return $this->container['electricity_wiring_type_code'];
    }

    /**
     * Sets electricity_wiring_type_code
     *
     * @param string $electricity_wiring_type_code Description of the type of electricity and/or type of wiring within the building (e.g., Average Wiring, Underground Wired, Private Source).
     *
     * @return $this
     */
    public function setElectricityWiringTypeCode($electricity_wiring_type_code)
    {
        $this->container['electricity_wiring_type_code'] = $electricity_wiring_type_code;

        return $this;
    }

    /**
     * Gets sewer_type_code
     *
     * @return string
     */
    public function getSewerTypeCode()
    {
        return $this->container['sewer_type_code'];
    }

    /**
     * Sets sewer_type_code
     *
     * @param string $sewer_type_code Type of sewer system on the parcel (e.g., Public, Septic, Commercial).
     *
     * @return $this
     */
    public function setSewerTypeCode($sewer_type_code)
    {
        $this->container['sewer_type_code'] = $sewer_type_code;

        return $this;
    }

    /**
     * Gets utilities_type_code
     *
     * @return string
     */
    public function getUtilitiesTypeCode()
    {
        return $this->container['utilities_type_code'];
    }

    /**
     * Sets utilities_type_code
     *
     * @param string $utilities_type_code Description of the type of utilities used in a building (e.g., Electric, Oil, Private).
     *
     * @return $this
     */
    public function setUtilitiesTypeCode($utilities_type_code)
    {
        $this->container['utilities_type_code'] = $utilities_type_code;

        return $this;
    }

    /**
     * Gets water_type_code
     *
     * @return string
     */
    public function getWaterTypeCode()
    {
        return $this->container['water_type_code'];
    }

    /**
     * Sets water_type_code
     *
     * @param string $water_type_code Description of the type of water service on the parcel (e.g., Public, Well, Cistern).
     *
     * @return $this
     */
    public function setWaterTypeCode($water_type_code)
    {
        $this->container['water_type_code'] = $water_type_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
