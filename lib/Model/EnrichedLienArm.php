<?php
/**
 * EnrichedLienArm
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnrichedLienArm Class Doc Comment
 *
 * @category Class
 * @description Arm details.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnrichedLienArm implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnrichedLienArm';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'initial_reset_date' => 'int',
        'next_reset_date' => 'int',
        'change_interval' => 'int',
        'frequency' => 'string',
        'calculation_change' => 'float',
        'maximum_interest_rate' => 'float',
        'index_type_code' => 'string',
        'change_percent_limit' => 'float',
        'initial_change_max_percent' => 'float',
        'lookback_period' => 'int',
        'payment_change_date' => 'int',
        'pay_option_indicator' => 'int',
        'interest_only_indicator' => 'int',
        'negative_amortization_indicator' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'initial_reset_date' => 'int32',
        'next_reset_date' => 'int32',
        'change_interval' => 'int32',
        'frequency' => null,
        'calculation_change' => null,
        'maximum_interest_rate' => null,
        'index_type_code' => null,
        'change_percent_limit' => null,
        'initial_change_max_percent' => null,
        'lookback_period' => 'int32',
        'payment_change_date' => 'int32',
        'pay_option_indicator' => 'int32',
        'interest_only_indicator' => 'int32',
        'negative_amortization_indicator' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'initial_reset_date' => 'initialResetDate',
        'next_reset_date' => 'nextResetDate',
        'change_interval' => 'changeInterval',
        'frequency' => 'frequency',
        'calculation_change' => 'calculationChange',
        'maximum_interest_rate' => 'maximumInterestRate',
        'index_type_code' => 'indexTypeCode',
        'change_percent_limit' => 'changePercentLimit',
        'initial_change_max_percent' => 'initialChangeMaxPercent',
        'lookback_period' => 'lookbackPeriod',
        'payment_change_date' => 'paymentChangeDate',
        'pay_option_indicator' => 'payOptionIndicator',
        'interest_only_indicator' => 'interestOnlyIndicator',
        'negative_amortization_indicator' => 'negativeAmortizationIndicator'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'initial_reset_date' => 'setInitialResetDate',
        'next_reset_date' => 'setNextResetDate',
        'change_interval' => 'setChangeInterval',
        'frequency' => 'setFrequency',
        'calculation_change' => 'setCalculationChange',
        'maximum_interest_rate' => 'setMaximumInterestRate',
        'index_type_code' => 'setIndexTypeCode',
        'change_percent_limit' => 'setChangePercentLimit',
        'initial_change_max_percent' => 'setInitialChangeMaxPercent',
        'lookback_period' => 'setLookbackPeriod',
        'payment_change_date' => 'setPaymentChangeDate',
        'pay_option_indicator' => 'setPayOptionIndicator',
        'interest_only_indicator' => 'setInterestOnlyIndicator',
        'negative_amortization_indicator' => 'setNegativeAmortizationIndicator'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'initial_reset_date' => 'getInitialResetDate',
        'next_reset_date' => 'getNextResetDate',
        'change_interval' => 'getChangeInterval',
        'frequency' => 'getFrequency',
        'calculation_change' => 'getCalculationChange',
        'maximum_interest_rate' => 'getMaximumInterestRate',
        'index_type_code' => 'getIndexTypeCode',
        'change_percent_limit' => 'getChangePercentLimit',
        'initial_change_max_percent' => 'getInitialChangeMaxPercent',
        'lookback_period' => 'getLookbackPeriod',
        'payment_change_date' => 'getPaymentChangeDate',
        'pay_option_indicator' => 'getPayOptionIndicator',
        'interest_only_indicator' => 'getInterestOnlyIndicator',
        'negative_amortization_indicator' => 'getNegativeAmortizationIndicator'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['initial_reset_date'] = isset($data['initial_reset_date']) ? $data['initial_reset_date'] : null;
        $this->container['next_reset_date'] = isset($data['next_reset_date']) ? $data['next_reset_date'] : null;
        $this->container['change_interval'] = isset($data['change_interval']) ? $data['change_interval'] : null;
        $this->container['frequency'] = isset($data['frequency']) ? $data['frequency'] : null;
        $this->container['calculation_change'] = isset($data['calculation_change']) ? $data['calculation_change'] : null;
        $this->container['maximum_interest_rate'] = isset($data['maximum_interest_rate']) ? $data['maximum_interest_rate'] : null;
        $this->container['index_type_code'] = isset($data['index_type_code']) ? $data['index_type_code'] : null;
        $this->container['change_percent_limit'] = isset($data['change_percent_limit']) ? $data['change_percent_limit'] : null;
        $this->container['initial_change_max_percent'] = isset($data['initial_change_max_percent']) ? $data['initial_change_max_percent'] : null;
        $this->container['lookback_period'] = isset($data['lookback_period']) ? $data['lookback_period'] : null;
        $this->container['payment_change_date'] = isset($data['payment_change_date']) ? $data['payment_change_date'] : null;
        $this->container['pay_option_indicator'] = isset($data['pay_option_indicator']) ? $data['pay_option_indicator'] : null;
        $this->container['interest_only_indicator'] = isset($data['interest_only_indicator']) ? $data['interest_only_indicator'] : null;
        $this->container['negative_amortization_indicator'] = isset($data['negative_amortization_indicator']) ? $data['negative_amortization_indicator'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets initial_reset_date
     *
     * @return int
     */
    public function getInitialResetDate()
    {
        return $this->container['initial_reset_date'];
    }

    /**
     * Sets initial_reset_date
     *
     * @param int $initial_reset_date CoreLogic derived interest rate change date for an adjustable mortgage. First interest rate reset date. Format: YYYYMMDD.
     *
     * @return $this
     */
    public function setInitialResetDate($initial_reset_date)
    {
        $this->container['initial_reset_date'] = $initial_reset_date;

        return $this;
    }

    /**
     * Gets next_reset_date
     *
     * @return int
     */
    public function getNextResetDate()
    {
        return $this->container['next_reset_date'];
    }

    /**
     * Sets next_reset_date
     *
     * @param int $next_reset_date Next interest rate change date after first change. Format: YYYYMMDD.
     *
     * @return $this
     */
    public function setNextResetDate($next_reset_date)
    {
        $this->container['next_reset_date'] = $next_reset_date;

        return $this;
    }

    /**
     * Gets change_interval
     *
     * @return int
     */
    public function getChangeInterval()
    {
        return $this->container['change_interval'];
    }

    /**
     * Sets change_interval
     *
     * @param int $change_interval Identifies the number of intervals for interest rate changes for an adjustable mortgage. Numeric value in conjunction with MORTGAGE ARM FREQUENCY.
     *
     * @return $this
     */
    public function setChangeInterval($change_interval)
    {
        $this->container['change_interval'] = $change_interval;

        return $this;
    }

    /**
     * Gets frequency
     *
     * @return string
     */
    public function getFrequency()
    {
        return $this->container['frequency'];
    }

    /**
     * Sets frequency
     *
     * @param string $frequency Indicates the measurement of time in relation to the interest rate reset/change of the adjustable mortgage. Values: W = Weekly; M = Monthly; Q = Quarterly; Y = Yearly.
     *
     * @return $this
     */
    public function setFrequency($frequency)
    {
        $this->container['frequency'] = $frequency;

        return $this;
    }

    /**
     * Gets calculation_change
     *
     * @return float
     */
    public function getCalculationChange()
    {
        return $this->container['calculation_change'];
    }

    /**
     * Sets calculation_change
     *
     * @param float $calculation_change Percentage points added to the Index rate to calculate the new interest rate. Value added to current index to determine new interest rate.  Only for adjustable rate mortgages.
     *
     * @return $this
     */
    public function setCalculationChange($calculation_change)
    {
        $this->container['calculation_change'] = $calculation_change;

        return $this;
    }

    /**
     * Gets maximum_interest_rate
     *
     * @return float
     */
    public function getMaximumInterestRate()
    {
        return $this->container['maximum_interest_rate'];
    }

    /**
     * Sets maximum_interest_rate
     *
     * @param float $maximum_interest_rate Maximum interest rate allowed per the life of the loan.  Lifetime interest rate maximum.  Only for adjustable rate mortgages.
     *
     * @return $this
     */
    public function setMaximumInterestRate($maximum_interest_rate)
    {
        $this->container['maximum_interest_rate'] = $maximum_interest_rate;

        return $this;
    }

    /**
     * Gets index_type_code
     *
     * @return string
     */
    public function getIndexTypeCode()
    {
        return $this->container['index_type_code'];
    }

    /**
     * Sets index_type_code
     *
     * @param string $index_type_code Indicates which index is used to determine the adjustable mortgage interest rate. Values: LIB = LIBOR, CMT = Constant Maturity Treasury, MTA = Monthly Treasury Average, LAM = LAMA, PRM = Prime, DIS = 11th District, BIL = Treasury Bill, FNM = FNMA (Fannie Mae), SOF = SOFR, OTH = Other
     *
     * @return $this
     */
    public function setIndexTypeCode($index_type_code)
    {
        $this->container['index_type_code'] = $index_type_code;

        return $this;
    }

    /**
     * Gets change_percent_limit
     *
     * @return float
     */
    public function getChangePercentLimit()
    {
        return $this->container['change_percent_limit'];
    }

    /**
     * Sets change_percent_limit
     *
     * @param float $change_percent_limit Maximum amount the interest rate may increase or decrease for any one adjustment period of the adjustable mortgage.  Limit on interest rate change for any single adjustment.
     *
     * @return $this
     */
    public function setChangePercentLimit($change_percent_limit)
    {
        $this->container['change_percent_limit'] = $change_percent_limit;

        return $this;
    }

    /**
     * Gets initial_change_max_percent
     *
     * @return float
     */
    public function getInitialChangeMaxPercent()
    {
        return $this->container['initial_change_max_percent'];
    }

    /**
     * Sets initial_change_max_percent
     *
     * @param float $initial_change_max_percent Maximum interest rate the adjustable mortgage loan rate can increase from the initial interest rate as per the recorded loan documents. Maximum allowable interest rate indicated on initial reset.
     *
     * @return $this
     */
    public function setInitialChangeMaxPercent($initial_change_max_percent)
    {
        $this->container['initial_change_max_percent'] = $initial_change_max_percent;

        return $this;
    }

    /**
     * Gets lookback_period
     *
     * @return int
     */
    public function getLookbackPeriod()
    {
        return $this->container['lookback_period'];
    }

    /**
     * Sets lookback_period
     *
     * @param int $lookback_period The number of days back from interest rate change date to acquire index value.
     *
     * @return $this
     */
    public function setLookbackPeriod($lookback_period)
    {
        $this->container['lookback_period'] = $lookback_period;

        return $this;
    }

    /**
     * Gets payment_change_date
     *
     * @return int
     */
    public function getPaymentChangeDate()
    {
        return $this->container['payment_change_date'];
    }

    /**
     * Sets payment_change_date
     *
     * @param int $payment_change_date Date of payment change (if different than interest rate change date). Format: YYYYMMDD.
     *
     * @return $this
     */
    public function setPaymentChangeDate($payment_change_date)
    {
        $this->container['payment_change_date'] = $payment_change_date;

        return $this;
    }

    /**
     * Gets pay_option_indicator
     *
     * @return int
     */
    public function getPayOptionIndicator()
    {
        return $this->container['pay_option_indicator'];
    }

    /**
     * Sets pay_option_indicator
     *
     * @param int $pay_option_indicator CoreLogic standardized flag that indicates if the mortgage loan has payment options such as interest only, interest and principal or interest and principal with a lump sum. Values:  0 or null = Not Applicable, 1 = Applicable
     *
     * @return $this
     */
    public function setPayOptionIndicator($pay_option_indicator)
    {
        $this->container['pay_option_indicator'] = $pay_option_indicator;

        return $this;
    }

    /**
     * Gets interest_only_indicator
     *
     * @return int
     */
    public function getInterestOnlyIndicator()
    {
        return $this->container['interest_only_indicator'];
    }

    /**
     * Sets interest_only_indicator
     *
     * @param int $interest_only_indicator CoreLogic standardized flag that indicates the mortgage loan is an interest only payment loan. '0 or null = Not Applicable, 1 = Applicable'.
     *
     * @return $this
     */
    public function setInterestOnlyIndicator($interest_only_indicator)
    {
        $this->container['interest_only_indicator'] = $interest_only_indicator;

        return $this;
    }

    /**
     * Gets negative_amortization_indicator
     *
     * @return int
     */
    public function getNegativeAmortizationIndicator()
    {
        return $this->container['negative_amortization_indicator'];
    }

    /**
     * Sets negative_amortization_indicator
     *
     * @param int $negative_amortization_indicator CoreLogic standardized flag that indicates if the mortgage loan has a negative amortization clause. '0 or null = Not Applicable, 1 = Applicable'.
     *
     * @return $this
     */
    public function setNegativeAmortizationIndicator($negative_amortization_indicator)
    {
        $this->container['negative_amortization_indicator'] = $negative_amortization_indicator;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
