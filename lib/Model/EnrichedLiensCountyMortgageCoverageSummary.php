<?php
/**
 * EnrichedLiensCountyMortgageCoverageSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnrichedLiensCountyMortgageCoverageSummary Class Doc Comment
 *
 * @category Class
 * @description Enriched Estimated PIQ
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnrichedLiensCountyMortgageCoverageSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnrichedLiensCountyMortgageCoverageSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'first_mortgage_date' => 'int',
        'last_mortgage_date' => 'int',
        'first_release_date' => 'int',
        'last_release_date' => 'int',
        'standardized_county' => 'string',
        'standardized_state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'first_mortgage_date' => 'int32',
        'last_mortgage_date' => 'int32',
        'first_release_date' => 'int32',
        'last_release_date' => 'int32',
        'standardized_county' => null,
        'standardized_state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_mortgage_date' => 'firstMortgageDate',
        'last_mortgage_date' => 'lastMortgageDate',
        'first_release_date' => 'firstReleaseDate',
        'last_release_date' => 'lastReleaseDate',
        'standardized_county' => 'standardizedCounty',
        'standardized_state' => 'standardizedState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_mortgage_date' => 'setFirstMortgageDate',
        'last_mortgage_date' => 'setLastMortgageDate',
        'first_release_date' => 'setFirstReleaseDate',
        'last_release_date' => 'setLastReleaseDate',
        'standardized_county' => 'setStandardizedCounty',
        'standardized_state' => 'setStandardizedState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_mortgage_date' => 'getFirstMortgageDate',
        'last_mortgage_date' => 'getLastMortgageDate',
        'first_release_date' => 'getFirstReleaseDate',
        'last_release_date' => 'getLastReleaseDate',
        'standardized_county' => 'getStandardizedCounty',
        'standardized_state' => 'getStandardizedState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_mortgage_date'] = isset($data['first_mortgage_date']) ? $data['first_mortgage_date'] : null;
        $this->container['last_mortgage_date'] = isset($data['last_mortgage_date']) ? $data['last_mortgage_date'] : null;
        $this->container['first_release_date'] = isset($data['first_release_date']) ? $data['first_release_date'] : null;
        $this->container['last_release_date'] = isset($data['last_release_date']) ? $data['last_release_date'] : null;
        $this->container['standardized_county'] = isset($data['standardized_county']) ? $data['standardized_county'] : null;
        $this->container['standardized_state'] = isset($data['standardized_state']) ? $data['standardized_state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_mortgage_date
     *
     * @return int
     */
    public function getFirstMortgageDate()
    {
        return $this->container['first_mortgage_date'];
    }

    /**
     * Sets first_mortgage_date
     *
     * @param int $first_mortgage_date Recording date of the earliest mortgage record available in the database for the County.
     *
     * @return $this
     */
    public function setFirstMortgageDate($first_mortgage_date)
    {
        $this->container['first_mortgage_date'] = $first_mortgage_date;

        return $this;
    }

    /**
     * Gets last_mortgage_date
     *
     * @return int
     */
    public function getLastMortgageDate()
    {
        return $this->container['last_mortgage_date'];
    }

    /**
     * Sets last_mortgage_date
     *
     * @param int $last_mortgage_date Recording date of the most recent mortgage record available in the database for the County.
     *
     * @return $this
     */
    public function setLastMortgageDate($last_mortgage_date)
    {
        $this->container['last_mortgage_date'] = $last_mortgage_date;

        return $this;
    }

    /**
     * Gets first_release_date
     *
     * @return int
     */
    public function getFirstReleaseDate()
    {
        return $this->container['first_release_date'];
    }

    /**
     * Sets first_release_date
     *
     * @param int $first_release_date Recording date of the first release of mortgage record available in the database for the County.
     *
     * @return $this
     */
    public function setFirstReleaseDate($first_release_date)
    {
        $this->container['first_release_date'] = $first_release_date;

        return $this;
    }

    /**
     * Gets last_release_date
     *
     * @return int
     */
    public function getLastReleaseDate()
    {
        return $this->container['last_release_date'];
    }

    /**
     * Sets last_release_date
     *
     * @param int $last_release_date Recording date of the most recent release of mortgage available in the database for the County.
     *
     * @return $this
     */
    public function setLastReleaseDate($last_release_date)
    {
        $this->container['last_release_date'] = $last_release_date;

        return $this;
    }

    /**
     * Gets standardized_county
     *
     * @return string
     */
    public function getStandardizedCounty()
    {
        return $this->container['standardized_county'];
    }

    /**
     * Sets standardized_county
     *
     * @param string $standardized_county CoreLogic standardized county name associated with the property address.
     *
     * @return $this
     */
    public function setStandardizedCounty($standardized_county)
    {
        $this->container['standardized_county'] = $standardized_county;

        return $this;
    }

    /**
     * Gets standardized_state
     *
     * @return string
     */
    public function getStandardizedState()
    {
        return $this->container['standardized_state'];
    }

    /**
     * Sets standardized_state
     *
     * @param string $standardized_state CoreLogic standardized two-letter state postal abbreviation. (e.g. CA, TX)
     *
     * @return $this
     */
    public function setStandardizedState($standardized_state)
    {
        $this->container['standardized_state'] = $standardized_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
