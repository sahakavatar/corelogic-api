<?php
/**
 * StructureInterior
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * StructureInterior Class Doc Comment
 *
 * @category Class
 * @description Structure Interior.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StructureInterior implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StructureInterior';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'attic' => '\Swagger\Client\Model\Attic',
        'walls' => '\Swagger\Client\Model\Walls',
        'basement' => '\Swagger\Client\Model\Basement',
        'flooring' => '\Swagger\Client\Model\Flooring',
        'ceiling' => '\Swagger\Client\Model\Ceiling',
        'bathroom_fixtures' => '\Swagger\Client\Model\BathroomFixtures'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'attic' => null,
        'walls' => null,
        'basement' => null,
        'flooring' => null,
        'ceiling' => null,
        'bathroom_fixtures' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'attic' => 'attic',
        'walls' => 'walls',
        'basement' => 'basement',
        'flooring' => 'flooring',
        'ceiling' => 'ceiling',
        'bathroom_fixtures' => 'bathroomFixtures'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'attic' => 'setAttic',
        'walls' => 'setWalls',
        'basement' => 'setBasement',
        'flooring' => 'setFlooring',
        'ceiling' => 'setCeiling',
        'bathroom_fixtures' => 'setBathroomFixtures'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'attic' => 'getAttic',
        'walls' => 'getWalls',
        'basement' => 'getBasement',
        'flooring' => 'getFlooring',
        'ceiling' => 'getCeiling',
        'bathroom_fixtures' => 'getBathroomFixtures'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['attic'] = isset($data['attic']) ? $data['attic'] : null;
        $this->container['walls'] = isset($data['walls']) ? $data['walls'] : null;
        $this->container['basement'] = isset($data['basement']) ? $data['basement'] : null;
        $this->container['flooring'] = isset($data['flooring']) ? $data['flooring'] : null;
        $this->container['ceiling'] = isset($data['ceiling']) ? $data['ceiling'] : null;
        $this->container['bathroom_fixtures'] = isset($data['bathroom_fixtures']) ? $data['bathroom_fixtures'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets attic
     *
     * @return \Swagger\Client\Model\Attic
     */
    public function getAttic()
    {
        return $this->container['attic'];
    }

    /**
     * Sets attic
     *
     * @param \Swagger\Client\Model\Attic $attic attic
     *
     * @return $this
     */
    public function setAttic($attic)
    {
        $this->container['attic'] = $attic;

        return $this;
    }

    /**
     * Gets walls
     *
     * @return \Swagger\Client\Model\Walls
     */
    public function getWalls()
    {
        return $this->container['walls'];
    }

    /**
     * Sets walls
     *
     * @param \Swagger\Client\Model\Walls $walls walls
     *
     * @return $this
     */
    public function setWalls($walls)
    {
        $this->container['walls'] = $walls;

        return $this;
    }

    /**
     * Gets basement
     *
     * @return \Swagger\Client\Model\Basement
     */
    public function getBasement()
    {
        return $this->container['basement'];
    }

    /**
     * Sets basement
     *
     * @param \Swagger\Client\Model\Basement $basement basement
     *
     * @return $this
     */
    public function setBasement($basement)
    {
        $this->container['basement'] = $basement;

        return $this;
    }

    /**
     * Gets flooring
     *
     * @return \Swagger\Client\Model\Flooring
     */
    public function getFlooring()
    {
        return $this->container['flooring'];
    }

    /**
     * Sets flooring
     *
     * @param \Swagger\Client\Model\Flooring $flooring flooring
     *
     * @return $this
     */
    public function setFlooring($flooring)
    {
        $this->container['flooring'] = $flooring;

        return $this;
    }

    /**
     * Gets ceiling
     *
     * @return \Swagger\Client\Model\Ceiling
     */
    public function getCeiling()
    {
        return $this->container['ceiling'];
    }

    /**
     * Sets ceiling
     *
     * @param \Swagger\Client\Model\Ceiling $ceiling ceiling
     *
     * @return $this
     */
    public function setCeiling($ceiling)
    {
        $this->container['ceiling'] = $ceiling;

        return $this;
    }

    /**
     * Gets bathroom_fixtures
     *
     * @return \Swagger\Client\Model\BathroomFixtures
     */
    public function getBathroomFixtures()
    {
        return $this->container['bathroom_fixtures'];
    }

    /**
     * Sets bathroom_fixtures
     *
     * @param \Swagger\Client\Model\BathroomFixtures $bathroom_fixtures bathroom_fixtures
     *
     * @return $this
     */
    public function setBathroomFixtures($bathroom_fixtures)
    {
        $this->container['bathroom_fixtures'] = $bathroom_fixtures;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
