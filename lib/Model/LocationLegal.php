<?php
/**
 * LocationLegal
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LocationLegal Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LocationLegal implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LocationLegal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'subdivision_name' => 'string',
        'subdivision_tract_number' => 'string',
        'subdivision_plat_book_number' => 'string',
        'subdivision_plat_page_number' => 'string',
        'block_number' => 'string',
        'block_number_suffix' => 'string',
        'lot_number' => 'string',
        'lot_number_suffix' => 'string',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'subdivision_name' => null,
        'subdivision_tract_number' => null,
        'subdivision_plat_book_number' => null,
        'subdivision_plat_page_number' => null,
        'block_number' => null,
        'block_number_suffix' => null,
        'lot_number' => null,
        'lot_number_suffix' => null,
        'description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subdivision_name' => 'subdivisionName',
        'subdivision_tract_number' => 'subdivisionTractNumber',
        'subdivision_plat_book_number' => 'subdivisionPlatBookNumber',
        'subdivision_plat_page_number' => 'subdivisionPlatPageNumber',
        'block_number' => 'blockNumber',
        'block_number_suffix' => 'blockNumberSuffix',
        'lot_number' => 'lotNumber',
        'lot_number_suffix' => 'lotNumberSuffix',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subdivision_name' => 'setSubdivisionName',
        'subdivision_tract_number' => 'setSubdivisionTractNumber',
        'subdivision_plat_book_number' => 'setSubdivisionPlatBookNumber',
        'subdivision_plat_page_number' => 'setSubdivisionPlatPageNumber',
        'block_number' => 'setBlockNumber',
        'block_number_suffix' => 'setBlockNumberSuffix',
        'lot_number' => 'setLotNumber',
        'lot_number_suffix' => 'setLotNumberSuffix',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subdivision_name' => 'getSubdivisionName',
        'subdivision_tract_number' => 'getSubdivisionTractNumber',
        'subdivision_plat_book_number' => 'getSubdivisionPlatBookNumber',
        'subdivision_plat_page_number' => 'getSubdivisionPlatPageNumber',
        'block_number' => 'getBlockNumber',
        'block_number_suffix' => 'getBlockNumberSuffix',
        'lot_number' => 'getLotNumber',
        'lot_number_suffix' => 'getLotNumberSuffix',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subdivision_name'] = isset($data['subdivision_name']) ? $data['subdivision_name'] : null;
        $this->container['subdivision_tract_number'] = isset($data['subdivision_tract_number']) ? $data['subdivision_tract_number'] : null;
        $this->container['subdivision_plat_book_number'] = isset($data['subdivision_plat_book_number']) ? $data['subdivision_plat_book_number'] : null;
        $this->container['subdivision_plat_page_number'] = isset($data['subdivision_plat_page_number']) ? $data['subdivision_plat_page_number'] : null;
        $this->container['block_number'] = isset($data['block_number']) ? $data['block_number'] : null;
        $this->container['block_number_suffix'] = isset($data['block_number_suffix']) ? $data['block_number_suffix'] : null;
        $this->container['lot_number'] = isset($data['lot_number']) ? $data['lot_number'] : null;
        $this->container['lot_number_suffix'] = isset($data['lot_number_suffix']) ? $data['lot_number_suffix'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subdivision_name
     *
     * @return string
     */
    public function getSubdivisionName()
    {
        return $this->container['subdivision_name'];
    }

    /**
     * Sets subdivision_name
     *
     * @param string $subdivision_name The name of the Subdivision or Condominium where the parcel is located (e.g., Highland Mills Estates, Crystal Towers Condo).
     *
     * @return $this
     */
    public function setSubdivisionName($subdivision_name)
    {
        $this->container['subdivision_name'] = $subdivision_name;

        return $this;
    }

    /**
     * Gets subdivision_tract_number
     *
     * @return string
     */
    public function getSubdivisionTractNumber()
    {
        return $this->container['subdivision_tract_number'];
    }

    /**
     * Sets subdivision_tract_number
     *
     * @param string $subdivision_tract_number The unique number assigned to a specific subdivision by the county. Often this is used in lieu of an actual subdivision name.
     *
     * @return $this
     */
    public function setSubdivisionTractNumber($subdivision_tract_number)
    {
        $this->container['subdivision_tract_number'] = $subdivision_tract_number;

        return $this;
    }

    /**
     * Gets subdivision_plat_book_number
     *
     * @return string
     */
    public function getSubdivisionPlatBookNumber()
    {
        return $this->container['subdivision_plat_book_number'];
    }

    /**
     * Sets subdivision_plat_book_number
     *
     * @param string $subdivision_plat_book_number The first component of a recording system used by some counties to catalog subdivision / condo plans (e.g., Book 123 Page 55A).
     *
     * @return $this
     */
    public function setSubdivisionPlatBookNumber($subdivision_plat_book_number)
    {
        $this->container['subdivision_plat_book_number'] = $subdivision_plat_book_number;

        return $this;
    }

    /**
     * Gets subdivision_plat_page_number
     *
     * @return string
     */
    public function getSubdivisionPlatPageNumber()
    {
        return $this->container['subdivision_plat_page_number'];
    }

    /**
     * Sets subdivision_plat_page_number
     *
     * @param string $subdivision_plat_page_number The second component of a recording system used by some counties to catalog subdivision / condo plans (e.g., Book 123 Page 55A).
     *
     * @return $this
     */
    public function setSubdivisionPlatPageNumber($subdivision_plat_page_number)
    {
        $this->container['subdivision_plat_page_number'] = $subdivision_plat_page_number;

        return $this;
    }

    /**
     * Gets block_number
     *
     * @return string
     */
    public function getBlockNumber()
    {
        return $this->container['block_number'];
    }

    /**
     * Sets block_number
     *
     * @param string $block_number Identifies the county block number where the parcel is located. Part of a subdivision or tract legal description. Subdivisions are often broken down into blocks, which are then broken down into lots.
     *
     * @return $this
     */
    public function setBlockNumber($block_number)
    {
        $this->container['block_number'] = $block_number;

        return $this;
    }

    /**
     * Gets block_number_suffix
     *
     * @return string
     */
    public function getBlockNumberSuffix()
    {
        return $this->container['block_number_suffix'];
    }

    /**
     * Sets block_number_suffix
     *
     * @param string $block_number_suffix Identifies the county block number suffix where the parcel is located.
     *
     * @return $this
     */
    public function setBlockNumberSuffix($block_number_suffix)
    {
        $this->container['block_number_suffix'] = $block_number_suffix;

        return $this;
    }

    /**
     * Gets lot_number
     *
     * @return string
     */
    public function getLotNumber()
    {
        return $this->container['lot_number'];
    }

    /**
     * Sets lot_number
     *
     * @param string $lot_number Subdivision or County Map Lot Number. Part of a subdivision or tract legal description. Subdivisions are often broken down into blocks, which are then broken down into lots.
     *
     * @return $this
     */
    public function setLotNumber($lot_number)
    {
        $this->container['lot_number'] = $lot_number;

        return $this;
    }

    /**
     * Gets lot_number_suffix
     *
     * @return string
     */
    public function getLotNumberSuffix()
    {
        return $this->container['lot_number_suffix'];
    }

    /**
     * Sets lot_number_suffix
     *
     * @param string $lot_number_suffix Subdivision or County Map Lot Number Suffix.
     *
     * @return $this
     */
    public function setLotNumberSuffix($lot_number_suffix)
    {
        $this->container['lot_number_suffix'] = $lot_number_suffix;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description County or local jurisdiction legal property descriptions. This description provides additional information regarding the property. It primarily delineates the exact boundaries of the property and may include other values like mineral rights, description of the layout of the property, etc.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
