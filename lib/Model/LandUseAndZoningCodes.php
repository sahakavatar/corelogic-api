<?php
/**
 * LandUseAndZoningCodes
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * LandUseAndZoningCodes Class Doc Comment
 *
 * @category Class
 * @description Land Use And Zoning Codes Details
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class LandUseAndZoningCodes implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'LandUseAndZoningCodes';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'property_type_code' => 'string',
        'property_type_code_description' => 'string',
        'land_use_code' => 'string',
        'land_use_code_description' => 'string',
        'state_land_use_description' => 'string',
        'county_land_use_description' => 'string',
        'zoning_code' => 'string',
        'zoning_code_description' => 'string',
        'is_manufactured_home' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'property_type_code' => null,
        'property_type_code_description' => null,
        'land_use_code' => null,
        'land_use_code_description' => null,
        'state_land_use_description' => null,
        'county_land_use_description' => null,
        'zoning_code' => null,
        'zoning_code_description' => null,
        'is_manufactured_home' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'property_type_code' => 'propertyTypeCode',
        'property_type_code_description' => 'propertyTypeCodeDescription',
        'land_use_code' => 'landUseCode',
        'land_use_code_description' => 'landUseCodeDescription',
        'state_land_use_description' => 'stateLandUseDescription',
        'county_land_use_description' => 'countyLandUseDescription',
        'zoning_code' => 'zoningCode',
        'zoning_code_description' => 'zoningCodeDescription',
        'is_manufactured_home' => 'isManufacturedHome'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'property_type_code' => 'setPropertyTypeCode',
        'property_type_code_description' => 'setPropertyTypeCodeDescription',
        'land_use_code' => 'setLandUseCode',
        'land_use_code_description' => 'setLandUseCodeDescription',
        'state_land_use_description' => 'setStateLandUseDescription',
        'county_land_use_description' => 'setCountyLandUseDescription',
        'zoning_code' => 'setZoningCode',
        'zoning_code_description' => 'setZoningCodeDescription',
        'is_manufactured_home' => 'setIsManufacturedHome'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'property_type_code' => 'getPropertyTypeCode',
        'property_type_code_description' => 'getPropertyTypeCodeDescription',
        'land_use_code' => 'getLandUseCode',
        'land_use_code_description' => 'getLandUseCodeDescription',
        'state_land_use_description' => 'getStateLandUseDescription',
        'county_land_use_description' => 'getCountyLandUseDescription',
        'zoning_code' => 'getZoningCode',
        'zoning_code_description' => 'getZoningCodeDescription',
        'is_manufactured_home' => 'getIsManufacturedHome'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['property_type_code'] = isset($data['property_type_code']) ? $data['property_type_code'] : null;
        $this->container['property_type_code_description'] = isset($data['property_type_code_description']) ? $data['property_type_code_description'] : null;
        $this->container['land_use_code'] = isset($data['land_use_code']) ? $data['land_use_code'] : null;
        $this->container['land_use_code_description'] = isset($data['land_use_code_description']) ? $data['land_use_code_description'] : null;
        $this->container['state_land_use_description'] = isset($data['state_land_use_description']) ? $data['state_land_use_description'] : null;
        $this->container['county_land_use_description'] = isset($data['county_land_use_description']) ? $data['county_land_use_description'] : null;
        $this->container['zoning_code'] = isset($data['zoning_code']) ? $data['zoning_code'] : null;
        $this->container['zoning_code_description'] = isset($data['zoning_code_description']) ? $data['zoning_code_description'] : null;
        $this->container['is_manufactured_home'] = isset($data['is_manufactured_home']) ? $data['is_manufactured_home'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets property_type_code
     *
     * @return string
     */
    public function getPropertyTypeCode()
    {
        return $this->container['property_type_code'];
    }

    /**
     * Sets property_type_code
     *
     * @param string $property_type_code A CoreLogic general code used to easily recognize specific property types (e.g. Single Family Residence, Condominium, Commercial). This value was determined from property information upon receipt of the transaction and reflects the Property Indicator as a static value at that point in time.
     *
     * @return $this
     */
    public function setPropertyTypeCode($property_type_code)
    {
        $this->container['property_type_code'] = $property_type_code;

        return $this;
    }

    /**
     * Gets property_type_code_description
     *
     * @return string
     */
    public function getPropertyTypeCodeDescription()
    {
        return $this->container['property_type_code_description'];
    }

    /**
     * Sets property_type_code_description
     *
     * @param string $property_type_code_description Described value of the primaryTypeCode.
     *
     * @return $this
     */
    public function setPropertyTypeCodeDescription($property_type_code_description)
    {
        $this->container['property_type_code_description'] = $property_type_code_description;

        return $this;
    }

    /**
     * Gets land_use_code
     *
     * @return string
     */
    public function getLandUseCode()
    {
        return $this->container['land_use_code'];
    }

    /**
     * Sets land_use_code
     *
     * @param string $land_use_code A CoreLogic established Land Use code converted from various county Land Use codes to aid in search and extract functions. This value was captured from property information upon receipt of the transaction and reflects the Land Use as a static value at that point in time.
     *
     * @return $this
     */
    public function setLandUseCode($land_use_code)
    {
        $this->container['land_use_code'] = $land_use_code;

        return $this;
    }

    /**
     * Gets land_use_code_description
     *
     * @return string
     */
    public function getLandUseCodeDescription()
    {
        return $this->container['land_use_code_description'];
    }

    /**
     * Sets land_use_code_description
     *
     * @param string $land_use_code_description Described value of landUseCode.
     *
     * @return $this
     */
    public function setLandUseCodeDescription($land_use_code_description)
    {
        $this->container['land_use_code_description'] = $land_use_code_description;

        return $this;
    }

    /**
     * Gets state_land_use_description
     *
     * @return string
     */
    public function getStateLandUseDescription()
    {
        return $this->container['state_land_use_description'];
    }

    /**
     * Sets state_land_use_description
     *
     * @param string $state_land_use_description State-specific secondary Land Use provide by the county.Â  This value was captured from property information upon receipt of the transaction and reflects the State Land Use Description as a static value at that point in time.
     *
     * @return $this
     */
    public function setStateLandUseDescription($state_land_use_description)
    {
        $this->container['state_land_use_description'] = $state_land_use_description;

        return $this;
    }

    /**
     * Gets county_land_use_description
     *
     * @return string
     */
    public function getCountyLandUseDescription()
    {
        return $this->container['county_land_use_description'];
    }

    /**
     * Sets county_land_use_description
     *
     * @param string $county_land_use_description Primary (e.g. highest) Land Use as established by the county or local taxing administration.Â  This value was captured from property information upon receipt of the transaction and reflects the County Use Description as a static value at that point in time.
     *
     * @return $this
     */
    public function setCountyLandUseDescription($county_land_use_description)
    {
        $this->container['county_land_use_description'] = $county_land_use_description;

        return $this;
    }

    /**
     * Gets zoning_code
     *
     * @return string
     */
    public function getZoningCode()
    {
        return $this->container['zoning_code'];
    }

    /**
     * Sets zoning_code
     *
     * @param string $zoning_code The data contained in this field is based upon County and/or Local established Zoning Codes and is not converted by CoreLogic.
     *
     * @return $this
     */
    public function setZoningCode($zoning_code)
    {
        $this->container['zoning_code'] = $zoning_code;

        return $this;
    }

    /**
     * Gets zoning_code_description
     *
     * @return string
     */
    public function getZoningCodeDescription()
    {
        return $this->container['zoning_code_description'];
    }

    /**
     * Sets zoning_code_description
     *
     * @param string $zoning_code_description County provided zoning code description that describes the allowable land use for the real property.
     *
     * @return $this
     */
    public function setZoningCodeDescription($zoning_code_description)
    {
        $this->container['zoning_code_description'] = $zoning_code_description;

        return $this;
    }

    /**
     * Gets is_manufactured_home
     *
     * @return string
     */
    public function getIsManufacturedHome()
    {
        return $this->container['is_manufactured_home'];
    }

    /**
     * Sets is_manufactured_home
     *
     * @param string $is_manufactured_home This field is populated with a \"Y\" if a Manufactured Home is present on the parcel.
     *
     * @return $this
     */
    public function setIsManufacturedHome($is_manufactured_home)
    {
        $this->container['is_manufactured_home'] = $is_manufactured_home;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
