<?php
/**
 * EnrichedLienEstimatedPIQ
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EnrichedLienEstimatedPIQ Class Doc Comment
 *
 * @category Class
 * @description Enriched Estimated PIQ
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EnrichedLienEstimatedPIQ implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EnrichedLienEstimatedPIQ';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'unpaid_principal_balance' => 'float',
        'upb_confidence_rank' => 'int',
        'present_ltv' => 'int',
        'present_ltv_confidence_rank' => 'int',
        'upb_and_pltv_run_date' => 'int',
        'ltv' => 'int',
        'ltv_confidence_rank' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'unpaid_principal_balance' => null,
        'upb_confidence_rank' => 'int32',
        'present_ltv' => 'int32',
        'present_ltv_confidence_rank' => 'int32',
        'upb_and_pltv_run_date' => 'int32',
        'ltv' => 'int32',
        'ltv_confidence_rank' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'unpaid_principal_balance' => 'unpaidPrincipalBalance',
        'upb_confidence_rank' => 'upbConfidenceRank',
        'present_ltv' => 'presentLTV',
        'present_ltv_confidence_rank' => 'presentLTVConfidenceRank',
        'upb_and_pltv_run_date' => 'upbAndPLTVRunDate',
        'ltv' => 'ltv',
        'ltv_confidence_rank' => 'ltvConfidenceRank'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'unpaid_principal_balance' => 'setUnpaidPrincipalBalance',
        'upb_confidence_rank' => 'setUpbConfidenceRank',
        'present_ltv' => 'setPresentLtv',
        'present_ltv_confidence_rank' => 'setPresentLtvConfidenceRank',
        'upb_and_pltv_run_date' => 'setUpbAndPltvRunDate',
        'ltv' => 'setLtv',
        'ltv_confidence_rank' => 'setLtvConfidenceRank'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'unpaid_principal_balance' => 'getUnpaidPrincipalBalance',
        'upb_confidence_rank' => 'getUpbConfidenceRank',
        'present_ltv' => 'getPresentLtv',
        'present_ltv_confidence_rank' => 'getPresentLtvConfidenceRank',
        'upb_and_pltv_run_date' => 'getUpbAndPltvRunDate',
        'ltv' => 'getLtv',
        'ltv_confidence_rank' => 'getLtvConfidenceRank'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['unpaid_principal_balance'] = isset($data['unpaid_principal_balance']) ? $data['unpaid_principal_balance'] : null;
        $this->container['upb_confidence_rank'] = isset($data['upb_confidence_rank']) ? $data['upb_confidence_rank'] : null;
        $this->container['present_ltv'] = isset($data['present_ltv']) ? $data['present_ltv'] : null;
        $this->container['present_ltv_confidence_rank'] = isset($data['present_ltv_confidence_rank']) ? $data['present_ltv_confidence_rank'] : null;
        $this->container['upb_and_pltv_run_date'] = isset($data['upb_and_pltv_run_date']) ? $data['upb_and_pltv_run_date'] : null;
        $this->container['ltv'] = isset($data['ltv']) ? $data['ltv'] : null;
        $this->container['ltv_confidence_rank'] = isset($data['ltv_confidence_rank']) ? $data['ltv_confidence_rank'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets unpaid_principal_balance
     *
     * @return float
     */
    public function getUnpaidPrincipalBalance()
    {
        return $this->container['unpaid_principal_balance'];
    }

    /**
     * Sets unpaid_principal_balance
     *
     * @param float $unpaid_principal_balance CoreLogic enriched estimated Unpaid Principal Balance (UPB) value on Purchase and Refinance loans only. The Enriched proprietary logic is designed to improve completeness and accuracy.
     *
     * @return $this
     */
    public function setUnpaidPrincipalBalance($unpaid_principal_balance)
    {
        $this->container['unpaid_principal_balance'] = $unpaid_principal_balance;

        return $this;
    }

    /**
     * Gets upb_confidence_rank
     *
     * @return int
     */
    public function getUpbConfidenceRank()
    {
        return $this->container['upb_confidence_rank'];
    }

    /**
     * Sets upb_confidence_rank
     *
     * @param int $upb_confidence_rank A rank of 1-5 depicting the confidence level of the Estimated Unpaid Principal Balance. 5 is the most confident ranking. Values: 5 = Excellent; 4 = Very Good; 3 = Good; 2 = Fair; 1 = Very Low
     *
     * @return $this
     */
    public function setUpbConfidenceRank($upb_confidence_rank)
    {
        $this->container['upb_confidence_rank'] = $upb_confidence_rank;

        return $this;
    }

    /**
     * Gets present_ltv
     *
     * @return int
     */
    public function getPresentLtv()
    {
        return $this->container['present_ltv'];
    }

    /**
     * Sets present_ltv
     *
     * @param int $present_ltv CoreLogic enriched estimated Loan to Value (LTV) at 'Present' date. This is a dynamic ratio, at time of calculation. The Enriched proprietary logic is designed to improve completeness and accuracy. Value expressed as a percentage.
     *
     * @return $this
     */
    public function setPresentLtv($present_ltv)
    {
        $this->container['present_ltv'] = $present_ltv;

        return $this;
    }

    /**
     * Gets present_ltv_confidence_rank
     *
     * @return int
     */
    public function getPresentLtvConfidenceRank()
    {
        return $this->container['present_ltv_confidence_rank'];
    }

    /**
     * Sets present_ltv_confidence_rank
     *
     * @param int $present_ltv_confidence_rank A rank of 1-5 depicting the confidence level of the Estimated Present Loan to Value. 5 is the most confident ranking. Values: 5 = Excellent; 4 = Very Good; 3 = Good; 2 = Fair; 1 = Very Low; 0 = UNK (Insufficient Information)
     *
     * @return $this
     */
    public function setPresentLtvConfidenceRank($present_ltv_confidence_rank)
    {
        $this->container['present_ltv_confidence_rank'] = $present_ltv_confidence_rank;

        return $this;
    }

    /**
     * Gets upb_and_pltv_run_date
     *
     * @return int
     */
    public function getUpbAndPltvRunDate()
    {
        return $this->container['upb_and_pltv_run_date'];
    }

    /**
     * Sets upb_and_pltv_run_date
     *
     * @param int $upb_and_pltv_run_date Month, Day, Year that UPB and PLTV enriched calculations were run for loan. Purchase and Refinance loans are only loan types associated with Estimated UPB and Estimated PLTV. Format: YYYYMMDD
     *
     * @return $this
     */
    public function setUpbAndPltvRunDate($upb_and_pltv_run_date)
    {
        $this->container['upb_and_pltv_run_date'] = $upb_and_pltv_run_date;

        return $this;
    }

    /**
     * Gets ltv
     *
     * @return int
     */
    public function getLtv()
    {
        return $this->container['ltv'];
    }

    /**
     * Sets ltv
     *
     * @param int $ltv CoreLogic enriched estimated Loan to Value (LTV) of Primary Loan at loan origination. This is a static ratio. The Enriched proprietary logic is designed to improve completeness and accuracy. Value expressed as a percentage.
     *
     * @return $this
     */
    public function setLtv($ltv)
    {
        $this->container['ltv'] = $ltv;

        return $this;
    }

    /**
     * Gets ltv_confidence_rank
     *
     * @return int
     */
    public function getLtvConfidenceRank()
    {
        return $this->container['ltv_confidence_rank'];
    }

    /**
     * Sets ltv_confidence_rank
     *
     * @param int $ltv_confidence_rank A rank of 1-5 depicting the confidence level of the Estimated Present Loan to Value. 5 is the most confident ranking. Rank descriptions: 5 = Excellent; 4 = Very Good; 3 = Good; 2 = Fair; 1 = Very Low; 0 = UNK ( Insufficient Information)
     *
     * @return $this
     */
    public function setLtvConfidenceRank($ltv_confidence_rank)
    {
        $this->container['ltv_confidence_rank'] = $ltv_confidence_rank;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
