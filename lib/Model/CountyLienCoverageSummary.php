<?php
/**
 * CountyLienCoverageSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CountyLienCoverageSummary Class Doc Comment
 *
 * @category Class
 * @description County Lien Coverage Summary.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CountyLienCoverageSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CountyLienCoverageSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'first_hoa_lien_date' => 'string',
        'last_hoa_lien_date' => 'string',
        'first_mechanics_lien_date' => 'string',
        'last_mechanics_lien_date' => 'string',
        'first_tax_lien_date' => 'string',
        'last_tax_lien_date' => 'string',
        'standardized_county' => 'string',
        'standardized_fips_code' => 'string',
        'standardized_state' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'first_hoa_lien_date' => null,
        'last_hoa_lien_date' => null,
        'first_mechanics_lien_date' => null,
        'last_mechanics_lien_date' => null,
        'first_tax_lien_date' => null,
        'last_tax_lien_date' => null,
        'standardized_county' => null,
        'standardized_fips_code' => null,
        'standardized_state' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_hoa_lien_date' => 'firstHOALienDate',
        'last_hoa_lien_date' => 'lastHOALienDate',
        'first_mechanics_lien_date' => 'firstMechanicsLienDate',
        'last_mechanics_lien_date' => 'lastMechanicsLienDate',
        'first_tax_lien_date' => 'firstTaxLienDate',
        'last_tax_lien_date' => 'lastTaxLienDate',
        'standardized_county' => 'standardizedCounty',
        'standardized_fips_code' => 'standardizedFIPsCode',
        'standardized_state' => 'standardizedState'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_hoa_lien_date' => 'setFirstHoaLienDate',
        'last_hoa_lien_date' => 'setLastHoaLienDate',
        'first_mechanics_lien_date' => 'setFirstMechanicsLienDate',
        'last_mechanics_lien_date' => 'setLastMechanicsLienDate',
        'first_tax_lien_date' => 'setFirstTaxLienDate',
        'last_tax_lien_date' => 'setLastTaxLienDate',
        'standardized_county' => 'setStandardizedCounty',
        'standardized_fips_code' => 'setStandardizedFipsCode',
        'standardized_state' => 'setStandardizedState'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_hoa_lien_date' => 'getFirstHoaLienDate',
        'last_hoa_lien_date' => 'getLastHoaLienDate',
        'first_mechanics_lien_date' => 'getFirstMechanicsLienDate',
        'last_mechanics_lien_date' => 'getLastMechanicsLienDate',
        'first_tax_lien_date' => 'getFirstTaxLienDate',
        'last_tax_lien_date' => 'getLastTaxLienDate',
        'standardized_county' => 'getStandardizedCounty',
        'standardized_fips_code' => 'getStandardizedFipsCode',
        'standardized_state' => 'getStandardizedState'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_hoa_lien_date'] = isset($data['first_hoa_lien_date']) ? $data['first_hoa_lien_date'] : null;
        $this->container['last_hoa_lien_date'] = isset($data['last_hoa_lien_date']) ? $data['last_hoa_lien_date'] : null;
        $this->container['first_mechanics_lien_date'] = isset($data['first_mechanics_lien_date']) ? $data['first_mechanics_lien_date'] : null;
        $this->container['last_mechanics_lien_date'] = isset($data['last_mechanics_lien_date']) ? $data['last_mechanics_lien_date'] : null;
        $this->container['first_tax_lien_date'] = isset($data['first_tax_lien_date']) ? $data['first_tax_lien_date'] : null;
        $this->container['last_tax_lien_date'] = isset($data['last_tax_lien_date']) ? $data['last_tax_lien_date'] : null;
        $this->container['standardized_county'] = isset($data['standardized_county']) ? $data['standardized_county'] : null;
        $this->container['standardized_fips_code'] = isset($data['standardized_fips_code']) ? $data['standardized_fips_code'] : null;
        $this->container['standardized_state'] = isset($data['standardized_state']) ? $data['standardized_state'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_hoa_lien_date
     *
     * @return string
     */
    public function getFirstHoaLienDate()
    {
        return $this->container['first_hoa_lien_date'];
    }

    /**
     * Sets first_hoa_lien_date
     *
     * @param string $first_hoa_lien_date Recording date of the earliest homeowner's association lien record in the database for the county.
     *
     * @return $this
     */
    public function setFirstHoaLienDate($first_hoa_lien_date)
    {
        $this->container['first_hoa_lien_date'] = $first_hoa_lien_date;

        return $this;
    }

    /**
     * Gets last_hoa_lien_date
     *
     * @return string
     */
    public function getLastHoaLienDate()
    {
        return $this->container['last_hoa_lien_date'];
    }

    /**
     * Sets last_hoa_lien_date
     *
     * @param string $last_hoa_lien_date Recording date of the most recent home owner's association lien record available in the database for the County.
     *
     * @return $this
     */
    public function setLastHoaLienDate($last_hoa_lien_date)
    {
        $this->container['last_hoa_lien_date'] = $last_hoa_lien_date;

        return $this;
    }

    /**
     * Gets first_mechanics_lien_date
     *
     * @return string
     */
    public function getFirstMechanicsLienDate()
    {
        return $this->container['first_mechanics_lien_date'];
    }

    /**
     * Sets first_mechanics_lien_date
     *
     * @param string $first_mechanics_lien_date Recording date of the earliest mechanic lien record in the database for the county.
     *
     * @return $this
     */
    public function setFirstMechanicsLienDate($first_mechanics_lien_date)
    {
        $this->container['first_mechanics_lien_date'] = $first_mechanics_lien_date;

        return $this;
    }

    /**
     * Gets last_mechanics_lien_date
     *
     * @return string
     */
    public function getLastMechanicsLienDate()
    {
        return $this->container['last_mechanics_lien_date'];
    }

    /**
     * Sets last_mechanics_lien_date
     *
     * @param string $last_mechanics_lien_date Recording date of the most recent mechanic lien record available in the database for the County.
     *
     * @return $this
     */
    public function setLastMechanicsLienDate($last_mechanics_lien_date)
    {
        $this->container['last_mechanics_lien_date'] = $last_mechanics_lien_date;

        return $this;
    }

    /**
     * Gets first_tax_lien_date
     *
     * @return string
     */
    public function getFirstTaxLienDate()
    {
        return $this->container['first_tax_lien_date'];
    }

    /**
     * Sets first_tax_lien_date
     *
     * @param string $first_tax_lien_date Recording date of the earliest tax lien record in the database for the county.
     *
     * @return $this
     */
    public function setFirstTaxLienDate($first_tax_lien_date)
    {
        $this->container['first_tax_lien_date'] = $first_tax_lien_date;

        return $this;
    }

    /**
     * Gets last_tax_lien_date
     *
     * @return string
     */
    public function getLastTaxLienDate()
    {
        return $this->container['last_tax_lien_date'];
    }

    /**
     * Sets last_tax_lien_date
     *
     * @param string $last_tax_lien_date Recording date of the most recent tax lien record available in the database for the County.
     *
     * @return $this
     */
    public function setLastTaxLienDate($last_tax_lien_date)
    {
        $this->container['last_tax_lien_date'] = $last_tax_lien_date;

        return $this;
    }

    /**
     * Gets standardized_county
     *
     * @return string
     */
    public function getStandardizedCounty()
    {
        return $this->container['standardized_county'];
    }

    /**
     * Sets standardized_county
     *
     * @param string $standardized_county CoreLogic standardized county name associated with the property address.
     *
     * @return $this
     */
    public function setStandardizedCounty($standardized_county)
    {
        $this->container['standardized_county'] = $standardized_county;

        return $this;
    }

    /**
     * Gets standardized_fips_code
     *
     * @return string
     */
    public function getStandardizedFipsCode()
    {
        return $this->container['standardized_fips_code'];
    }

    /**
     * Sets standardized_fips_code
     *
     * @param string $standardized_fips_code CoreLogic standardized Federal Information Processing Standard (FIPS) code that identifies the county and state. The first two characters identify the state, and the next three characters define the county.
     *
     * @return $this
     */
    public function setStandardizedFipsCode($standardized_fips_code)
    {
        $this->container['standardized_fips_code'] = $standardized_fips_code;

        return $this;
    }

    /**
     * Gets standardized_state
     *
     * @return string
     */
    public function getStandardizedState()
    {
        return $this->container['standardized_state'];
    }

    /**
     * Sets standardized_state
     *
     * @param string $standardized_state CoreLogic standardized two-letter state postal abbreviation. (e.g. CA, TX).
     *
     * @return $this
     */
    public function setStandardizedState($standardized_state)
    {
        $this->container['standardized_state'] = $standardized_state;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
