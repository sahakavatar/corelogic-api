<?php
/**
 * PropertyControllerApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PropertyControllerApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertyControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation geocode
     *
     * Property search by address, city, state, zip code and apn with Geocode results
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     * @param  string $best_match true/false, true is required for bestMatch only, default is false (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GeocodeProduct
     */
    public function geocode($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $county = null, $county_code = null, $best_match = 'false')
    {
        list($response) = $this->geocodeWithHttpInfo($street_address, $city, $state, $zip_code, $apn, $county, $county_code, $best_match);
        return $response;
    }

    /**
     * Operation geocodeWithHttpInfo
     *
     * Property search by address, city, state, zip code and apn with Geocode results
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     * @param  string $best_match true/false, true is required for bestMatch only, default is false (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GeocodeProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function geocodeWithHttpInfo($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $county = null, $county_code = null, $best_match = 'false')
    {
        $returnType = '\Swagger\Client\Model\GeocodeProduct';
        $request = $this->geocodeRequest($street_address, $city, $state, $zip_code, $apn, $county, $county_code, $best_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GeocodeProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseMessages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseMessages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geocodeAsync
     *
     * Property search by address, city, state, zip code and apn with Geocode results
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     * @param  string $best_match true/false, true is required for bestMatch only, default is false (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geocodeAsync($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $county = null, $county_code = null, $best_match = 'false')
    {
        return $this->geocodeAsyncWithHttpInfo($street_address, $city, $state, $zip_code, $apn, $county, $county_code, $best_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geocodeAsyncWithHttpInfo
     *
     * Property search by address, city, state, zip code and apn with Geocode results
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     * @param  string $best_match true/false, true is required for bestMatch only, default is false (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geocodeAsyncWithHttpInfo($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $county = null, $county_code = null, $best_match = 'false')
    {
        $returnType = '\Swagger\Client\Model\GeocodeProduct';
        $request = $this->geocodeRequest($street_address, $city, $state, $zip_code, $apn, $county, $county_code, $best_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geocode'
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     * @param  string $best_match true/false, true is required for bestMatch only, default is false (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function geocodeRequest($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $county = null, $county_code = null, $best_match = 'false')
    {

        $resourcePath = '/v2/properties/search/geocode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($street_address !== null) {
            $queryParams['streetAddress'] = ObjectSerializer::toQueryValue($street_address, null);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city, null);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($zip_code !== null) {
            $queryParams['zipCode'] = ObjectSerializer::toQueryValue($zip_code, '\d{5}');
        }
        // query params
        if ($apn !== null) {
            $queryParams['apn'] = ObjectSerializer::toQueryValue($apn, null);
        }
        // query params
        if ($county !== null) {
            $queryParams['county'] = ObjectSerializer::toQueryValue($county, null);
        }
        // query params
        if ($county_code !== null) {
            $queryParams['countyCode'] = ObjectSerializer::toQueryValue($county_code, null);
        }
        // query params
        if ($best_match !== null) {
            $queryParams['bestMatch'] = ObjectSerializer::toQueryValue($best_match, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', '*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', '*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertySearch
     *
     * Property search by address, city, state, zip code and apn
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     * @param  string $best_match true/false, true is required for bestMatch only, default is false (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PropertySearchProduct
     */
    public function propertySearch($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $county = null, $county_code = null, $best_match = 'false')
    {
        list($response) = $this->propertySearchWithHttpInfo($street_address, $city, $state, $zip_code, $apn, $county, $county_code, $best_match);
        return $response;
    }

    /**
     * Operation propertySearchWithHttpInfo
     *
     * Property search by address, city, state, zip code and apn
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     * @param  string $best_match true/false, true is required for bestMatch only, default is false (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PropertySearchProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertySearchWithHttpInfo($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $county = null, $county_code = null, $best_match = 'false')
    {
        $returnType = '\Swagger\Client\Model\PropertySearchProduct';
        $request = $this->propertySearchRequest($street_address, $city, $state, $zip_code, $apn, $county, $county_code, $best_match);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PropertySearchProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseMessages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseMessages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation propertySearchAsync
     *
     * Property search by address, city, state, zip code and apn
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     * @param  string $best_match true/false, true is required for bestMatch only, default is false (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertySearchAsync($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $county = null, $county_code = null, $best_match = 'false')
    {
        return $this->propertySearchAsyncWithHttpInfo($street_address, $city, $state, $zip_code, $apn, $county, $county_code, $best_match)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertySearchAsyncWithHttpInfo
     *
     * Property search by address, city, state, zip code and apn
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     * @param  string $best_match true/false, true is required for bestMatch only, default is false (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertySearchAsyncWithHttpInfo($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $county = null, $county_code = null, $best_match = 'false')
    {
        $returnType = '\Swagger\Client\Model\PropertySearchProduct';
        $request = $this->propertySearchRequest($street_address, $city, $state, $zip_code, $apn, $county, $county_code, $best_match);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertySearch'
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     * @param  string $best_match true/false, true is required for bestMatch only, default is false (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function propertySearchRequest($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $county = null, $county_code = null, $best_match = 'false')
    {

        $resourcePath = '/v2/properties/search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($street_address !== null) {
            $queryParams['streetAddress'] = ObjectSerializer::toQueryValue($street_address, null);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city, null);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($zip_code !== null) {
            $queryParams['zipCode'] = ObjectSerializer::toQueryValue($zip_code, '\d{5}');
        }
        // query params
        if ($apn !== null) {
            $queryParams['apn'] = ObjectSerializer::toQueryValue($apn, null);
        }
        // query params
        if ($county !== null) {
            $queryParams['county'] = ObjectSerializer::toQueryValue($county, null);
        }
        // query params
        if ($county_code !== null) {
            $queryParams['countyCode'] = ObjectSerializer::toQueryValue($county_code, null);
        }
        // query params
        if ($best_match !== null) {
            $queryParams['bestMatch'] = ObjectSerializer::toQueryValue($best_match, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', '*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', '*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation propertySearchByOwnerS
     *
     * Property search by Address or APN or Owner
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string[] $owner Supports up to two owners (separated by a comma) using the following formats: By full name: LastName FirstName MiddleInitial (Example: Smith John A, Jones Brenda P) By last name: LastName (Example: Smith, Jones) By combo of full name and last name or reverse: (Example1: Smith John A, Jones or Example2: Smith, Jones Brenda P) (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PropertySearchByOwnerNameProduct
     */
    public function propertySearchByOwnerS($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $owner = null, $county = null, $county_code = null)
    {
        list($response) = $this->propertySearchByOwnerSWithHttpInfo($street_address, $city, $state, $zip_code, $apn, $owner, $county, $county_code);
        return $response;
    }

    /**
     * Operation propertySearchByOwnerSWithHttpInfo
     *
     * Property search by Address or APN or Owner
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string[] $owner Supports up to two owners (separated by a comma) using the following formats: By full name: LastName FirstName MiddleInitial (Example: Smith John A, Jones Brenda P) By last name: LastName (Example: Smith, Jones) By combo of full name and last name or reverse: (Example1: Smith John A, Jones or Example2: Smith, Jones Brenda P) (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PropertySearchByOwnerNameProduct, HTTP status code, HTTP response headers (array of strings)
     */
    public function propertySearchByOwnerSWithHttpInfo($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $owner = null, $county = null, $county_code = null)
    {
        $returnType = '\Swagger\Client\Model\PropertySearchByOwnerNameProduct';
        $request = $this->propertySearchByOwnerSRequest($street_address, $city, $state, $zip_code, $apn, $owner, $county, $county_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PropertySearchByOwnerNameProduct',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseMessage',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseMessages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseMessages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation propertySearchByOwnerSAsync
     *
     * Property search by Address or APN or Owner
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string[] $owner Supports up to two owners (separated by a comma) using the following formats: By full name: LastName FirstName MiddleInitial (Example: Smith John A, Jones Brenda P) By last name: LastName (Example: Smith, Jones) By combo of full name and last name or reverse: (Example1: Smith John A, Jones or Example2: Smith, Jones Brenda P) (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertySearchByOwnerSAsync($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $owner = null, $county = null, $county_code = null)
    {
        return $this->propertySearchByOwnerSAsyncWithHttpInfo($street_address, $city, $state, $zip_code, $apn, $owner, $county, $county_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation propertySearchByOwnerSAsyncWithHttpInfo
     *
     * Property search by Address or APN or Owner
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string[] $owner Supports up to two owners (separated by a comma) using the following formats: By full name: LastName FirstName MiddleInitial (Example: Smith John A, Jones Brenda P) By last name: LastName (Example: Smith, Jones) By combo of full name and last name or reverse: (Example1: Smith John A, Jones or Example2: Smith, Jones Brenda P) (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function propertySearchByOwnerSAsyncWithHttpInfo($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $owner = null, $county = null, $county_code = null)
    {
        $returnType = '\Swagger\Client\Model\PropertySearchByOwnerNameProduct';
        $request = $this->propertySearchByOwnerSRequest($street_address, $city, $state, $zip_code, $apn, $owner, $county, $county_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'propertySearchByOwnerS'
     *
     * @param  string $street_address Address line of the address (optional)
     * @param  string $city Name of the City (optional)
     * @param  string $state State code (exact match) (optional)
     * @param  string $zip_code 5-digit ZIP code (exact match) (optional)
     * @param  string $apn APN of the property (optional)
     * @param  string[] $owner Supports up to two owners (separated by a comma) using the following formats: By full name: LastName FirstName MiddleInitial (Example: Smith John A, Jones Brenda P) By last name: LastName (Example: Smith, Jones) By combo of full name and last name or reverse: (Example1: Smith John A, Jones or Example2: Smith, Jones Brenda P) (optional)
     * @param  string $county Name of the County (exact match) (optional)
     * @param  string $county_code County code (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function propertySearchByOwnerSRequest($street_address = null, $city = null, $state = null, $zip_code = null, $apn = null, $owner = null, $county = null, $county_code = null)
    {

        $resourcePath = '/v2/properties/search/owner';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($street_address !== null) {
            $queryParams['streetAddress'] = ObjectSerializer::toQueryValue($street_address, null);
        }
        // query params
        if ($city !== null) {
            $queryParams['city'] = ObjectSerializer::toQueryValue($city, null);
        }
        // query params
        if ($state !== null) {
            $queryParams['state'] = ObjectSerializer::toQueryValue($state, null);
        }
        // query params
        if ($zip_code !== null) {
            $queryParams['zipCode'] = ObjectSerializer::toQueryValue($zip_code, '\d{5}');
        }
        // query params
        if ($apn !== null) {
            $queryParams['apn'] = ObjectSerializer::toQueryValue($apn, null);
        }
        // query params
        if (is_array($owner)) {
            $owner = ObjectSerializer::serializeCollection($owner, 'multi', true);
        }
        if ($owner !== null) {
            $queryParams['owner'] = ObjectSerializer::toQueryValue($owner, null);
        }
        // query params
        if ($county !== null) {
            $queryParams['county'] = ObjectSerializer::toQueryValue($county, null);
        }
        // query params
        if ($county_code !== null) {
            $queryParams['countyCode'] = ObjectSerializer::toQueryValue($county_code, null);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', '*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', '*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
