<?php
/**
 * PropertyComparablesControllerApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * SDP Property
 *
 * SDP Property API.
 *
 * OpenAPI spec version: v2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.66
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PropertyComparablesControllerApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PropertyComparablesControllerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation comparables
     *
     * @param  string $clip_id The id of property which is a subject for search for similar properties. (required)
     * @param  int $min_beds Minimum bedrooms for search. (optional)
     * @param  int $max_beds Maximum bedrooms for search. (optional)
     * @param  int $min_baths Minimum bathrooms for search. (optional)
     * @param  int $max_baths Maximum bathrooms for search. (optional)
     * @param  float $min_bldg_sq_ft Minimum building square feet for search. (optional)
     * @param  float $max_bldg_sq_ft Maximum building square feet for search. (optional)
     * @param  float $bldg_sq_ft_variance Building Square Feet variance in percentage. If supplied, this will not override values specified in minBldgSqFt and maxBldgSqFt. (optional)
     * @param  float $min_lot_sq_ft Minimum lot square feet for search. (optional)
     * @param  float $max_lot_sq_ft Maximum lot square feet for search. (optional)
     * @param  float $lot_sq_ft_variance Lot Square Feet variance in percentage. If supplied, this will not override values specified in minLotSqFt and maxLotSqFt. (optional)
     * @param  float $search_distance Maximum distance in miles from subject property for search radius. Default is 0.5 miles. (optional, default to 0.5)
     * @param  int $max_comps Maximum number of comparables returned.  Default is 10. Max is 100. (optional, default to 10)
     * @param  int $months_back Number of months back to search for comparable sales. Default is 9. Max is 36. (optional, default to 9)
     * @param  string $land_use Land use code for search. Default is same as subject property. (optional)
     * @param  string $sort_by Sort By Distance (ascending) and Sale_Date (latest first) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PropertyComparablesRootResponse
     */
    public function comparables($clip_id, $min_beds = null, $max_beds = null, $min_baths = null, $max_baths = null, $min_bldg_sq_ft = null, $max_bldg_sq_ft = null, $bldg_sq_ft_variance = null, $min_lot_sq_ft = null, $max_lot_sq_ft = null, $lot_sq_ft_variance = null, $search_distance = '0.5', $max_comps = '10', $months_back = '9', $land_use = null, $sort_by = null)
    {
        list($response) = $this->comparablesWithHttpInfo($clip_id, $min_beds, $max_beds, $min_baths, $max_baths, $min_bldg_sq_ft, $max_bldg_sq_ft, $bldg_sq_ft_variance, $min_lot_sq_ft, $max_lot_sq_ft, $lot_sq_ft_variance, $search_distance, $max_comps, $months_back, $land_use, $sort_by);
        return $response;
    }

    /**
     * Operation comparablesWithHttpInfo
     *
     * @param  string $clip_id The id of property which is a subject for search for similar properties. (required)
     * @param  int $min_beds Minimum bedrooms for search. (optional)
     * @param  int $max_beds Maximum bedrooms for search. (optional)
     * @param  int $min_baths Minimum bathrooms for search. (optional)
     * @param  int $max_baths Maximum bathrooms for search. (optional)
     * @param  float $min_bldg_sq_ft Minimum building square feet for search. (optional)
     * @param  float $max_bldg_sq_ft Maximum building square feet for search. (optional)
     * @param  float $bldg_sq_ft_variance Building Square Feet variance in percentage. If supplied, this will not override values specified in minBldgSqFt and maxBldgSqFt. (optional)
     * @param  float $min_lot_sq_ft Minimum lot square feet for search. (optional)
     * @param  float $max_lot_sq_ft Maximum lot square feet for search. (optional)
     * @param  float $lot_sq_ft_variance Lot Square Feet variance in percentage. If supplied, this will not override values specified in minLotSqFt and maxLotSqFt. (optional)
     * @param  float $search_distance Maximum distance in miles from subject property for search radius. Default is 0.5 miles. (optional, default to 0.5)
     * @param  int $max_comps Maximum number of comparables returned.  Default is 10. Max is 100. (optional, default to 10)
     * @param  int $months_back Number of months back to search for comparable sales. Default is 9. Max is 36. (optional, default to 9)
     * @param  string $land_use Land use code for search. Default is same as subject property. (optional)
     * @param  string $sort_by Sort By Distance (ascending) and Sale_Date (latest first) (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PropertyComparablesRootResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function comparablesWithHttpInfo($clip_id, $min_beds = null, $max_beds = null, $min_baths = null, $max_baths = null, $min_bldg_sq_ft = null, $max_bldg_sq_ft = null, $bldg_sq_ft_variance = null, $min_lot_sq_ft = null, $max_lot_sq_ft = null, $lot_sq_ft_variance = null, $search_distance = '0.5', $max_comps = '10', $months_back = '9', $land_use = null, $sort_by = null)
    {
        $returnType = '\Swagger\Client\Model\PropertyComparablesRootResponse';
        $request = $this->comparablesRequest($clip_id, $min_beds, $max_beds, $min_baths, $max_baths, $min_bldg_sq_ft, $max_bldg_sq_ft, $bldg_sq_ft_variance, $min_lot_sq_ft, $max_lot_sq_ft, $lot_sq_ft_variance, $search_distance, $max_comps, $months_back, $land_use, $sort_by);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PropertyComparablesRootResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseMessages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResponseMessages',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ErrorResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation comparablesAsync
     *
     * 
     *
     * @param  string $clip_id The id of property which is a subject for search for similar properties. (required)
     * @param  int $min_beds Minimum bedrooms for search. (optional)
     * @param  int $max_beds Maximum bedrooms for search. (optional)
     * @param  int $min_baths Minimum bathrooms for search. (optional)
     * @param  int $max_baths Maximum bathrooms for search. (optional)
     * @param  float $min_bldg_sq_ft Minimum building square feet for search. (optional)
     * @param  float $max_bldg_sq_ft Maximum building square feet for search. (optional)
     * @param  float $bldg_sq_ft_variance Building Square Feet variance in percentage. If supplied, this will not override values specified in minBldgSqFt and maxBldgSqFt. (optional)
     * @param  float $min_lot_sq_ft Minimum lot square feet for search. (optional)
     * @param  float $max_lot_sq_ft Maximum lot square feet for search. (optional)
     * @param  float $lot_sq_ft_variance Lot Square Feet variance in percentage. If supplied, this will not override values specified in minLotSqFt and maxLotSqFt. (optional)
     * @param  float $search_distance Maximum distance in miles from subject property for search radius. Default is 0.5 miles. (optional, default to 0.5)
     * @param  int $max_comps Maximum number of comparables returned.  Default is 10. Max is 100. (optional, default to 10)
     * @param  int $months_back Number of months back to search for comparable sales. Default is 9. Max is 36. (optional, default to 9)
     * @param  string $land_use Land use code for search. Default is same as subject property. (optional)
     * @param  string $sort_by Sort By Distance (ascending) and Sale_Date (latest first) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function comparablesAsync($clip_id, $min_beds = null, $max_beds = null, $min_baths = null, $max_baths = null, $min_bldg_sq_ft = null, $max_bldg_sq_ft = null, $bldg_sq_ft_variance = null, $min_lot_sq_ft = null, $max_lot_sq_ft = null, $lot_sq_ft_variance = null, $search_distance = '0.5', $max_comps = '10', $months_back = '9', $land_use = null, $sort_by = null)
    {
        return $this->comparablesAsyncWithHttpInfo($clip_id, $min_beds, $max_beds, $min_baths, $max_baths, $min_bldg_sq_ft, $max_bldg_sq_ft, $bldg_sq_ft_variance, $min_lot_sq_ft, $max_lot_sq_ft, $lot_sq_ft_variance, $search_distance, $max_comps, $months_back, $land_use, $sort_by)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation comparablesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $clip_id The id of property which is a subject for search for similar properties. (required)
     * @param  int $min_beds Minimum bedrooms for search. (optional)
     * @param  int $max_beds Maximum bedrooms for search. (optional)
     * @param  int $min_baths Minimum bathrooms for search. (optional)
     * @param  int $max_baths Maximum bathrooms for search. (optional)
     * @param  float $min_bldg_sq_ft Minimum building square feet for search. (optional)
     * @param  float $max_bldg_sq_ft Maximum building square feet for search. (optional)
     * @param  float $bldg_sq_ft_variance Building Square Feet variance in percentage. If supplied, this will not override values specified in minBldgSqFt and maxBldgSqFt. (optional)
     * @param  float $min_lot_sq_ft Minimum lot square feet for search. (optional)
     * @param  float $max_lot_sq_ft Maximum lot square feet for search. (optional)
     * @param  float $lot_sq_ft_variance Lot Square Feet variance in percentage. If supplied, this will not override values specified in minLotSqFt and maxLotSqFt. (optional)
     * @param  float $search_distance Maximum distance in miles from subject property for search radius. Default is 0.5 miles. (optional, default to 0.5)
     * @param  int $max_comps Maximum number of comparables returned.  Default is 10. Max is 100. (optional, default to 10)
     * @param  int $months_back Number of months back to search for comparable sales. Default is 9. Max is 36. (optional, default to 9)
     * @param  string $land_use Land use code for search. Default is same as subject property. (optional)
     * @param  string $sort_by Sort By Distance (ascending) and Sale_Date (latest first) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function comparablesAsyncWithHttpInfo($clip_id, $min_beds = null, $max_beds = null, $min_baths = null, $max_baths = null, $min_bldg_sq_ft = null, $max_bldg_sq_ft = null, $bldg_sq_ft_variance = null, $min_lot_sq_ft = null, $max_lot_sq_ft = null, $lot_sq_ft_variance = null, $search_distance = '0.5', $max_comps = '10', $months_back = '9', $land_use = null, $sort_by = null)
    {
        $returnType = '\Swagger\Client\Model\PropertyComparablesRootResponse';
        $request = $this->comparablesRequest($clip_id, $min_beds, $max_beds, $min_baths, $max_baths, $min_bldg_sq_ft, $max_bldg_sq_ft, $bldg_sq_ft_variance, $min_lot_sq_ft, $max_lot_sq_ft, $lot_sq_ft_variance, $search_distance, $max_comps, $months_back, $land_use, $sort_by);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'comparables'
     *
     * @param  string $clip_id The id of property which is a subject for search for similar properties. (required)
     * @param  int $min_beds Minimum bedrooms for search. (optional)
     * @param  int $max_beds Maximum bedrooms for search. (optional)
     * @param  int $min_baths Minimum bathrooms for search. (optional)
     * @param  int $max_baths Maximum bathrooms for search. (optional)
     * @param  float $min_bldg_sq_ft Minimum building square feet for search. (optional)
     * @param  float $max_bldg_sq_ft Maximum building square feet for search. (optional)
     * @param  float $bldg_sq_ft_variance Building Square Feet variance in percentage. If supplied, this will not override values specified in minBldgSqFt and maxBldgSqFt. (optional)
     * @param  float $min_lot_sq_ft Minimum lot square feet for search. (optional)
     * @param  float $max_lot_sq_ft Maximum lot square feet for search. (optional)
     * @param  float $lot_sq_ft_variance Lot Square Feet variance in percentage. If supplied, this will not override values specified in minLotSqFt and maxLotSqFt. (optional)
     * @param  float $search_distance Maximum distance in miles from subject property for search radius. Default is 0.5 miles. (optional, default to 0.5)
     * @param  int $max_comps Maximum number of comparables returned.  Default is 10. Max is 100. (optional, default to 10)
     * @param  int $months_back Number of months back to search for comparable sales. Default is 9. Max is 36. (optional, default to 9)
     * @param  string $land_use Land use code for search. Default is same as subject property. (optional)
     * @param  string $sort_by Sort By Distance (ascending) and Sale_Date (latest first) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function comparablesRequest($clip_id, $min_beds = null, $max_beds = null, $min_baths = null, $max_baths = null, $min_bldg_sq_ft = null, $max_bldg_sq_ft = null, $bldg_sq_ft_variance = null, $min_lot_sq_ft = null, $max_lot_sq_ft = null, $lot_sq_ft_variance = null, $search_distance = '0.5', $max_comps = '10', $months_back = '9', $land_use = null, $sort_by = null)
    {
        // verify the required parameter 'clip_id' is set
        if ($clip_id === null || (is_array($clip_id) && count($clip_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $clip_id when calling comparables'
            );
        }

        $resourcePath = '/v2/properties/{clipId}/comparables';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($min_beds !== null) {
            $queryParams['minBeds'] = ObjectSerializer::toQueryValue($min_beds, 'int32');
        }
        // query params
        if ($max_beds !== null) {
            $queryParams['maxBeds'] = ObjectSerializer::toQueryValue($max_beds, 'int32');
        }
        // query params
        if ($min_baths !== null) {
            $queryParams['minBaths'] = ObjectSerializer::toQueryValue($min_baths, 'int32');
        }
        // query params
        if ($max_baths !== null) {
            $queryParams['maxBaths'] = ObjectSerializer::toQueryValue($max_baths, 'int32');
        }
        // query params
        if ($min_bldg_sq_ft !== null) {
            $queryParams['minBldgSqFt'] = ObjectSerializer::toQueryValue($min_bldg_sq_ft, null);
        }
        // query params
        if ($max_bldg_sq_ft !== null) {
            $queryParams['maxBldgSqFt'] = ObjectSerializer::toQueryValue($max_bldg_sq_ft, null);
        }
        // query params
        if ($bldg_sq_ft_variance !== null) {
            $queryParams['bldgSqFtVariance'] = ObjectSerializer::toQueryValue($bldg_sq_ft_variance, null);
        }
        // query params
        if ($min_lot_sq_ft !== null) {
            $queryParams['minLotSqFt'] = ObjectSerializer::toQueryValue($min_lot_sq_ft, null);
        }
        // query params
        if ($max_lot_sq_ft !== null) {
            $queryParams['maxLotSqFt'] = ObjectSerializer::toQueryValue($max_lot_sq_ft, null);
        }
        // query params
        if ($lot_sq_ft_variance !== null) {
            $queryParams['lotSqFtVariance'] = ObjectSerializer::toQueryValue($lot_sq_ft_variance, null);
        }
        // query params
        if ($search_distance !== null) {
            $queryParams['searchDistance'] = ObjectSerializer::toQueryValue($search_distance, null);
        }
        // query params
        if ($max_comps !== null) {
            $queryParams['maxComps'] = ObjectSerializer::toQueryValue($max_comps, 'int32');
        }
        // query params
        if ($months_back !== null) {
            $queryParams['monthsBack'] = ObjectSerializer::toQueryValue($months_back, 'int32');
        }
        // query params
        if ($land_use !== null) {
            $queryParams['landUse'] = ObjectSerializer::toQueryValue($land_use, null);
        }
        // query params
        if ($sort_by !== null) {
            $queryParams['sortBy'] = ObjectSerializer::toQueryValue($sort_by, null);
        }

        // path params
        if ($clip_id !== null) {
            $resourcePath = str_replace(
                '{' . 'clipId' . '}',
                ObjectSerializer::toPathValue($clip_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', '*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', '*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
